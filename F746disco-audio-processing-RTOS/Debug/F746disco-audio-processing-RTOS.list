
F746disco-audio-processing-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001abbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000155f8  0801ad8c  0801ad8c  0002ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030384  08030384  000500c8  2**0
                  CONTENTS
  4 .ARM          00000008  08030384  08030384  00040384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803038c  0803038c  000500c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803038c  0803038c  0004038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030390  08030390  00040390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08030394  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c908  200000c8  0803045c  000500c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004c9d0  0803045c  0005c9d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f038  00000000  00000000  000500f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a508  00000000  00000000  0009f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003678  00000000  00000000  000a9638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003268  00000000  00000000  000accb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039bfa  00000000  00000000  000aff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a4f8  00000000  00000000  000e9b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129502  00000000  00000000  0013400a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  0025d50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ed84  00000000  00000000  0025d5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  0026c354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ad74 	.word	0x0801ad74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	0801ad74 	.word	0x0801ad74

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2uiz>:
 8000c48:	004a      	lsls	r2, r1, #1
 8000c4a:	d211      	bcs.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d211      	bcs.n	8000c76 <__aeabi_d2uiz+0x2e>
 8000c52:	d50d      	bpl.n	8000c70 <__aeabi_d2uiz+0x28>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d40e      	bmi.n	8000c7c <__aeabi_d2uiz+0x34>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c7a:	d102      	bne.n	8000c82 <__aeabi_d2uiz+0x3a>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	4770      	bx	lr
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <uiLoop>:
osThreadId * pdefaultTaskHandle;
osThreadId * puiTaskHandle;

// ----------- Functions ------------

void uiLoop(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	uiDisplayBasic();
 8001026:	f002 ff93 	bl	8003f50 <uiDisplayBasic>

	while (1) {
		    osSignalWait (0x02, osWaitForever);
 800102a:	463b      	mov	r3, r7
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	2102      	movs	r1, #2
 8001032:	4618      	mov	r0, r3
 8001034:	f014 fad0 	bl	80155d8 <osSignalWait>
				double y = log10(x);
				s += y;
				printf("%d", (int)s);
			//}*/
		    //uiDisplayInputLevel(displayLL, displayLR);
		    uiDisplayFFT(displayFFT,FFT_SIZE/2);
 8001038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103c:	4801      	ldr	r0, [pc, #4]	; (8001044 <uiLoop+0x24>)
 800103e:	f002 ffc3 	bl	8003fc8 <uiDisplayFFT>
	while (1) {
 8001042:	e7f2      	b.n	800102a <uiLoop+0xa>
 8001044:	200084ec 	.word	0x200084ec

08001048 <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop(osThreadId * audio, osThreadId * ui) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
 800104e:	6178      	str	r0, [r7, #20]
 8001050:	6139      	str	r1, [r7, #16]
	arm_rfft_fast_init_f32(&fft,FFT_SIZE);
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <audioLoop+0x88>)
 8001058:	f017 fa5c 	bl	8018514 <arm_rfft_fast_init_f32>
	//osEvent evt;
	pdefaultTaskHandle = audio;
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <audioLoop+0x8c>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	6013      	str	r3, [r2, #0]
	puiTaskHandle = ui;
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <audioLoop+0x90>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	6013      	str	r3, [r2, #0]


	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <audioLoop+0x94>)
 800106a:	2100      	movs	r1, #0
 800106c:	481c      	ldr	r0, [pc, #112]	; (80010e0 <audioLoop+0x98>)
 800106e:	f018 fb8b 	bl	8019788 <memset>

	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <audioLoop+0x9c>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

	// input device: INPUT_DEVICE_INPUT_LINE_1 or INPUT_DEVICE_DIGITAL_MICROPHONE_2 (not fully functional yet as you also need to change things in main.c:MX_SAI2_Init())
	// AudioFreq: AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_16K, etc (but also change accordingly hsai_BlockA2.Init.AudioFrequency in main.c, line 855)
	//start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, SAI_AUDIO_FREQUENCY_16K); // AUDIO_FREQUENCY_48K);
	start_Audio_Processing(buf_output, buf_input, AUDIO_DMA_BUF_SIZE, INPUT_DEVICE_DIGITAL_MICROPHONE_2, hsai_BlockA2.Init.AudioFrequency);
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <audioLoop+0xa0>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001086:	4919      	ldr	r1, [pc, #100]	; (80010ec <audioLoop+0xa4>)
 8001088:	4819      	ldr	r0, [pc, #100]	; (80010f0 <audioLoop+0xa8>)
 800108a:	f003 fd85 	bl	8004b98 <start_Audio_Processing>

	/* main audio loop */
	while(1){

		osSignalWait (0x0001, osWaitForever);
 800108e:	463b      	mov	r3, r7
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f014 fa9e 	bl	80155d8 <osSignalWait>

		if(audio_rec_buffer_state == BUFFER_OFFSET_HALF){
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <audioLoop+0x9c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d104      	bne.n	80010ae <audioLoop+0x66>
			processAudio(buf_output, buf_input);
 80010a4:	4911      	ldr	r1, [pc, #68]	; (80010ec <audioLoop+0xa4>)
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <audioLoop+0xa8>)
 80010a8:	f000 f8ac 	bl	8001204 <processAudio>
 80010ac:	e00b      	b.n	80010c6 <audioLoop+0x7e>
		}
		else if(audio_rec_buffer_state == BUFFER_OFFSET_FULL){
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <audioLoop+0x9c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d107      	bne.n	80010c6 <audioLoop+0x7e>
			processAudio(buf_output_half, buf_input_half);
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <audioLoop+0xac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <audioLoop+0xb0>)
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f89f 	bl	8001204 <processAudio>
		}

		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <audioLoop+0x9c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
		osSignalWait (0x0001, osWaitForever);
 80010cc:	e7df      	b.n	800108e <audioLoop+0x46>
 80010ce:	bf00      	nop
 80010d0:	2000b8f4 	.word	0x2000b8f4
 80010d4:	2000a8ec 	.word	0x2000a8ec
 80010d8:	2000b8f0 	.word	0x2000b8f0
 80010dc:	0076a000 	.word	0x0076a000
 80010e0:	c0096000 	.word	0xc0096000
 80010e4:	2000b90c 	.word	0x2000b90c
 80010e8:	2000bb3c 	.word	0x2000bb3c
 80010ec:	200088ec 	.word	0x200088ec
 80010f0:	200098ec 	.word	0x200098ec
 80010f4:	20000004 	.word	0x20000004
 80010f8:	20000000 	.word	0x20000000

080010fc <HAL_SAI_RxCpltCallback>:
// --------------------------- Callbacks implementation ---------------------------

/**
 * Audio IN DMA Transfer complete interrupt.
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	osSignalSet (*pdefaultTaskHandle, 0x0001);
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_SAI_RxCpltCallback+0x24>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2101      	movs	r1, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f014 fa23 	bl	8015558 <osSignalSet>
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_SAI_RxCpltCallback+0x28>)
 8001114:	2202      	movs	r2, #2
 8001116:	601a      	str	r2, [r3, #0]
	return;
 8001118:	bf00      	nop
}
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000a8ec 	.word	0x2000a8ec
 8001124:	2000b90c 	.word	0x2000b90c

08001128 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	osSignalSet (*pdefaultTaskHandle, 0x0001);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SAI_RxHalfCpltCallback+0x24>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2101      	movs	r1, #1
 8001138:	4618      	mov	r0, r3
 800113a:	f014 fa0d 	bl	8015558 <osSignalSet>
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
	return;
 8001144:	bf00      	nop
}
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000a8ec 	.word	0x2000a8ec
 8001150:	2000b90c 	.word	0x2000b90c

08001154 <readFromAudioScratch>:
// --------------------------- Audio scratch buffer ---------------------------

/**
 * Read a sample from the audio scratch buffer in SDRAM at position "pos"
 */
static float readFromAudioScratch(int pos) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <readFromAudioScratch+0x2c>)
 800115e:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
	return *(__IO float*) pSdramAddress;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	ee07 3a90 	vmov	s15, r3

}
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	c0096000 	.word	0xc0096000

08001184 <writeToAudioScratch>:

/**
 * Write the given value to the audio scratch buffer in SDRAM at position "pos"
 */
static void writeToAudioScratch(float val, int pos) {
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	ed87 0a01 	vstr	s0, [r7, #4]
 800118e:	6038      	str	r0, [r7, #0]

	__IO float *pSdramAddress = (float*) AUDIO_SCRATCH_ADDR;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <writeToAudioScratch+0x2c>)
 8001192:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
	*(__IO float*) pSdramAddress = val;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]

}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	c0096000 	.word	0xc0096000

080011b4 <circlePos>:

static int circlePos(int pos, int size){
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	if (pos<0)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da0a      	bge.n	80011da <circlePos+0x26>
		return (size-pos)%size;
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	fb93 f2f2 	sdiv	r2, r3, r2
 80011d0:	6839      	ldr	r1, [r7, #0]
 80011d2:	fb01 f202 	mul.w	r2, r1, r2
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	e00d      	b.n	80011f6 <circlePos+0x42>
	if (pos>=size)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	db08      	blt.n	80011f4 <circlePos+0x40>
		return pos%size;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	fb93 f2f2 	sdiv	r2, r3, r2
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	fb01 f202 	mul.w	r2, r1, r2
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	e000      	b.n	80011f6 <circlePos+0x42>
	return pos;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <processAudio>:
 * has been filled by the DMA, that is,  AUDIO_BUF_SIZE samples
 * have just been transferred from the CODEC
 * (keep in mind that this number represents interleaved L and R samples,
 * hence the true corresponding duration of this audio frame is AUDIO_BUF_SIZE/2 divided by the sampling frequency).
 */
static void processAudio(int16_t *out, int16_t *in) {
 8001204:	b580      	push	{r7, lr}
 8001206:	ed2d 8b02 	vpush	{d8}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	LED_On(); // for oscilloscope measurements...
 8001212:	f002 ff6d 	bl	80040f0 <LED_On>
	int sdpos = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
	indfft = 0;
 800121a:	4b43      	ldr	r3, [pc, #268]	; (8001328 <processAudio+0x124>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e060      	b.n	80012e8 <processAudio+0xe4>
		sdpos = circlePos(d,delay);
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <processAudio+0x128>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a41      	ldr	r2, [pc, #260]	; (8001330 <processAudio+0x12c>)
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffbf 	bl	80011b4 <circlePos>
 8001236:	6138      	str	r0, [r7, #16]
		int y = global_gain*in[n]+fb*readFromAudioScratch(sdpos);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <processAudio+0x130>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001256:	6938      	ldr	r0, [r7, #16]
 8001258:	f7ff ff7c 	bl	8001154 <readFromAudioScratch>
 800125c:	eeb0 7a40 	vmov.f32	s14, s0
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <processAudio+0x134>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001272:	ee17 3a90 	vmov	r3, s15
 8001276:	60fb      	str	r3, [r7, #12]
		writeToAudioScratch(y, sdpos);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	6938      	ldr	r0, [r7, #16]
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	f7ff ff7c 	bl	8001184 <writeToAudioScratch>
		out[n] = in[n];
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	441a      	add	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	440b      	add	r3, r1
 800129c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012a0:	801a      	strh	r2, [r3, #0]
		if(n%2 == 0){
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d115      	bne.n	80012d8 <processAudio+0xd4>
			infft[indfft] = in[n];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <processAudio+0x124>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 2a90 	vmov	s15, r2
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <processAudio+0x138>)
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	edc3 7a00 	vstr	s15, [r3]
			indfft++;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <processAudio+0x124>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <processAudio+0x124>)
 80012d6:	6013      	str	r3, [r2, #0]
		}
		d++;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <processAudio+0x128>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <processAudio+0x128>)
 80012e0:	6013      	str	r3, [r2, #0]
	for (int n = 0; n < AUDIO_BUF_SIZE; n++) {
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ee:	d39a      	bcc.n	8001226 <processAudio+0x22>
	}

	// FFT
	arm_rfft_fast_f32(&fft, infft, outfft, 0);
 80012f0:	2300      	movs	r3, #0
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <processAudio+0x13c>)
 80012f4:	4911      	ldr	r1, [pc, #68]	; (800133c <processAudio+0x138>)
 80012f6:	4813      	ldr	r0, [pc, #76]	; (8001344 <processAudio+0x140>)
 80012f8:	f017 f9c0 	bl	801867c <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(outfft, displayFFT, FFT_SIZE/2);
 80012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001300:	4911      	ldr	r1, [pc, #68]	; (8001348 <processAudio+0x144>)
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <processAudio+0x13c>)
 8001304:	f017 fe1e 	bl	8018f44 <arm_cmplx_mag_f32>
	osSignalSet (*puiTaskHandle, 0x02);
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <processAudio+0x148>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2102      	movs	r1, #2
 8001310:	4618      	mov	r0, r3
 8001312:	f014 f921 	bl	8015558 <osSignalSet>
	LED_Off();
 8001316:	f002 fef7 	bl	8004108 <LED_Off>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	ecbd 8b02 	vpop	{d8}
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000e8 	.word	0x200000e8
 800132c:	200000e4 	.word	0x200000e4
 8001330:	20000008 	.word	0x20000008
 8001334:	20000010 	.word	0x20000010
 8001338:	2000000c 	.word	0x2000000c
 800133c:	2000a8f0 	.word	0x2000a8f0
 8001340:	2000b0f0 	.word	0x2000b0f0
 8001344:	2000b8f4 	.word	0x2000b8f4
 8001348:	200084ec 	.word	0x200084ec
 800134c:	2000b8f0 	.word	0x2000b8f0

08001350 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <vApplicationGetIdleTaskMemory+0x30>)
 800139a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200000ec 	.word	0x200000ec
 80013b4:	20000144 	.word	0x20000144

080013b8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013bc:	f3bf 8f4f 	dsb	sy
}
 80013c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c2:	f3bf 8f6f 	isb	sy
}
 80013c6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <SCB_EnableICache+0x48>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013d0:	f3bf 8f4f 	dsb	sy
}
 80013d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013d6:	f3bf 8f6f 	isb	sy
}
 80013da:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <SCB_EnableICache+0x48>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <SCB_EnableICache+0x48>)
 80013e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013e8:	f3bf 8f4f 	dsb	sy
}
 80013ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ee:	f3bf 8f6f 	isb	sy
}
 80013f2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001408:	f3bf 8f4f 	dsb	sy
}
 800140c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800140e:	f3bf 8f6f 	isb	sy
}
 8001412:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <SCB_InvalidateICache+0x30>)
 8001416:	2200      	movs	r2, #0
 8001418:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141c:	f3bf 8f4f 	dsb	sy
}
 8001420:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001422:	f3bf 8f6f 	isb	sy
}
 8001426:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SCB_EnableDCache+0x84>)
 8001440:	2200      	movs	r2, #0
 8001442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001446:	f3bf 8f4f 	dsb	sy
}
 800144a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <SCB_EnableDCache+0x84>)
 800144e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001452:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0b5b      	lsrs	r3, r3, #13
 8001458:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800145c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001466:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001470:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001476:	4911      	ldr	r1, [pc, #68]	; (80014bc <SCB_EnableDCache+0x84>)
 8001478:	4313      	orrs	r3, r2
 800147a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ef      	bne.n	8001468 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e5a      	subs	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e5      	bne.n	800145e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001492:	f3bf 8f4f 	dsb	sy
}
 8001496:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <SCB_EnableDCache+0x84>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <SCB_EnableDCache+0x84>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014a4:	f3bf 8f4f 	dsb	sy
}
 80014a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014aa:	f3bf 8f6f 	isb	sy
}
 80014ae:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <SCB_InvalidateDCache+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014ce:	f3bf 8f4f 	dsb	sy
}
 80014d2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <SCB_InvalidateDCache+0x74>)
 80014d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014da:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	0b5b      	lsrs	r3, r3, #13
 80014e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014e4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ee:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	015a      	lsls	r2, r3, #5
 80014f4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014f8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <SCB_InvalidateDCache+0x74>)
 8001500:	4313      	orrs	r3, r2
 8001502:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	60ba      	str	r2, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ef      	bne.n	80014f0 <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	60fa      	str	r2, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1e5      	bne.n	80014e6 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800151a:	f3bf 8f4f 	dsb	sy
}
 800151e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001520:	f3bf 8f6f 	isb	sy
}
 8001524:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// this disables both I and D cache when tricky debugging
	// (but keep in mind caching approximately divides the audio processing time by 4)
	SCB_InvalidateDCache();
 800153e:	f7ff ffbf 	bl	80014c0 <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001542:	f7ff ff5f 	bl	8001404 <SCB_InvalidateICache>
	//SCB_EnableDCache();

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001546:	f004 fd4a 	bl	8005fde <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800154a:	f000 f873 	bl	8001634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800154e:	f001 f8d1 	bl	80026f4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001552:	f001 f80d 	bl	8002570 <MX_DMA_Init>
	MX_ADC3_Init();
 8001556:	f000 f92d 	bl	80017b4 <MX_ADC3_Init>
	MX_CRC_Init();
 800155a:	f000 f97d 	bl	8001858 <MX_CRC_Init>
	MX_DCMI_Init();
 800155e:	f000 f99d 	bl	800189c <MX_DCMI_Init>
	MX_DMA2D_Init();
 8001562:	f000 f9cf 	bl	8001904 <MX_DMA2D_Init>
	MX_FMC_Init();
 8001566:	f001 f871 	bl	800264c <MX_FMC_Init>
	MX_I2C1_Init();
 800156a:	f000 f9fd 	bl	8001968 <MX_I2C1_Init>
	MX_I2C3_Init();
 800156e:	f000 fa3b 	bl	80019e8 <MX_I2C3_Init>
	MX_LTDC_Init();
 8001572:	f000 fa79 	bl	8001a68 <MX_LTDC_Init>
	MX_QUADSPI_Init();
 8001576:	f000 fafb 	bl	8001b70 <MX_QUADSPI_Init>
	MX_RTC_Init();
 800157a:	f000 fb3b 	bl	8001bf4 <MX_RTC_Init>
	MX_SAI2_Init();
 800157e:	f000 fbdf 	bl	8001d40 <MX_SAI2_Init>
	MX_SDMMC1_SD_Init();
 8001582:	f000 fc99 	bl	8001eb8 <MX_SDMMC1_SD_Init>
	MX_SPDIFRX_Init();
 8001586:	f000 fcb7 	bl	8001ef8 <MX_SPDIFRX_Init>
	MX_TIM1_Init();
 800158a:	f000 fce5 	bl	8001f58 <MX_TIM1_Init>
	MX_TIM2_Init();
 800158e:	f000 fd8f 	bl	80020b0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001592:	f000 fe03 	bl	800219c <MX_TIM3_Init>
	MX_TIM5_Init();
 8001596:	f000 fe79 	bl	800228c <MX_TIM5_Init>
	MX_TIM8_Init();
 800159a:	f000 feef 	bl	800237c <MX_TIM8_Init>
	MX_TIM12_Init();
 800159e:	f000 ff41 	bl	8002424 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 80015a2:	f000 ff85 	bl	80024b0 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80015a6:	f000 ffb3 	bl	8002510 <MX_USART6_UART_Init>
	MX_FATFS_Init();
 80015aa:	f011 fb23 	bl	8012bf4 <MX_FATFS_Init>
	MX_LIBJPEG_Init();
 80015ae:	f011 fd71 	bl	8013094 <MX_LIBJPEG_Init>
	/* USER CODE BEGIN 2 */

	MPU_Init();
 80015b2:	f003 fbfe 	bl	8004db2 <MPU_Init>

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 80015b6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80015ba:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015be:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 80015c0:	f003 fbde 	bl	8004d80 <TS_Init>
	printf("Touchscreen Init: OK\n");
 80015c4:	4816      	ldr	r0, [pc, #88]	; (8001620 <main+0xe8>)
 80015c6:	f018 fa2d 	bl	8019a24 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 80015ca:	f7ff fef5 	bl	80013b8 <SCB_EnableICache>
	SCB_EnableDCache();
 80015ce:	f7ff ff33 	bl	8001438 <SCB_EnableDCache>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <main+0xec>)
 80015d4:	f107 041c 	add.w	r4, r7, #28
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f013 ff53 	bl	8015498 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <main+0xf0>)
 80015f6:	6013      	str	r3, [r2, #0]

	/* definition and creation of uiTask */
	osThreadDef(uiTask, startUITask, osPriorityLow, 0, 1024); // 128 = stack size
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <main+0xf4>)
 80015fa:	463c      	mov	r4, r7
 80015fc:	461d      	mov	r5, r3
 80015fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 800160a:	463b      	mov	r3, r7
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f013 ff42 	bl	8015498 <osThreadCreate>
 8001614:	4603      	mov	r3, r0
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <main+0xf8>)
 8001618:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800161a:	f013 ff1a 	bl	8015452 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800161e:	e7fe      	b.n	800161e <main+0xe6>
 8001620:	0801ada0 	.word	0x0801ada0
 8001624:	0801adb8 	.word	0x0801adb8
 8001628:	2000b994 	.word	0x2000b994
 800162c:	0801add4 	.word	0x0801add4
 8001630:	2000bd60 	.word	0x2000bd60

08001634 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0b4      	sub	sp, #208	; 0xd0
 8001638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f018 f8a0 	bl	8019788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2284      	movs	r2, #132	; 0x84
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f018 f891 	bl	8019788 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001666:	f009 fc15 	bl	800ae94 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <SystemClock_Config+0x174>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <SystemClock_Config+0x174>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <SystemClock_Config+0x174>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001682:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <SystemClock_Config+0x178>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a49      	ldr	r2, [pc, #292]	; (80017ac <SystemClock_Config+0x178>)
 8001688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <SystemClock_Config+0x178>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800169a:	2309      	movs	r3, #9
 800169c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 80016bc:	2319      	movs	r3, #25
 80016be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 80016c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80016c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80016d0:	2309      	movs	r3, #9
 80016d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016da:	4618      	mov	r0, r3
 80016dc:	f00a fbfe 	bl	800bedc <HAL_RCC_OscConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80016e6:	f001 fa8b 	bl	8002c00 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016ea:	f009 fbe3 	bl	800aeb4 <HAL_PWREx_EnableOverDrive>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80016f4:	f001 fa84 	bl	8002c00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800170a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800170e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800171a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800171e:	2106      	movs	r1, #6
 8001720:	4618      	mov	r0, r3
 8001722:	f00a fe7f 	bl	800c424 <HAL_RCC_ClockConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0xfc>
	{
		Error_Handler();
 800172c:	f001 fa68 	bl	8002c00 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <SystemClock_Config+0x17c>)
 8001732:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
			|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001738:	2302      	movs	r3, #2
 800173a:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800173c:	2302      	movs	r3, #2
 800173e:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001744:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001748:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800174a:	2305      	movs	r3, #5
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 800174e:	2308      	movs	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001752:	2303      	movs	r3, #3
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001756:	2301      	movs	r3, #1
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800175e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800176a:	2300      	movs	r3, #0
 800176c:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800176e:	2300      	movs	r3, #0
 8001770:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001772:	2300      	movs	r3, #0
 8001774:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001776:	2300      	movs	r3, #0
 8001778:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800177a:	2300      	movs	r3, #0
 800177c:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800177e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f00b f84f 	bl	800c834 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x16c>
	{
		Error_Handler();
 800179c:	f001 fa30 	bl	8002c00 <Error_Handler>
	}
}
 80017a0:	bf00      	nop
 80017a2:	37d0      	adds	r7, #208	; 0xd0
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000
 80017b0:	01b14868 	.word	0x01b14868

080017b4 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_ADC3_Init+0x98>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <MX_ADC3_Init+0x9c>)
 80017ca:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_ADC3_Init+0x98>)
 80017ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017d2:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_ADC3_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_ADC3_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_ADC3_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_ADC3_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_ADC3_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_ADC3_Init+0x98>)
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <MX_ADC3_Init+0xa0>)
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_ADC3_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_ADC3_Init+0x98>)
 8001802:	2201      	movs	r2, #1
 8001804:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_ADC3_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_ADC3_Init+0x98>)
 8001810:	2201      	movs	r2, #1
 8001812:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_ADC3_Init+0x98>)
 8001816:	f004 fc33 	bl	8006080 <HAL_ADC_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8001820:	f001 f9ee 	bl	8002c00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001824:	2304      	movs	r3, #4
 8001826:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001828:	2301      	movs	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_ADC3_Init+0x98>)
 8001836:	f004 fc67 	bl	8006108 <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001840:	f001 f9de 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000be58 	.word	0x2000be58
 8001850:	40012200 	.word	0x40012200
 8001854:	0f000001 	.word	0x0f000001

08001858 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <MX_CRC_Init+0x3c>)
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <MX_CRC_Init+0x40>)
 8001860:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_CRC_Init+0x3c>)
 8001864:	2200      	movs	r2, #0
 8001866:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <MX_CRC_Init+0x3c>)
 800186a:	2200      	movs	r2, #0
 800186c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_CRC_Init+0x3c>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <MX_CRC_Init+0x3c>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_CRC_Init+0x3c>)
 800187c:	2201      	movs	r2, #1
 800187e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_CRC_Init+0x3c>)
 8001882:	f005 f815 	bl	80068b0 <HAL_CRC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 800188c:	f001 f9b8 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000bc0c 	.word	0x2000bc0c
 8001898:	40023000 	.word	0x40023000

0800189c <MX_DCMI_Init>:
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_DCMI_Init+0x60>)
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <MX_DCMI_Init+0x64>)
 80018a4:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_DCMI_Init+0x60>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_DCMI_Init+0x60>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_DCMI_Init+0x60>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_DCMI_Init+0x60>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_DCMI_Init+0x60>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <MX_DCMI_Init+0x60>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_DCMI_Init+0x60>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <MX_DCMI_Init+0x60>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_DCMI_Init+0x60>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_DCMI_Init+0x60>)
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_DCMI_Init+0x60>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_DCMI_Init+0x60>)
 80018ea:	f005 f8cb 	bl	8006a84 <HAL_DCMI_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_DCMI_Init+0x5c>
	{
		Error_Handler();
 80018f4:	f001 f984 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000bea0 	.word	0x2000bea0
 8001900:	50050000 	.word	0x50050000

08001904 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <MX_DMA2D_Init+0x60>)
 800190c:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800192e:	2200      	movs	r2, #0
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001934:	2200      	movs	r2, #0
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800193a:	f005 fe03 	bl	8007544 <HAL_DMA2D_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8001944:	f001 f95c 	bl	8002c00 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001948:	2101      	movs	r1, #1
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800194c:	f006 f868 	bl	8007a20 <HAL_DMA2D_ConfigLayer>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8001956:	f001 f953 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000c0c4 	.word	0x2000c0c4
 8001964:	4002b000 	.word	0x4002b000

08001968 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_I2C1_Init+0x74>)
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <MX_I2C1_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_I2C1_Init+0x74>)
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <MX_I2C1_Init+0x7c>)
 8001976:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_I2C1_Init+0x74>)
 8001980:	2201      	movs	r2, #1
 8001982:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_I2C1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_I2C1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_I2C1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_I2C1_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <MX_I2C1_Init+0x74>)
 80019a4:	f008 f9f6 	bl	8009d94 <HAL_I2C_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80019ae:	f001 f927 	bl	8002c00 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4809      	ldr	r0, [pc, #36]	; (80019dc <MX_I2C1_Init+0x74>)
 80019b6:	f008 fef7 	bl	800a7a8 <HAL_I2CEx_ConfigAnalogFilter>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80019c0:	f001 f91e 	bl	8002c00 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_I2C1_Init+0x74>)
 80019c8:	f008 ff39 	bl	800a83e <HAL_I2CEx_ConfigDigitalFilter>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80019d2:	f001 f915 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000bbc0 	.word	0x2000bbc0
 80019e0:	40005400 	.word	0x40005400
 80019e4:	00c0eaff 	.word	0x00c0eaff

080019e8 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_I2C3_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <MX_I2C3_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_I2C3_Init+0x74>)
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <MX_I2C3_Init+0x7c>)
 80019f6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_I2C3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a24:	f008 f9b6 	bl	8009d94 <HAL_I2C_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001a2e:	f001 f8e7 	bl	8002c00 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a36:	f008 feb7 	bl	800a7a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001a40:	f001 f8de 	bl	8002c00 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a48:	f008 fef9 	bl	800a83e <HAL_I2CEx_ConfigDigitalFilter>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8001a52:	f001 f8d5 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000b998 	.word	0x2000b998
 8001a60:	40005c00 	.word	0x40005c00
 8001a64:	00c0eaff 	.word	0x00c0eaff

08001a68 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2234      	movs	r2, #52	; 0x34
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f017 fe87 	bl	8019788 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001a7c:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <MX_LTDC_Init+0x104>)
 8001a7e:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a92:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001a9a:	2228      	movs	r2, #40	; 0x28
 8001a9c:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001a9e:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001aa0:	2209      	movs	r2, #9
 8001aa2:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001aa6:	2235      	movs	r2, #53	; 0x35
 8001aa8:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001aac:	220b      	movs	r2, #11
 8001aae:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001ab2:	f240 2215 	movw	r2, #533	; 0x215
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001aba:	f240 121b 	movw	r2, #283	; 0x11b
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001ac2:	f240 2235 	movw	r2, #565	; 0x235
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001aca:	f240 121d 	movw	r2, #285	; 0x11d
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ae8:	481f      	ldr	r0, [pc, #124]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001aea:	f008 fef5 	bl	800a8d8 <HAL_LTDC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8001af4:	f001 f884 	bl	8002c00 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001afc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b00:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001b06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b0a:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001b10:	23ff      	movs	r3, #255	; 0xff
 8001b12:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b1c:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001b22:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001b28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001b2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4806      	ldr	r0, [pc, #24]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001b4e:	f008 ff93 	bl	800aa78 <HAL_LTDC_ConfigLayer>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8001b58:	f001 f852 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8001b5c:	f002 fbe2 	bl	8004324 <LCD_Init>

	/* USER CODE END LTDC_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3738      	adds	r7, #56	; 0x38
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000bdb0 	.word	0x2000bdb0
 8001b6c:	40016800 	.word	0x40016800

08001b70 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <MX_QUADSPI_Init+0x80>)
 8001b78:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 1;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 4;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001b88:	2210      	movs	r2, #16
 8001b8a:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 24;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001b8e:	2218      	movs	r2, #24
 8001b90:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001b94:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001b98:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001bac:	480f      	ldr	r0, [pc, #60]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001bae:	f009 f9d1 	bl	800af54 <HAL_QSPI_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_QUADSPI_Init+0x4c>
	{
		Error_Handler();
 8001bb8:	f001 f822 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001bbe:	f002 feb3 	bl	8004928 <DISCO_QSPI_ResetMemory>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_QUADSPI_Init+0x5c>
 8001bc8:	f001 f81a 	bl	8002c00 <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <MX_QUADSPI_Init+0x7c>)
 8001bce:	f002 feed 	bl	80049ac <DISCO_QSPI_DummyCyclesCfg>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_QUADSPI_Init+0x6c>
 8001bd8:	f001 f812 	bl	8002c00 <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8001bdc:	f002 fe72 	bl	80048c4 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001be0:	205c      	movs	r0, #92	; 0x5c
 8001be2:	f004 fddb 	bl	800679c <HAL_NVIC_DisableIRQ>


	/* USER CODE END QUADSPI_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000c1d0 	.word	0x2000c1d0
 8001bf0:	a0001000 	.word	0xa0001000

08001bf4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b092      	sub	sp, #72	; 0x48
 8001bf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = {0};
 8001c10:	463b      	mov	r3, r7
 8001c12:	222c      	movs	r2, #44	; 0x2c
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f017 fdb6 	bl	8019788 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c1e:	4a47      	ldr	r2, [pc, #284]	; (8001d3c <MX_RTC_Init+0x148>)
 8001c20:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c22:	4b45      	ldr	r3, [pc, #276]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c2a:	227f      	movs	r2, #127	; 0x7f
 8001c2c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001c2e:	4b42      	ldr	r3, [pc, #264]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c30:	22ff      	movs	r2, #255	; 0xff
 8001c32:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c34:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c40:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c46:	483c      	ldr	r0, [pc, #240]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c48:	f00b fb28 	bl	800d29c <HAL_RTC_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_RTC_Init+0x62>
	{
		Error_Handler();
 8001c52:	f000 ffd5 	bl	8002c00 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	482f      	ldr	r0, [pc, #188]	; (8001d38 <MX_RTC_Init+0x144>)
 8001c7a:	f00b fba1 	bl	800d3c0 <HAL_RTC_SetTime>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_RTC_Init+0x94>
	{
		Error_Handler();
 8001c84:	f000 ffbc 	bl	8002c00 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4823      	ldr	r0, [pc, #140]	; (8001d38 <MX_RTC_Init+0x144>)
 8001caa:	f00b fc47 	bl	800d53c <HAL_RTC_SetDate>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_RTC_Init+0xc4>
	{
		Error_Handler();
 8001cb4:	f000 ffa4 	bl	8002c00 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2201      	movs	r2, #1
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <MX_RTC_Init+0x144>)
 8001cf0:	f00b fccc 	bl	800d68c <HAL_RTC_SetAlarm>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_RTC_Init+0x10a>
	{
		Error_Handler();
 8001cfa:	f000 ff81 	bl	8002c00 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 8001cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d04:	463b      	mov	r3, r7
 8001d06:	2201      	movs	r2, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <MX_RTC_Init+0x144>)
 8001d0c:	f00b fcbe 	bl	800d68c <HAL_RTC_SetAlarm>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_RTC_Init+0x126>
	{
		Error_Handler();
 8001d16:	f000 ff73 	bl	8002c00 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_RTC_Init+0x144>)
 8001d20:	f00b fe3e 	bl	800d9a0 <HAL_RTCEx_SetTimeStamp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_RTC_Init+0x13a>
	{
		Error_Handler();
 8001d2a:	f000 ff69 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	3748      	adds	r7, #72	; 0x48
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000bf74 	.word	0x2000bf74
 8001d3c:	40002800 	.word	0x40002800

08001d40 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001d44:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d46:	4a59      	ldr	r2, [pc, #356]	; (8001eac <MX_SAI2_Init+0x16c>)
 8001d48:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d4a:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d50:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8001d56:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d5c:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001d62:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d68:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d74:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d76:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K; // SAI_AUDIO_FREQUENCY_48K;
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d84:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001d88:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d8a:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d90:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d9c:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001da4:	2240      	movs	r2, #64	; 0x40
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001daa:	2220      	movs	r2, #32
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001db0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001db4:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001dbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dc2:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001dd8:	2205      	movs	r2, #5
 8001dda:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001ddc:	4832      	ldr	r0, [pc, #200]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001dde:	f00b fe35 	bl	800da4c <HAL_SAI_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8001de8:	f000 ff0a 	bl	8002c00 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <MX_SAI2_Init+0x174>)
 8001df0:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001df2:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e22:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e3c:	2240      	movs	r2, #64	; 0x40
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e42:	2220      	movs	r2, #32
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e4c:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e70:	220a      	movs	r2, #10
 8001e72:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e74:	480e      	ldr	r0, [pc, #56]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e76:	f00b fde9 	bl	800da4c <HAL_SAI_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8001e80:	f000 febe 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <MX_SAI2_Init+0x168>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e92:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <MX_SAI2_Init+0x170>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ea2:	601a      	str	r2, [r3, #0]

	/* USER CODE END SAI2_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000bb3c 	.word	0x2000bb3c
 8001eac:	40015c04 	.word	0x40015c04
 8001eb0:	2000b910 	.word	0x2000b910
 8001eb4:	40015c24 	.word	0x40015c24

08001eb8 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_SDMMC1_SD_Init+0x38>)
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <MX_SDMMC1_SD_Init+0x3c>)
 8001ec0:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_SDMMC1_SD_Init+0x38>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_SDMMC1_SD_Init+0x38>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_SDMMC1_SD_Init+0x38>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_SDMMC1_SD_Init+0x38>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <MX_SDMMC1_SD_Init+0x38>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <MX_SDMMC1_SD_Init+0x38>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	2000bc90 	.word	0x2000bc90
 8001ef4:	40012c00 	.word	0x40012c00

08001ef8 <MX_SPDIFRX_Init>:
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	/* USER CODE END SPDIFRX_Init 0 */

	/* USER CODE BEGIN SPDIFRX_Init 1 */

	/* USER CODE END SPDIFRX_Init 1 */
	hspdif.Instance = SPDIFRX;
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001efe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f02:	601a      	str	r2, [r3, #0]
	hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
	hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
	hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
	hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
	hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
	hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
	hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
	hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
	hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
	hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	; (8001f54 <MX_SPDIFRX_Init+0x5c>)
 8001f42:	f00d fa79 	bl	800f438 <HAL_SPDIFRX_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_SPDIFRX_Init+0x58>
	{
		Error_Handler();
 8001f4c:	f000 fe58 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN SPDIFRX_Init 2 */

	/* USER CODE END SPDIFRX_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000baf0 	.word	0x2000baf0

08001f58 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b09a      	sub	sp, #104	; 0x68
 8001f5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	222c      	movs	r2, #44	; 0x2c
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f017 fbf8 	bl	8019788 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001f9a:	4a44      	ldr	r2, [pc, #272]	; (80020ac <MX_TIM1_Init+0x154>)
 8001f9c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001f9e:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fc4:	4838      	ldr	r0, [pc, #224]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fc6:	f00d fa93 	bl	800f4f0 <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001fd0:	f000 fe16 	bl	8002c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4831      	ldr	r0, [pc, #196]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001fe2:	f00d fddb 	bl	800fb9c <HAL_TIM_ConfigClockSource>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8001fec:	f000 fe08 	bl	8002c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ff0:	482d      	ldr	r0, [pc, #180]	; (80020a8 <MX_TIM1_Init+0x150>)
 8001ff2:	f00d fb4d 	bl	800f690 <HAL_TIM_PWM_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8001ffc:	f000 fe00 	bl	8002c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800200c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002010:	4619      	mov	r1, r3
 8002012:	4825      	ldr	r0, [pc, #148]	; (80020a8 <MX_TIM1_Init+0x150>)
 8002014:	f00e fa48 	bl	80104a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 800201e:	f000 fdef 	bl	8002c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	2360      	movs	r3, #96	; 0x60
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800202e:	2300      	movs	r3, #0
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	4818      	ldr	r0, [pc, #96]	; (80020a8 <MX_TIM1_Init+0x150>)
 8002048:	f00d fc98 	bl	800f97c <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8002052:	f000 fdd5 	bl	8002c00 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800206a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <MX_TIM1_Init+0x150>)
 800208c:	f00e fa9a 	bl	80105c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8002096:	f000 fdb3 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800209a:	4803      	ldr	r0, [pc, #12]	; (80020a8 <MX_TIM1_Init+0x150>)
 800209c:	f001 fad2 	bl	8003644 <HAL_TIM_MspPostInit>

}
 80020a0:	bf00      	nop
 80020a2:	3768      	adds	r7, #104	; 0x68
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000bf94 	.word	0x2000bf94
 80020ac:	40010000 	.word	0x40010000

080020b0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80020d0:	463b      	mov	r3, r7
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	615a      	str	r2, [r3, #20]
 80020e0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <MX_TIM2_Init+0xe8>)
 80020e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <MX_TIM2_Init+0xe8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <MX_TIM2_Init+0xe8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <MX_TIM2_Init+0xe8>)
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <MX_TIM2_Init+0xe8>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <MX_TIM2_Init+0xe8>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800210a:	4823      	ldr	r0, [pc, #140]	; (8002198 <MX_TIM2_Init+0xe8>)
 800210c:	f00d f9f0 	bl	800f4f0 <HAL_TIM_Base_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8002116:	f000 fd73 	bl	8002c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002124:	4619      	mov	r1, r3
 8002126:	481c      	ldr	r0, [pc, #112]	; (8002198 <MX_TIM2_Init+0xe8>)
 8002128:	f00d fd38 	bl	800fb9c <HAL_TIM_ConfigClockSource>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8002132:	f000 fd65 	bl	8002c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002136:	4818      	ldr	r0, [pc, #96]	; (8002198 <MX_TIM2_Init+0xe8>)
 8002138:	f00d faaa 	bl	800f690 <HAL_TIM_PWM_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8002142:	f000 fd5d 	bl	8002c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4810      	ldr	r0, [pc, #64]	; (8002198 <MX_TIM2_Init+0xe8>)
 8002156:	f00e f9a7 	bl	80104a8 <HAL_TIMEx_MasterConfigSynchronization>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8002160:	f000 fd4e 	bl	8002c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002164:	2360      	movs	r3, #96	; 0x60
 8002166:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002174:	463b      	mov	r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	4619      	mov	r1, r3
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <MX_TIM2_Init+0xe8>)
 800217c:	f00d fbfe 	bl	800f97c <HAL_TIM_PWM_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8002186:	f000 fd3b 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <MX_TIM2_Init+0xe8>)
 800218c:	f001 fa5a 	bl	8003644 <HAL_TIM_MspPostInit>

}
 8002190:	bf00      	nop
 8002192:	3738      	adds	r7, #56	; 0x38
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000c104 	.word	0x2000c104

0800219c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	; 0x38
 80021a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80021bc:	463b      	mov	r3, r7
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <MX_TIM3_Init+0xe8>)
 80021d0:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <MX_TIM3_Init+0xec>)
 80021d2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <MX_TIM3_Init+0xe8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <MX_TIM3_Init+0xe8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <MX_TIM3_Init+0xe8>)
 80021e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <MX_TIM3_Init+0xe8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b25      	ldr	r3, [pc, #148]	; (8002284 <MX_TIM3_Init+0xe8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021f4:	4823      	ldr	r0, [pc, #140]	; (8002284 <MX_TIM3_Init+0xe8>)
 80021f6:	f00d f97b 	bl	800f4f0 <HAL_TIM_Base_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8002200:	f000 fcfe 	bl	8002c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800220a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220e:	4619      	mov	r1, r3
 8002210:	481c      	ldr	r0, [pc, #112]	; (8002284 <MX_TIM3_Init+0xe8>)
 8002212:	f00d fcc3 	bl	800fb9c <HAL_TIM_ConfigClockSource>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 800221c:	f000 fcf0 	bl	8002c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002220:	4818      	ldr	r0, [pc, #96]	; (8002284 <MX_TIM3_Init+0xe8>)
 8002222:	f00d fa35 	bl	800f690 <HAL_TIM_PWM_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 800222c:	f000 fce8 	bl	8002c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <MX_TIM3_Init+0xe8>)
 8002240:	f00e f932 	bl	80104a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800224a:	f000 fcd9 	bl	8002c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224e:	2360      	movs	r3, #96	; 0x60
 8002250:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225e:	463b      	mov	r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <MX_TIM3_Init+0xe8>)
 8002266:	f00d fb89 	bl	800f97c <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8002270:	f000 fcc6 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <MX_TIM3_Init+0xe8>)
 8002276:	f001 f9e5 	bl	8003644 <HAL_TIM_MspPostInit>

}
 800227a:	bf00      	nop
 800227c:	3738      	adds	r7, #56	; 0x38
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000bd64 	.word	0x2000bd64
 8002288:	40000400 	.word	0x40000400

0800228c <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022c0:	4a2d      	ldr	r2, [pc, #180]	; (8002378 <MX_TIM5_Init+0xec>)
 80022c2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022d2:	f04f 32ff 	mov.w	r2, #4294967295
 80022d6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d8:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022e4:	4823      	ldr	r0, [pc, #140]	; (8002374 <MX_TIM5_Init+0xe8>)
 80022e6:	f00d f903 	bl	800f4f0 <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 80022f0:	f000 fc86 	bl	8002c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fe:	4619      	mov	r1, r3
 8002300:	481c      	ldr	r0, [pc, #112]	; (8002374 <MX_TIM5_Init+0xe8>)
 8002302:	f00d fc4b 	bl	800fb9c <HAL_TIM_ConfigClockSource>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 800230c:	f000 fc78 	bl	8002c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <MX_TIM5_Init+0xe8>)
 8002312:	f00d f9bd 	bl	800f690 <HAL_TIM_PWM_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 800231c:	f000 fc70 	bl	8002c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <MX_TIM5_Init+0xe8>)
 8002330:	f00e f8ba 	bl	80104a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 800233a:	f000 fc61 	bl	8002c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	220c      	movs	r2, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM5_Init+0xe8>)
 8002356:	f00d fb11 	bl	800f97c <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8002360:	f000 fc4e 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM5_Init+0xe8>)
 8002366:	f001 f96d 	bl	8003644 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3738      	adds	r7, #56	; 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000bd14 	.word	0x2000bd14
 8002378:	40000c00 	.word	0x40000c00

0800237c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <MX_TIM8_Init+0xa0>)
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <MX_TIM8_Init+0xa4>)
 800239e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_TIM8_Init+0xa0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM8_Init+0xa0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_TIM8_Init+0xa0>)
 80023ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_TIM8_Init+0xa0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_TIM8_Init+0xa0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_TIM8_Init+0xa0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80023c6:	4815      	ldr	r0, [pc, #84]	; (800241c <MX_TIM8_Init+0xa0>)
 80023c8:	f00d f892 	bl	800f4f0 <HAL_TIM_Base_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM8_Init+0x5a>
	{
		Error_Handler();
 80023d2:	f000 fc15 	bl	8002c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023da:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4619      	mov	r1, r3
 80023e2:	480e      	ldr	r0, [pc, #56]	; (800241c <MX_TIM8_Init+0xa0>)
 80023e4:	f00d fbda 	bl	800fb9c <HAL_TIM_ConfigClockSource>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM8_Init+0x76>
	{
		Error_Handler();
 80023ee:	f000 fc07 	bl	8002c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <MX_TIM8_Init+0xa0>)
 8002404:	f00e f850 	bl	80104a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 800240e:	f000 fbf7 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000ba44 	.word	0x2000ba44
 8002420:	40010400 	.word	0x40010400

08002424 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
 8002438:	615a      	str	r2, [r3, #20]
 800243a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <MX_TIM12_Init+0x84>)
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <MX_TIM12_Init+0x88>)
 8002440:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <MX_TIM12_Init+0x84>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MX_TIM12_Init+0x84>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <MX_TIM12_Init+0x84>)
 8002450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002454:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_TIM12_Init+0x84>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <MX_TIM12_Init+0x84>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002462:	4811      	ldr	r0, [pc, #68]	; (80024a8 <MX_TIM12_Init+0x84>)
 8002464:	f00d f914 	bl	800f690 <HAL_TIM_PWM_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM12_Init+0x4e>
	{
		Error_Handler();
 800246e:	f000 fbc7 	bl	8002c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002472:	2360      	movs	r3, #96	; 0x60
 8002474:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	2200      	movs	r2, #0
 8002486:	4619      	mov	r1, r3
 8002488:	4807      	ldr	r0, [pc, #28]	; (80024a8 <MX_TIM12_Init+0x84>)
 800248a:	f00d fa77 	bl	800f97c <HAL_TIM_PWM_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM12_Init+0x74>
	{
		Error_Handler();
 8002494:	f000 fbb4 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <MX_TIM12_Init+0x84>)
 800249a:	f001 f8d3 	bl	8003644 <HAL_TIM_MspPostInit>

}
 800249e:	bf00      	nop
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000c150 	.word	0x2000c150
 80024ac:	40001800 	.word	0x40001800

080024b0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <MX_USART1_UART_Init+0x5c>)
 80024b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_USART1_UART_Init+0x58>)
 80024f4:	f00e f902 	bl	80106fc <HAL_UART_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80024fe:	f000 fb7f 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000bef0 	.word	0x2000bef0
 800250c:	40011000 	.word	0x40011000

08002510 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_USART6_UART_Init+0x58>)
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <MX_USART6_UART_Init+0x5c>)
 8002518:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <MX_USART6_UART_Init+0x58>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_USART6_UART_Init+0x58>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_USART6_UART_Init+0x58>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_USART6_UART_Init+0x58>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_USART6_UART_Init+0x58>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_USART6_UART_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_USART6_UART_Init+0x58>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <MX_USART6_UART_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_USART6_UART_Init+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_USART6_UART_Init+0x58>)
 8002554:	f00e f8d2 	bl	80106fc <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 800255e:	f000 fb4f 	bl	8002c00 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000c040 	.word	0x2000c040
 800256c:	40011400 	.word	0x40011400

08002570 <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <MX_DMA_Init+0xd0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a31      	ldr	r2, [pc, #196]	; (8002640 <MX_DMA_Init+0xd0>)
 800257c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <MX_DMA_Init+0xd0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800258e:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <MX_DMA_Init+0xd4>)
 8002590:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <MX_DMA_Init+0xd8>)
 8002592:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002594:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <MX_DMA_Init+0xd4>)
 8002596:	2200      	movs	r2, #0
 8002598:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <MX_DMA_Init+0xd4>)
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <MX_DMA_Init+0xd4>)
 80025a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a6:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <MX_DMA_Init+0xd4>)
 80025aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ae:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <MX_DMA_Init+0xd4>)
 80025b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b6:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <MX_DMA_Init+0xd4>)
 80025ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025be:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <MX_DMA_Init+0xd4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <MX_DMA_Init+0xd4>)
 80025c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025cc:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_DMA_Init+0xd4>)
 80025d0:	2204      	movs	r2, #4
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_DMA_Init+0xd4>)
 80025d6:	2203      	movs	r2, #3
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_DMA_Init+0xd4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_DMA_Init+0xd4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80025e6:	4817      	ldr	r0, [pc, #92]	; (8002644 <MX_DMA_Init+0xd4>)
 80025e8:	f004 fb96 	bl	8006d18 <HAL_DMA_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_DMA_Init+0x86>
	{
		Error_Handler( );
 80025f2:	f000 fb05 	bl	8002c00 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2105      	movs	r1, #5
 80025fa:	2038      	movs	r0, #56	; 0x38
 80025fc:	f004 f8a4 	bl	8006748 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002600:	2038      	movs	r0, #56	; 0x38
 8002602:	f004 f8bd 	bl	8006780 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2105      	movs	r1, #5
 800260a:	2039      	movs	r0, #57	; 0x39
 800260c:	f004 f89c 	bl	8006748 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002610:	2039      	movs	r0, #57	; 0x39
 8002612:	f004 f8b5 	bl	8006780 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2105      	movs	r1, #5
 800261a:	203c      	movs	r0, #60	; 0x3c
 800261c:	f004 f894 	bl	8006748 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002620:	203c      	movs	r0, #60	; 0x3c
 8002622:	f004 f8ad 	bl	8006780 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2105      	movs	r1, #5
 800262a:	2046      	movs	r0, #70	; 0x46
 800262c:	f004 f88c 	bl	8006748 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002630:	2046      	movs	r0, #70	; 0x46
 8002632:	f004 f8a5 	bl	8006780 <HAL_NVIC_EnableIRQ>

}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	2000b9e4 	.word	0x2000b9e4
 8002648:	40026410 	.word	0x40026410

0800264c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
 8002660:	615a      	str	r2, [r3, #20]
 8002662:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <MX_FMC_Init+0xa0>)
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <MX_FMC_Init+0xa4>)
 8002668:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <MX_FMC_Init+0xa0>)
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <MX_FMC_Init+0xa0>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <MX_FMC_Init+0xa0>)
 8002678:	2204      	movs	r2, #4
 800267a:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <MX_FMC_Init+0xa0>)
 800267e:	2210      	movs	r2, #16
 8002680:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <MX_FMC_Init+0xa0>)
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_FMC_Init+0xa0>)
 800268a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268e:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <MX_FMC_Init+0xa0>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_FMC_Init+0xa0>)
 8002698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800269c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <MX_FMC_Init+0xa0>)
 80026a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <MX_FMC_Init+0xa0>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 80026ac:	2302      	movs	r3, #2
 80026ae:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 80026b0:	2307      	movs	r3, #7
 80026b2:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 80026b4:	2304      	movs	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 80026b8:	2307      	movs	r3, #7
 80026ba:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 80026bc:	2303      	movs	r3, #3
 80026be:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <MX_FMC_Init+0xa0>)
 80026ce:	f00c fe34 	bl	800f33a <HAL_SDRAM_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_FMC_Init+0x90>
	{
		Error_Handler( );
 80026d8:	f000 fa92 	bl	8002c00 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80026dc:	f240 6003 	movw	r0, #1539	; 0x603
 80026e0:	f002 faee 	bl	8004cc0 <DISCO_SDRAM_Initialization_sequence>

	/* USER CODE END FMC_Init 2 */
}
 80026e4:	bf00      	nop
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000c19c 	.word	0x2000c19c
 80026f0:	a0000140 	.word	0xa0000140

080026f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b090      	sub	sp, #64	; 0x40
 80026f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800270a:	4baf      	ldr	r3, [pc, #700]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4aae      	ldr	r2, [pc, #696]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002710:	f043 0310 	orr.w	r3, r3, #16
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4bac      	ldr	r3, [pc, #688]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002722:	4ba9      	ldr	r3, [pc, #676]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4aa8      	ldr	r2, [pc, #672]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4ba6      	ldr	r3, [pc, #664]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	4ba3      	ldr	r3, [pc, #652]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4aa2      	ldr	r2, [pc, #648]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4ba0      	ldr	r3, [pc, #640]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002752:	4b9d      	ldr	r3, [pc, #628]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a9c      	ldr	r2, [pc, #624]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b9a      	ldr	r3, [pc, #616]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4b97      	ldr	r3, [pc, #604]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a96      	ldr	r2, [pc, #600]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b94      	ldr	r3, [pc, #592]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	4b91      	ldr	r3, [pc, #580]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a90      	ldr	r2, [pc, #576]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b8e      	ldr	r3, [pc, #568]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800279a:	4b8b      	ldr	r3, [pc, #556]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a8a      	ldr	r2, [pc, #552]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80027b2:	4b85      	ldr	r3, [pc, #532]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a84      	ldr	r2, [pc, #528]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b82      	ldr	r3, [pc, #520]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 80027ca:	4b7f      	ldr	r3, [pc, #508]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a7e      	ldr	r2, [pc, #504]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b7c      	ldr	r3, [pc, #496]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80027e2:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a78      	ldr	r2, [pc, #480]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027e8:	f043 0320 	orr.w	r3, r3, #32
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80027fa:	4b73      	ldr	r3, [pc, #460]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a72      	ldr	r2, [pc, #456]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b70      	ldr	r3, [pc, #448]	; (80029c8 <MX_GPIO_Init+0x2d4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002812:	2201      	movs	r2, #1
 8002814:	2120      	movs	r1, #32
 8002816:	486d      	ldr	r0, [pc, #436]	; (80029cc <MX_GPIO_Init+0x2d8>)
 8002818:	f005 fd00 	bl	800821c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	210e      	movs	r1, #14
 8002820:	486b      	ldr	r0, [pc, #428]	; (80029d0 <MX_GPIO_Init+0x2dc>)
 8002822:	f005 fcfb 	bl	800821c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002826:	2201      	movs	r2, #1
 8002828:	2108      	movs	r1, #8
 800282a:	486a      	ldr	r0, [pc, #424]	; (80029d4 <MX_GPIO_Init+0x2e0>)
 800282c:	f005 fcf6 	bl	800821c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002830:	2201      	movs	r2, #1
 8002832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002836:	4866      	ldr	r0, [pc, #408]	; (80029d0 <MX_GPIO_Init+0x2dc>)
 8002838:	f005 fcf0 	bl	800821c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002842:	4865      	ldr	r0, [pc, #404]	; (80029d8 <MX_GPIO_Init+0x2e4>)
 8002844:	f005 fcea 	bl	800821c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002848:	2200      	movs	r2, #0
 800284a:	21c8      	movs	r1, #200	; 0xc8
 800284c:	4863      	ldr	r0, [pc, #396]	; (80029dc <MX_GPIO_Init+0x2e8>)
 800284e:	f005 fce5 	bl	800821c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002852:	2308      	movs	r3, #8
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002856:	2300      	movs	r3, #0
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800285e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002862:	4619      	mov	r1, r3
 8002864:	485e      	ldr	r0, [pc, #376]	; (80029e0 <MX_GPIO_Init+0x2ec>)
 8002866:	f005 fa09 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800286a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800287c:	230b      	movs	r3, #11
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002884:	4619      	mov	r1, r3
 8002886:	4855      	ldr	r0, [pc, #340]	; (80029dc <MX_GPIO_Init+0x2e8>)
 8002888:	f005 f9f8 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800288c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800289e:	230a      	movs	r3, #10
 80028a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a6:	4619      	mov	r1, r3
 80028a8:	484e      	ldr	r0, [pc, #312]	; (80029e4 <MX_GPIO_Init+0x2f0>)
 80028aa:	f005 f9e7 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80028ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b4:	2300      	movs	r3, #0
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80028bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c0:	4619      	mov	r1, r3
 80028c2:	4849      	ldr	r0, [pc, #292]	; (80029e8 <MX_GPIO_Init+0x2f4>)
 80028c4:	f005 f9da 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 80028c8:	2340      	movs	r3, #64	; 0x40
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <MX_GPIO_Init+0x2f8>)
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4619      	mov	r1, r3
 80028da:	483c      	ldr	r0, [pc, #240]	; (80029cc <MX_GPIO_Init+0x2d8>)
 80028dc:	f005 f9ce 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80028e0:	2320      	movs	r3, #32
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e4:	2301      	movs	r3, #1
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4835      	ldr	r0, [pc, #212]	; (80029cc <MX_GPIO_Init+0x2d8>)
 80028f8:	f005 f9c0 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 80028fc:	f241 030e 	movw	r3, #4110	; 0x100e
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002902:	2301      	movs	r3, #1
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800290e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002912:	4619      	mov	r1, r3
 8002914:	482e      	ldr	r0, [pc, #184]	; (80029d0 <MX_GPIO_Init+0x2dc>)
 8002916:	f005 f9b1 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800291a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002920:	2300      	movs	r3, #0
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800292c:	4619      	mov	r1, r3
 800292e:	4830      	ldr	r0, [pc, #192]	; (80029f0 <MX_GPIO_Init+0x2fc>)
 8002930:	f005 f9a4 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002934:	2308      	movs	r3, #8
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002938:	2301      	movs	r3, #1
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002948:	4619      	mov	r1, r3
 800294a:	4822      	ldr	r0, [pc, #136]	; (80029d4 <MX_GPIO_Init+0x2e0>)
 800294c:	f005 f996 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002950:	2310      	movs	r3, #16
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800295c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002960:	4619      	mov	r1, r3
 8002962:	481a      	ldr	r0, [pc, #104]	; (80029cc <MX_GPIO_Init+0x2d8>)
 8002964:	f005 f98a 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002968:	f248 0304 	movw	r3, #32772	; 0x8004
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296e:	2300      	movs	r3, #0
 8002970:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297a:	4619      	mov	r1, r3
 800297c:	4816      	ldr	r0, [pc, #88]	; (80029d8 <MX_GPIO_Init+0x2e4>)
 800297e:	f005 f97d 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002988:	2301      	movs	r3, #1
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002998:	4619      	mov	r1, r3
 800299a:	480f      	ldr	r0, [pc, #60]	; (80029d8 <MX_GPIO_Init+0x2e4>)
 800299c:	f005 f96e 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_BTN_Pin */
	GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 80029a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a6:	2300      	movs	r3, #0
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b2:	4619      	mov	r1, r3
 80029b4:	4806      	ldr	r0, [pc, #24]	; (80029d0 <MX_GPIO_Init+0x2dc>)
 80029b6:	f005 f961 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 80029ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_GPIO_Init+0x300>)
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e017      	b.n	80029f8 <MX_GPIO_Init+0x304>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40022800 	.word	0x40022800
 80029d8:	40021c00 	.word	0x40021c00
 80029dc:	40021800 	.word	0x40021800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40022400 	.word	0x40022400
 80029ec:	10120000 	.word	0x10120000
 80029f0:	40020800 	.word	0x40020800
 80029f4:	10110000 	.word	0x10110000
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fe:	4619      	mov	r1, r3
 8002a00:	4844      	ldr	r0, [pc, #272]	; (8002b14 <MX_GPIO_Init+0x420>)
 8002a02:	f005 f93b 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002a06:	2310      	movs	r3, #16
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a16:	230a      	movs	r3, #10
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1e:	4619      	mov	r1, r3
 8002a20:	483d      	ldr	r0, [pc, #244]	; (8002b18 <MX_GPIO_Init+0x424>)
 8002a22:	f005 f92b 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002a26:	23c8      	movs	r3, #200	; 0xc8
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4837      	ldr	r0, [pc, #220]	; (8002b1c <MX_GPIO_Init+0x428>)
 8002a3e:	f005 f91d 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002a42:	2305      	movs	r3, #5
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a52:	230a      	movs	r3, #10
 8002a54:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4830      	ldr	r0, [pc, #192]	; (8002b20 <MX_GPIO_Init+0x42c>)
 8002a5e:	f005 f90d 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a62:	2332      	movs	r3, #50	; 0x32
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a72:	230b      	movs	r3, #11
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4828      	ldr	r0, [pc, #160]	; (8002b20 <MX_GPIO_Init+0x42c>)
 8002a7e:	f005 f8fd 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002a82:	2304      	movs	r3, #4
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a86:	2300      	movs	r3, #0
 8002a88:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a92:	4619      	mov	r1, r3
 8002a94:	4821      	ldr	r0, [pc, #132]	; (8002b1c <MX_GPIO_Init+0x428>)
 8002a96:	f005 f8f1 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a9a:	2386      	movs	r3, #134	; 0x86
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002aaa:	230b      	movs	r3, #11
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	481b      	ldr	r0, [pc, #108]	; (8002b24 <MX_GPIO_Init+0x430>)
 8002ab6:	f005 f8e1 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002aba:	2328      	movs	r3, #40	; 0x28
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002aca:	230a      	movs	r3, #10
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4813      	ldr	r0, [pc, #76]	; (8002b24 <MX_GPIO_Init+0x430>)
 8002ad6:	f005 f8d1 	bl	8007c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ada:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aec:	2305      	movs	r3, #5
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	480c      	ldr	r0, [pc, #48]	; (8002b28 <MX_GPIO_Init+0x434>)
 8002af8:	f005 f8c0 	bl	8007c7c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2105      	movs	r1, #5
 8002b00:	2028      	movs	r0, #40	; 0x28
 8002b02:	f003 fe21 	bl	8006748 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b06:	2028      	movs	r0, #40	; 0x28
 8002b08:	f003 fe3a 	bl	8006780 <HAL_NVIC_EnableIRQ>

}
 8002b0c:	bf00      	nop
 8002b0e:	3740      	adds	r7, #64	; 0x40
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40021800 	.word	0x40021800
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400

08002b2c <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f016 fed9 	bl	80198ec <iprintf>
	printf("\n");
 8002b3a:	200a      	movs	r0, #10
 8002b3c:	f016 feee 	bl	801991c <putchar>
	Error_Handler();
 8002b40:	f000 f85e 	bl	8002c00 <Error_Handler>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6178      	str	r0, [r7, #20]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8002b54:	f015 f9e8 	bl	8017f28 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */

	audioLoop(&defaultTaskHandle,&uiTaskHandle);
 8002b58:	490b      	ldr	r1, [pc, #44]	; (8002b88 <StartDefaultTask+0x3c>)
 8002b5a:	480c      	ldr	r0, [pc, #48]	; (8002b8c <StartDefaultTask+0x40>)
 8002b5c:	f7fe fa74 	bl	8001048 <audioLoop>
	//printf("StartDefaultTask\n");

	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
	for(;;)
	{
		//osDelay(1000);
		//osDelayUntil (&PreviousWakeTime, 500);
		printf("thread alive : %d\n", i++);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	61fa      	str	r2, [r7, #28]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4808      	ldr	r0, [pc, #32]	; (8002b90 <StartDefaultTask+0x44>)
 8002b6e:	f016 febd 	bl	80198ec <iprintf>
		printf("waiting for signal...\n");
 8002b72:	4808      	ldr	r0, [pc, #32]	; (8002b94 <StartDefaultTask+0x48>)
 8002b74:	f016 ff56 	bl	8019a24 <puts>
		osSignalWait (0x0001, osWaitForever);
 8002b78:	463b      	mov	r3, r7
 8002b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f012 fd29 	bl	80155d8 <osSignalWait>
		printf("thread alive : %d\n", i++);
 8002b86:	e7ed      	b.n	8002b64 <StartDefaultTask+0x18>
 8002b88:	2000bd60 	.word	0x2000bd60
 8002b8c:	2000b994 	.word	0x2000b994
 8002b90:	0801adf0 	.word	0x0801adf0
 8002b94:	0801ae04 	.word	0x0801ae04

08002b98 <startUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startUITask */

	osDelay(200);
 8002ba0:	20c8      	movs	r0, #200	; 0xc8
 8002ba2:	f012 fcc5 	bl	8015530 <osDelay>
	printf("StartLedTask\n");
 8002ba6:	480b      	ldr	r0, [pc, #44]	; (8002bd4 <startUITask+0x3c>)
 8002ba8:	f016 ff3c 	bl	8019a24 <puts>
	uiLoop();
 8002bac:	f7fe fa38 	bl	8001020 <uiLoop>
	// PB_GetState() = GPIO_PIN_SET ou GPIO_PIN_RESET

	/* Infinite loop */
	for(;;)
	{
		osDelay(900);
 8002bb0:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002bb4:	f012 fcbc 	bl	8015530 <osDelay>
		LED_Toggle();
 8002bb8:	f001 fab2 	bl	8004120 <LED_Toggle>
		if (PB_GetState() == GPIO_PIN_SET ) osSignalSet(defaultTaskHandle, 0x0001);
 8002bbc:	f001 faba 	bl	8004134 <PB_GetState>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d1f4      	bne.n	8002bb0 <startUITask+0x18>
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <startUITask+0x40>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f012 fcc3 	bl	8015558 <osSignalSet>
		osDelay(900);
 8002bd2:	e7ed      	b.n	8002bb0 <startUITask+0x18>
 8002bd4:	0801ae1c 	.word	0x0801ae1c
 8002bd8:	2000b994 	.word	0x2000b994

08002bdc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002bee:	f003 fa03 	bl	8005ff8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40001000 	.word	0x40001000

08002c00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8002c04:	f001 fa8c 	bl	8004120 <LED_Toggle>
		HAL_Delay(100);
 8002c08:	2064      	movs	r0, #100	; 0x64
 8002c0a:	f003 fa15 	bl	8006038 <HAL_Delay>
		LED_Toggle();
 8002c0e:	e7f9      	b.n	8002c04 <Error_Handler+0x4>

08002c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_MspInit+0x4c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	210f      	movs	r1, #15
 8002c4a:	f06f 0001 	mvn.w	r0, #1
 8002c4e:	f003 fd7b 	bl	8006748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <HAL_ADC_MspInit+0xa4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d13c      	bne.n	8002cfc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_ADC_MspInit+0xa8>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002cca:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002cce:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480b      	ldr	r0, [pc, #44]	; (8002d0c <HAL_ADC_MspInit+0xac>)
 8002ce0:	f004 ffcc 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4806      	ldr	r0, [pc, #24]	; (8002d10 <HAL_ADC_MspInit+0xb0>)
 8002cf8:	f004 ffc0 	bl	8007c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cfc:	bf00      	nop
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40012200 	.word	0x40012200
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40021400 	.word	0x40021400
 8002d10:	40020000 	.word	0x40020000

08002d14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_CRC_MspInit+0x38>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10b      	bne.n	8002d3e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_CRC_MspInit+0x3c>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <HAL_CRC_MspInit+0x3c>)
 8002d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_CRC_MspInit+0x3c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40023000 	.word	0x40023000
 8002d50:	40023800 	.word	0x40023800

08002d54 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6c      	ldr	r2, [pc, #432]	; (8002f24 <HAL_DCMI_MspInit+0x1d0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	f040 80d2 	bne.w	8002f1c <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002d78:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6353      	str	r3, [r2, #52]	; 0x34
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d90:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a64      	ldr	r2, [pc, #400]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002d96:	f043 0310 	orr.w	r3, r3, #16
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da8:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6313      	str	r3, [r2, #48]	; 0x30
 8002db4:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dca:	6313      	str	r3, [r2, #48]	; 0x30
 8002dcc:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de2:	6313      	str	r3, [r2, #48]	; 0x30
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfc:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_DCMI_MspInit+0x1d4>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002e08:	2360      	movs	r3, #96	; 0x60
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e18:	230d      	movs	r3, #13
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e20:	4619      	mov	r1, r3
 8002e22:	4842      	ldr	r0, [pc, #264]	; (8002f2c <HAL_DCMI_MspInit+0x1d8>)
 8002e24:	f004 ff2a 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e38:	230d      	movs	r3, #13
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	483b      	ldr	r0, [pc, #236]	; (8002f30 <HAL_DCMI_MspInit+0x1dc>)
 8002e44:	f004 ff1a 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e5a:	230d      	movs	r3, #13
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e62:	4619      	mov	r1, r3
 8002e64:	4833      	ldr	r0, [pc, #204]	; (8002f34 <HAL_DCMI_MspInit+0x1e0>)
 8002e66:	f004 ff09 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002e6a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e7c:	230d      	movs	r3, #13
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e84:	4619      	mov	r1, r3
 8002e86:	482c      	ldr	r0, [pc, #176]	; (8002f38 <HAL_DCMI_MspInit+0x1e4>)
 8002e88:	f004 fef8 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002e8c:	2350      	movs	r3, #80	; 0x50
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002e9c:	230d      	movs	r3, #13
 8002e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4825      	ldr	r0, [pc, #148]	; (8002f3c <HAL_DCMI_MspInit+0x1e8>)
 8002ea8:	f004 fee8 	bl	8007c7c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_DCMI_MspInit+0x1f0>)
 8002eb0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8002eb2:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ecc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ed0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ed4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ed8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002edc:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002ef0:	4813      	ldr	r0, [pc, #76]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002ef2:	f003 ff11 	bl	8006d18 <HAL_DMA_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8002efc:	f7ff fe80 	bl	8002c00 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002f04:	649a      	str	r2, [r3, #72]	; 0x48
 8002f06:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <HAL_DCMI_MspInit+0x1ec>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2105      	movs	r1, #5
 8002f10:	204e      	movs	r0, #78	; 0x4e
 8002f12:	f003 fc19 	bl	8006748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002f16:	204e      	movs	r0, #78	; 0x4e
 8002f18:	f003 fc32 	bl	8006780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002f1c:	bf00      	nop
 8002f1e:	3738      	adds	r7, #56	; 0x38
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	50050000 	.word	0x50050000
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40020c00 	.word	0x40020c00
 8002f34:	40021800 	.word	0x40021800
 8002f38:	40021c00 	.word	0x40021c00
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	2000bc30 	.word	0x2000bc30
 8002f44:	40026428 	.word	0x40026428

08002f48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_DMA2D_MspInit+0x44>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_DMA2D_MspInit+0x48>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_DMA2D_MspInit+0x48>)
 8002f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_DMA2D_MspInit+0x48>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2105      	movs	r1, #5
 8002f76:	205a      	movs	r0, #90	; 0x5a
 8002f78:	f003 fbe6 	bl	8006748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002f7c:	205a      	movs	r0, #90	; 0x5a
 8002f7e:	f003 fbff 	bl	8006780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	4002b000 	.word	0x4002b000
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	; 0x30
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 031c 	add.w	r3, r7, #28
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <HAL_I2C_MspInit+0xdc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d129      	bne.n	800300a <HAL_I2C_MspInit+0x76>
	//    gpio_init_structure.Speed = GPIO_SPEED_FAST;


  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a2e      	ldr	r2, [pc, #184]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fd4:	2312      	movs	r3, #18
 8002fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4823      	ldr	r0, [pc, #140]	; (8003078 <HAL_I2C_MspInit+0xe4>)
 8002fec:	f004 fe46 	bl	8007c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8002ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003008:	e02d      	b.n	8003066 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_I2C_MspInit+0xe8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d128      	bne.n	8003066 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	4a16      	ldr	r2, [pc, #88]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 800301a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301e:	6313      	str	r3, [r2, #48]	; 0x30
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800302c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003032:	2312      	movs	r3, #18
 8003034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003036:	2301      	movs	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800303e:	2304      	movs	r3, #4
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003042:	f107 031c 	add.w	r3, r7, #28
 8003046:	4619      	mov	r1, r3
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <HAL_I2C_MspInit+0xec>)
 800304a:	f004 fe17 	bl	8007c7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 8003054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_I2C_MspInit+0xe0>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
}
 8003066:	bf00      	nop
 8003068:	3730      	adds	r7, #48	; 0x30
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40005400 	.word	0x40005400
 8003074:	40023800 	.word	0x40023800
 8003078:	40020400 	.word	0x40020400
 800307c:	40005c00 	.word	0x40005c00
 8003080:	40021c00 	.word	0x40021c00

08003084 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <HAL_I2C_MspDeInit+0x64>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d110      	bne.n	80030b8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_I2C_MspDeInit+0x68>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a14      	ldr	r2, [pc, #80]	; (80030ec <HAL_I2C_MspDeInit+0x68>)
 800309c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80030a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030a6:	4812      	ldr	r0, [pc, #72]	; (80030f0 <HAL_I2C_MspDeInit+0x6c>)
 80030a8:	f004 ff94 	bl	8007fd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80030ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030b0:	480f      	ldr	r0, [pc, #60]	; (80030f0 <HAL_I2C_MspDeInit+0x6c>)
 80030b2:	f004 ff8f 	bl	8007fd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80030b6:	e013      	b.n	80030e0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <HAL_I2C_MspDeInit+0x70>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10e      	bne.n	80030e0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_I2C_MspDeInit+0x68>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <HAL_I2C_MspDeInit+0x68>)
 80030c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	4809      	ldr	r0, [pc, #36]	; (80030f8 <HAL_I2C_MspDeInit+0x74>)
 80030d2:	f004 ff7f 	bl	8007fd4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80030d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030da:	4807      	ldr	r0, [pc, #28]	; (80030f8 <HAL_I2C_MspDeInit+0x74>)
 80030dc:	f004 ff7a 	bl	8007fd4 <HAL_GPIO_DeInit>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40005400 	.word	0x40005400
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020400 	.word	0x40020400
 80030f4:	40005c00 	.word	0x40005c00
 80030f8:	40021c00 	.word	0x40021c00

080030fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08e      	sub	sp, #56	; 0x38
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a51      	ldr	r2, [pc, #324]	; (8003260 <HAL_LTDC_MspInit+0x164>)
 800311a:	4293      	cmp	r3, r2
 800311c:	f040 809b 	bne.w	8003256 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003120:	4b50      	ldr	r3, [pc, #320]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	4a4f      	ldr	r2, [pc, #316]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800312a:	6453      	str	r3, [r2, #68]	; 0x44
 800312c:	4b4d      	ldr	r3, [pc, #308]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003138:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	4a49      	ldr	r2, [pc, #292]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800313e:	f043 0310 	orr.w	r3, r3, #16
 8003142:	6313      	str	r3, [r2, #48]	; 0x30
 8003144:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003150:	4b44      	ldr	r3, [pc, #272]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	4a43      	ldr	r2, [pc, #268]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800315a:	6313      	str	r3, [r2, #48]	; 0x30
 800315c:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003168:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a3d      	ldr	r2, [pc, #244]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003180:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	4a37      	ldr	r2, [pc, #220]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 8003186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318a:	6313      	str	r3, [r2, #48]	; 0x30
 800318c:	4b35      	ldr	r3, [pc, #212]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a2:	6313      	str	r3, [r2, #48]	; 0x30
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_LTDC_MspInit+0x168>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80031b0:	2310      	movs	r3, #16
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031bc:	2300      	movs	r3, #0
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031c0:	230e      	movs	r3, #14
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80031c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c8:	4619      	mov	r1, r3
 80031ca:	4827      	ldr	r0, [pc, #156]	; (8003268 <HAL_LTDC_MspInit+0x16c>)
 80031cc:	f004 fd56 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80031d0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031e2:	230e      	movs	r3, #14
 80031e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80031e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ea:	4619      	mov	r1, r3
 80031ec:	481f      	ldr	r0, [pc, #124]	; (800326c <HAL_LTDC_MspInit+0x170>)
 80031ee:	f004 fd45 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80031f2:	23f7      	movs	r3, #247	; 0xf7
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f6:	2302      	movs	r3, #2
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fe:	2300      	movs	r3, #0
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003202:	230e      	movs	r3, #14
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320a:	4619      	mov	r1, r3
 800320c:	4818      	ldr	r0, [pc, #96]	; (8003270 <HAL_LTDC_MspInit+0x174>)
 800320e:	f004 fd35 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003224:	2309      	movs	r3, #9
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322c:	4619      	mov	r1, r3
 800322e:	4811      	ldr	r0, [pc, #68]	; (8003274 <HAL_LTDC_MspInit+0x178>)
 8003230:	f004 fd24 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003234:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003246:	230e      	movs	r3, #14
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800324a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324e:	4619      	mov	r1, r3
 8003250:	4809      	ldr	r0, [pc, #36]	; (8003278 <HAL_LTDC_MspInit+0x17c>)
 8003252:	f004 fd13 	bl	8007c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003256:	bf00      	nop
 8003258:	3738      	adds	r7, #56	; 0x38
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40016800 	.word	0x40016800
 8003264:	40023800 	.word	0x40023800
 8003268:	40021000 	.word	0x40021000
 800326c:	40022400 	.word	0x40022400
 8003270:	40022800 	.word	0x40022800
 8003274:	40021800 	.word	0x40021800
 8003278:	40022000 	.word	0x40022000

0800327c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08c      	sub	sp, #48	; 0x30
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3f      	ldr	r2, [pc, #252]	; (8003398 <HAL_QSPI_MspInit+0x11c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d178      	bne.n	8003390 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	4a3e      	ldr	r2, [pc, #248]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	6393      	str	r3, [r2, #56]	; 0x38
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032bc:	f043 0310 	orr.w	r3, r3, #16
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ce:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a32      	ldr	r2, [pc, #200]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a2c      	ldr	r2, [pc, #176]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032ec:	f043 0308 	orr.w	r3, r3, #8
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b2a      	ldr	r3, [pc, #168]	; (800339c <HAL_QSPI_MspInit+0x120>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80032fe:	2304      	movs	r3, #4
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800330e:	2309      	movs	r3, #9
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	4821      	ldr	r0, [pc, #132]	; (80033a0 <HAL_QSPI_MspInit+0x124>)
 800331a:	f004 fcaf 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800331e:	2340      	movs	r3, #64	; 0x40
 8003320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800332e:	230a      	movs	r3, #10
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003332:	f107 031c 	add.w	r3, r7, #28
 8003336:	4619      	mov	r1, r3
 8003338:	481a      	ldr	r0, [pc, #104]	; (80033a4 <HAL_QSPI_MspInit+0x128>)
 800333a:	f004 fc9f 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800333e:	2304      	movs	r3, #4
 8003340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800334e:	2309      	movs	r3, #9
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	4812      	ldr	r0, [pc, #72]	; (80033a4 <HAL_QSPI_MspInit+0x128>)
 800335a:	f004 fc8f 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800335e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336c:	2303      	movs	r3, #3
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003370:	2309      	movs	r3, #9
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	4619      	mov	r1, r3
 800337a:	480b      	ldr	r0, [pc, #44]	; (80033a8 <HAL_QSPI_MspInit+0x12c>)
 800337c:	f004 fc7e 	bl	8007c7c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8003380:	2200      	movs	r2, #0
 8003382:	2105      	movs	r1, #5
 8003384:	205c      	movs	r0, #92	; 0x5c
 8003386:	f003 f9df 	bl	8006748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800338a:	205c      	movs	r0, #92	; 0x5c
 800338c:	f003 f9f8 	bl	8006780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3730      	adds	r7, #48	; 0x30
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	a0001000 	.word	0xa0001000
 800339c:	40023800 	.word	0x40023800
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020c00 	.word	0x40020c00

080033ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_RTC_MspInit+0x2c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d105      	bne.n	80033ca <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_RTC_MspInit+0x30>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a06      	ldr	r2, [pc, #24]	; (80033dc <HAL_RTC_MspInit+0x30>)
 80033c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40002800 	.word	0x40002800
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a25      	ldr	r2, [pc, #148]	; (8003494 <HAL_SD_MspInit+0xb4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d144      	bne.n	800348c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	4a24      	ldr	r2, [pc, #144]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800340c:	6453      	str	r3, [r2, #68]	; 0x44
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <HAL_SD_MspInit+0xb8>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_SD_MspInit+0xb8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800344a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800344e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800345c:	230c      	movs	r3, #12
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	480d      	ldr	r0, [pc, #52]	; (800349c <HAL_SD_MspInit+0xbc>)
 8003468:	f004 fc08 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800346c:	2304      	movs	r3, #4
 800346e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800347c:	230c      	movs	r3, #12
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	4619      	mov	r1, r3
 8003486:	4806      	ldr	r0, [pc, #24]	; (80034a0 <HAL_SD_MspInit+0xc0>)
 8003488:	f004 fbf8 	bl	8007c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800348c:	bf00      	nop
 800348e:	3728      	adds	r7, #40	; 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40023800 	.word	0x40023800
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00

080034a4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80034c4:	d127      	bne.n	8003516 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_SPDIFRX_MspInit+0x7c>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a15      	ldr	r2, [pc, #84]	; (8003520 <HAL_SPDIFRX_MspInit+0x7c>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_SPDIFRX_MspInit+0x7c>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_SPDIFRX_MspInit+0x7c>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_SPDIFRX_MspInit+0x7c>)
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_SPDIFRX_MspInit+0x7c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003506:	2308      	movs	r3, #8
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	4804      	ldr	r0, [pc, #16]	; (8003524 <HAL_SPDIFRX_MspInit+0x80>)
 8003512:	f004 fbb3 	bl	8007c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003516:	bf00      	nop
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40020c00 	.word	0x40020c00

08003528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_TIM_Base_MspInit+0xc8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10c      	bne.n	8003554 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003552:	e046      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d10c      	bne.n	8003578 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	69bb      	ldr	r3, [r7, #24]
}
 8003576:	e034      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1e      	ldr	r2, [pc, #120]	; (80035f8 <HAL_TIM_Base_MspInit+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10c      	bne.n	800359c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003582:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	697b      	ldr	r3, [r7, #20]
}
 800359a:	e022      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <HAL_TIM_Base_MspInit+0xd4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10c      	bne.n	80035c0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 80035ac:	f043 0308 	orr.w	r3, r3, #8
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]
}
 80035be:	e010      	b.n	80035e2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <HAL_TIM_Base_MspInit+0xd8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10b      	bne.n	80035e2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <HAL_TIM_Base_MspInit+0xcc>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
}
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40010400 	.word	0x40010400

08003604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0a      	ldr	r2, [pc, #40]	; (800363c <HAL_TIM_PWM_MspInit+0x38>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10b      	bne.n	800362e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_TIM_PWM_MspInit+0x3c>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_TIM_PWM_MspInit+0x3c>)
 800361c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <HAL_TIM_PWM_MspInit+0x3c>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40001800 	.word	0x40001800
 8003640:	40023800 	.word	0x40023800

08003644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 031c 	add.w	r3, r7, #28
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a56      	ldr	r2, [pc, #344]	; (80037bc <HAL_TIM_MspPostInit+0x178>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d11d      	bne.n	80036a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a55      	ldr	r2, [pc, #340]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800367e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003690:	2301      	movs	r3, #1
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003694:	f107 031c 	add.w	r3, r7, #28
 8003698:	4619      	mov	r1, r3
 800369a:	484a      	ldr	r0, [pc, #296]	; (80037c4 <HAL_TIM_MspPostInit+0x180>)
 800369c:	f004 faee 	bl	8007c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80036a0:	e087      	b.n	80037b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d11d      	bne.n	80036e8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ac:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4a43      	ldr	r2, [pc, #268]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6313      	str	r3, [r2, #48]	; 0x30
 80036b8:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80036c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036d6:	2301      	movs	r3, #1
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80036da:	f107 031c 	add.w	r3, r7, #28
 80036de:	4619      	mov	r1, r3
 80036e0:	4838      	ldr	r0, [pc, #224]	; (80037c4 <HAL_TIM_MspPostInit+0x180>)
 80036e2:	f004 facb 	bl	8007c7c <HAL_GPIO_Init>
}
 80036e6:	e064      	b.n	80037b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a36      	ldr	r2, [pc, #216]	; (80037c8 <HAL_TIM_MspPostInit+0x184>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d11c      	bne.n	800372c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a32      	ldr	r2, [pc, #200]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800370a:	2310      	movs	r3, #16
 800370c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800371a:	2302      	movs	r3, #2
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800371e:	f107 031c 	add.w	r3, r7, #28
 8003722:	4619      	mov	r1, r3
 8003724:	4829      	ldr	r0, [pc, #164]	; (80037cc <HAL_TIM_MspPostInit+0x188>)
 8003726:	f004 faa9 	bl	8007c7c <HAL_GPIO_Init>
}
 800372a:	e042      	b.n	80037b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <HAL_TIM_MspPostInit+0x18c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d11c      	bne.n	8003770 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2300      	movs	r3, #0
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800375e:	2302      	movs	r3, #2
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	4619      	mov	r1, r3
 8003768:	481a      	ldr	r0, [pc, #104]	; (80037d4 <HAL_TIM_MspPostInit+0x190>)
 800376a:	f004 fa87 	bl	8007c7c <HAL_GPIO_Init>
}
 800376e:	e020      	b.n	80037b2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_TIM_MspPostInit+0x194>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d11b      	bne.n	80037b2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 8003780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_TIM_MspPostInit+0x17c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003792:	2340      	movs	r3, #64	; 0x40
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80037a2:	2309      	movs	r3, #9
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	480b      	ldr	r0, [pc, #44]	; (80037dc <HAL_TIM_MspPostInit+0x198>)
 80037ae:	f004 fa65 	bl	8007c7c <HAL_GPIO_Init>
}
 80037b2:	bf00      	nop
 80037b4:	3730      	adds	r7, #48	; 0x30
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40022000 	.word	0x40022000
 80037d8:	40001800 	.word	0x40001800
 80037dc:	40021c00 	.word	0x40021c00

080037e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	f107 031c 	add.w	r3, r7, #28
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <HAL_UART_MspInit+0x110>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d145      	bne.n	800388e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003802:	4b3c      	ldr	r3, [pc, #240]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003808:	f043 0310 	orr.w	r3, r3, #16
 800380c:	6453      	str	r3, [r2, #68]	; 0x44
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_UART_MspInit+0x114>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a35      	ldr	r2, [pc, #212]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_UART_MspInit+0x114>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800385a:	2307      	movs	r3, #7
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	4619      	mov	r1, r3
 8003864:	4824      	ldr	r0, [pc, #144]	; (80038f8 <HAL_UART_MspInit+0x118>)
 8003866:	f004 fa09 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800386a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800387c:	2307      	movs	r3, #7
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	4619      	mov	r1, r3
 8003886:	481d      	ldr	r0, [pc, #116]	; (80038fc <HAL_UART_MspInit+0x11c>)
 8003888:	f004 f9f8 	bl	8007c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800388c:	e02c      	b.n	80038e8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <HAL_UART_MspInit+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d127      	bne.n	80038e8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003898:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_UART_MspInit+0x114>)
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <HAL_UART_MspInit+0x114>)
 800389e:	f043 0320 	orr.w	r3, r3, #32
 80038a2:	6453      	str	r3, [r2, #68]	; 0x44
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_UART_MspInit+0x114>)
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_UART_MspInit+0x114>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <HAL_UART_MspInit+0x114>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	6313      	str	r3, [r2, #48]	; 0x30
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_UART_MspInit+0x114>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80038c8:	23c0      	movs	r3, #192	; 0xc0
 80038ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d4:	2303      	movs	r3, #3
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038d8:	2308      	movs	r3, #8
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4619      	mov	r1, r3
 80038e2:	4808      	ldr	r0, [pc, #32]	; (8003904 <HAL_UART_MspInit+0x124>)
 80038e4:	f004 f9ca 	bl	8007c7c <HAL_GPIO_Init>
}
 80038e8:	bf00      	nop
 80038ea:	3730      	adds	r7, #48	; 0x30
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40011000 	.word	0x40011000
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40020400 	.word	0x40020400
 80038fc:	40020000 	.word	0x40020000
 8003900:	40011400 	.word	0x40011400
 8003904:	40020800 	.word	0x40020800

08003908 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_FMC_MspInit+0x10c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d173      	bne.n	8003a0c <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_FMC_MspInit+0x10c>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_FMC_MspInit+0x110>)
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <HAL_FMC_MspInit+0x110>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6393      	str	r3, [r2, #56]	; 0x38
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_FMC_MspInit+0x110>)
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003942:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003946:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003954:	230c      	movs	r3, #12
 8003956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	4619      	mov	r1, r3
 800395c:	482f      	ldr	r0, [pc, #188]	; (8003a1c <HAL_FMC_MspInit+0x114>)
 800395e:	f004 f98d 	bl	8007c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003962:	f248 1333 	movw	r3, #33075	; 0x8133
 8003966:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003970:	2303      	movs	r3, #3
 8003972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003974:	230c      	movs	r3, #12
 8003976:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4828      	ldr	r0, [pc, #160]	; (8003a20 <HAL_FMC_MspInit+0x118>)
 800397e:	f004 f97d 	bl	8007c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003982:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003986:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003994:	230c      	movs	r3, #12
 8003996:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4821      	ldr	r0, [pc, #132]	; (8003a24 <HAL_FMC_MspInit+0x11c>)
 800399e:	f004 f96d 	bl	8007c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80039a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039a6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a8:	2302      	movs	r3, #2
 80039aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b0:	2303      	movs	r3, #3
 80039b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039b4:	230c      	movs	r3, #12
 80039b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	481a      	ldr	r0, [pc, #104]	; (8003a28 <HAL_FMC_MspInit+0x120>)
 80039be:	f004 f95d 	bl	8007c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80039c2:	2328      	movs	r3, #40	; 0x28
 80039c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c6:	2302      	movs	r3, #2
 80039c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2303      	movs	r3, #3
 80039d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039d2:	230c      	movs	r3, #12
 80039d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4814      	ldr	r0, [pc, #80]	; (8003a2c <HAL_FMC_MspInit+0x124>)
 80039dc:	f004 f94e 	bl	8007c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80039e0:	2308      	movs	r3, #8
 80039e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039f0:	230c      	movs	r3, #12
 80039f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	480d      	ldr	r0, [pc, #52]	; (8003a30 <HAL_FMC_MspInit+0x128>)
 80039fa:	f004 f93f 	bl	8007c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_FMC_MspInit+0x12c>)
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_FMC_MspInit+0x130>)
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_FMC_MspInit+0x130>)
 8003a06:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <HAL_FMC_MspInit+0x12c>)
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
 8003a0a:	e000      	b.n	8003a0e <HAL_FMC_MspInit+0x106>
    return;
 8003a0c:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000344 	.word	0x20000344
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40021800 	.word	0x40021800
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40021400 	.word	0x40021400
 8003a2c:	40021c00 	.word	0x40021c00
 8003a30:	40020800 	.word	0x40020800
 8003a34:	2000c19c 	.word	0x2000c19c
 8003a38:	2000b9e4 	.word	0x2000b9e4

08003a3c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003a44:	f7ff ff60 	bl	8003908 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6f      	ldr	r2, [pc, #444]	; (8003c1c <HAL_SAI_MspInit+0x1cc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d175      	bne.n	8003b4e <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003a62:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <HAL_SAI_MspInit+0x1d0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003a6a:	4b6e      	ldr	r3, [pc, #440]	; (8003c24 <HAL_SAI_MspInit+0x1d4>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	4a6d      	ldr	r2, [pc, #436]	; (8003c24 <HAL_SAI_MspInit+0x1d4>)
 8003a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44
 8003a76:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <HAL_SAI_MspInit+0x1d4>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003a82:	4b67      	ldr	r3, [pc, #412]	; (8003c20 <HAL_SAI_MspInit+0x1d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_SAI_MspInit+0x1d0>)
 8003a8a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	2302      	movs	r3, #2
 8003a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003a9c:	230a      	movs	r3, #10
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4860      	ldr	r0, [pc, #384]	; (8003c28 <HAL_SAI_MspInit+0x1d8>)
 8003aa8:	f004 f8e8 	bl	8007c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003aac:	23e0      	movs	r3, #224	; 0xe0
 8003aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003abc:	230a      	movs	r3, #10
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4858      	ldr	r0, [pc, #352]	; (8003c28 <HAL_SAI_MspInit+0x1d8>)
 8003ac8:	f004 f8d8 	bl	8007c7c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003acc:	4b57      	ldr	r3, [pc, #348]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003ace:	4a58      	ldr	r2, [pc, #352]	; (8003c30 <HAL_SAI_MspInit+0x1e0>)
 8003ad0:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8003ad2:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003ad4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003ad8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ada:	4b54      	ldr	r3, [pc, #336]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003adc:	2240      	movs	r2, #64	; 0x40
 8003ade:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae0:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003ae6:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aec:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003aee:	4b4f      	ldr	r3, [pc, #316]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af4:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003af6:	4b4d      	ldr	r3, [pc, #308]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003afc:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003afe:	4b4b      	ldr	r3, [pc, #300]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b04:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003b06:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b0c:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b10:	2204      	movs	r2, #4
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003b14:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b16:	2203      	movs	r2, #3
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003b1a:	4b44      	ldr	r3, [pc, #272]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003b20:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003b26:	4841      	ldr	r0, [pc, #260]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b28:	f003 f8f6 	bl	8006d18 <HAL_DMA_Init>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8003b32:	f7ff f865 	bl	8002c00 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a3c      	ldr	r2, [pc, #240]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b3a:	671a      	str	r2, [r3, #112]	; 0x70
 8003b3c:	4a3b      	ldr	r2, [pc, #236]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b46:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b48:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <HAL_SAI_MspInit+0x1dc>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a38      	ldr	r2, [pc, #224]	; (8003c34 <HAL_SAI_MspInit+0x1e4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d15c      	bne.n	8003c12 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_SAI_MspInit+0x1d0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003b60:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_SAI_MspInit+0x1d4>)
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <HAL_SAI_MspInit+0x1d4>)
 8003b66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6c:	4b2d      	ldr	r3, [pc, #180]	; (8003c24 <HAL_SAI_MspInit+0x1d4>)
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_SAI_MspInit+0x1d0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <HAL_SAI_MspInit+0x1d0>)
 8003b80:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b90:	2302      	movs	r3, #2
 8003b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003b94:	230a      	movs	r3, #10
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4826      	ldr	r0, [pc, #152]	; (8003c38 <HAL_SAI_MspInit+0x1e8>)
 8003ba0:	f004 f86c 	bl	8007c7c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003ba6:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <HAL_SAI_MspInit+0x1f0>)
 8003ba8:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003baa:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb6:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc2:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bca:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bd2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bda:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8003bdc:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be2:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003bea:	4814      	ldr	r0, [pc, #80]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bec:	f003 f894 	bl	8006d18 <HAL_DMA_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8003bf6:	f7ff f803 	bl	8002c00 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003bfe:	671a      	str	r2, [r3, #112]	; 0x70
 8003c00:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003c0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_SAI_MspInit+0x1ec>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003c12:	bf00      	nop
 8003c14:	3728      	adds	r7, #40	; 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40015c04 	.word	0x40015c04
 8003c20:	20000348 	.word	0x20000348
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40022000 	.word	0x40022000
 8003c2c:	2000bfe0 	.word	0x2000bfe0
 8003c30:	40026470 	.word	0x40026470
 8003c34:	40015c24 	.word	0x40015c24
 8003c38:	40021800 	.word	0x40021800
 8003c3c:	2000ba90 	.word	0x2000ba90
 8003c40:	400264b8 	.word	0x400264b8

08003c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	; 0x30
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	2036      	movs	r0, #54	; 0x36
 8003c5a:	f002 fd75 	bl	8006748 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c5e:	2036      	movs	r0, #54	; 0x36
 8003c60:	f002 fd8e 	bl	8006780 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c64:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <HAL_InitTick+0xa0>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_InitTick+0xa0>)
 8003c6a:	f043 0310 	orr.w	r3, r3, #16
 8003c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <HAL_InitTick+0xa0>)
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c7c:	f107 0210 	add.w	r2, r7, #16
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f008 fda2 	bl	800c7d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003c8c:	f008 fd78 	bl	800c780 <HAL_RCC_GetPCLK1Freq>
 8003c90:	4603      	mov	r3, r0
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <HAL_InitTick+0xa4>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9b      	lsrs	r3, r3, #18
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_InitTick+0xa8>)
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <HAL_InitTick+0xac>)
 8003ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_InitTick+0xa8>)
 8003cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cb0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_InitTick+0xa8>)
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_InitTick+0xa8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_InitTick+0xa8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003cc4:	4809      	ldr	r0, [pc, #36]	; (8003cec <HAL_InitTick+0xa8>)
 8003cc6:	f00b fc13 	bl	800f4f0 <HAL_TIM_Base_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003cd0:	4806      	ldr	r0, [pc, #24]	; (8003cec <HAL_InitTick+0xa8>)
 8003cd2:	f00b fc65 	bl	800f5a0 <HAL_TIM_Base_Start_IT>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	e000      	b.n	8003cdc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3730      	adds	r7, #48	; 0x30
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	431bde83 	.word	0x431bde83
 8003cec:	2000c21c 	.word	0x2000c21c
 8003cf0:	40001000 	.word	0x40001000

08003cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cf8:	e7fe      	b.n	8003cf8 <NMI_Handler+0x4>

08003cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cfe:	e7fe      	b.n	8003cfe <HardFault_Handler+0x4>

08003d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d04:	e7fe      	b.n	8003d04 <MemManage_Handler+0x4>

08003d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d0a:	e7fe      	b.n	8003d0a <BusFault_Handler+0x4>

08003d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d10:	e7fe      	b.n	8003d10 <UsageFault_Handler+0x4>

08003d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d28:	f004 faac 	bl	8008284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <TIM6_DAC_IRQHandler+0x10>)
 8003d36:	f00b fd02 	bl	800f73e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000c21c 	.word	0x2000c21c

08003d44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <DMA2_Stream0_IRQHandler+0x10>)
 8003d4a:	f003 f985 	bl	8007058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	2000b9e4 	.word	0x2000b9e4

08003d58 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003d5c:	4802      	ldr	r0, [pc, #8]	; (8003d68 <DMA2_Stream1_IRQHandler+0x10>)
 8003d5e:	f003 f97b 	bl	8007058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000bc30 	.word	0x2000bc30

08003d6c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <DMA2_Stream4_IRQHandler+0x10>)
 8003d72:	f003 f971 	bl	8007058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000bfe0 	.word	0x2000bfe0

08003d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <OTG_FS_IRQHandler+0x10>)
 8003d86:	f004 fd0b 	bl	80087a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	2004c6bc 	.word	0x2004c6bc

08003d94 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003d98:	4802      	ldr	r0, [pc, #8]	; (8003da4 <DMA2_Stream7_IRQHandler+0x10>)
 8003d9a:	f003 f95d 	bl	8007058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2000ba90 	.word	0x2000ba90

08003da8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <DCMI_IRQHandler+0x10>)
 8003dae:	f002 fee3 	bl	8006b78 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000bea0 	.word	0x2000bea0

08003dbc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <DMA2D_IRQHandler+0x10>)
 8003dc2:	f003 fd1d 	bl	8007800 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000c0c4 	.word	0x2000c0c4

08003dd0 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <QUADSPI_IRQHandler+0x10>)
 8003dd6:	f007 f939 	bl	800b04c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2000c1d0 	.word	0x2000c1d0

08003de4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e00a      	b.n	8003e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003df6:	f3af 8000 	nop.w
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	60ba      	str	r2, [r7, #8]
 8003e02:	b2ca      	uxtb	r2, r1
 8003e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	dbf0      	blt.n	8003df6 <_read+0x12>
	}

return len;
 8003e14:	687b      	ldr	r3, [r7, #4]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e009      	b.n	8003e44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	60ba      	str	r2, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f987 	bl	800414c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3301      	adds	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	dbf1      	blt.n	8003e30 <_write+0x12>
	}
	return len;
 8003e4c:	687b      	ldr	r3, [r7, #4]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_close>:

int _close(int file)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e7e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <_isatty>:

int _isatty(int file)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	return 1;
 8003e96:	2301      	movs	r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
	return 0;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec8:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <_sbrk+0x5c>)
 8003eca:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <_sbrk+0x60>)
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <_sbrk+0x64>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <_sbrk+0x64>)
 8003ede:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <_sbrk+0x68>)
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ee2:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d207      	bcs.n	8003f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ef0:	f015 fc02 	bl	80196f8 <__errno>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	220c      	movs	r2, #12
 8003ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e009      	b.n	8003f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <_sbrk+0x64>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <_sbrk+0x64>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <_sbrk+0x64>)
 8003f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20050000 	.word	0x20050000
 8003f20:	00000400 	.word	0x00000400
 8003f24:	2000034c 	.word	0x2000034c
 8003f28:	2004c9d0 	.word	0x2004c9d0

08003f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <SystemInit+0x20>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <SystemInit+0x20>)
 8003f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <uiDisplayBasic>:
#include "arm_math.h"

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 8003f56:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5a:	f000 fac7 	bl	80044ec <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8003f5e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003f62:	f000 fa29 	bl	80043b8 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6a:	f000 fa55 	bl	8004418 <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8003f6e:	4810      	ldr	r0, [pc, #64]	; (8003fb0 <uiDisplayBasic+0x60>)
 8003f70:	f000 fa6a 	bl	8004448 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 8003f74:	2301      	movs	r3, #1
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <uiDisplayBasic+0x64>)
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f000 fafc 	bl	800457c <LCD_DrawString>

	LCD_SetFont(&Font12);
 8003f84:	480c      	ldr	r0, [pc, #48]	; (8003fb8 <uiDisplayBasic+0x68>)
 8003f86:	f000 fa5f 	bl	8004448 <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2303      	movs	r3, #3
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <uiDisplayBasic+0x6c>)
 8003f92:	211e      	movs	r1, #30
 8003f94:	200a      	movs	r0, #10
 8003f96:	f000 faf1 	bl	800457c <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <uiDisplayBasic+0x70>)
 8003fa2:	2132      	movs	r1, #50	; 0x32
 8003fa4:	200a      	movs	r0, #10
 8003fa6:	f000 fae9 	bl	800457c <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	2000002c 	.word	0x2000002c
 8003fb4:	0801ae2c 	.word	0x0801ae2c
 8003fb8:	20000024 	.word	0x20000024
 8003fbc:	0801ae44 	.word	0x0801ae44
 8003fc0:	0801ae50 	.word	0x0801ae50
 8003fc4:	00000000 	.word	0x00000000

08003fc8 <uiDisplayFFT>:
#define  LCD_SCREEN_HEIGHT   272
int x=10;
/**
 * Displays FFT on screen
 **/
void uiDisplayFFT(float* fftabs, int fftsize) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	; 0x28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
	float maxvalue = 40;
 8003fd2:	4b43      	ldr	r3, [pc, #268]	; (80040e0 <uiDisplayFFT+0x118>)
 8003fd4:	61fb      	str	r3, [r7, #28]
	float minvalue = 12;
 8003fd6:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <uiDisplayFFT+0x11c>)
 8003fd8:	61bb      	str	r3, [r7, #24]
	//arm_max_f32(fftabs, fftsize, &maxvalue, NULL);
	//arm_min_f32(fftabs, fftsize, &minvalue, NULL);
	for(int i=0; i<fftsize; i++){
 8003fda:	2300      	movs	r3, #0
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	e064      	b.n	80040aa <uiDisplayFFT+0xe2>
		float val = 20.*log10(fftabs[i]/fftsize);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	ed93 7a00 	vldr	s14, [r3]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ff6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ffa:	ee16 0a90 	vmov	r0, s13
 8003ffe:	f7fc fb1b 	bl	8000638 <__aeabi_f2d>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	ec43 2b10 	vmov	d0, r2, r3
 800400a:	f016 fbf1 	bl	801a7f0 <log10>
 800400e:	ec51 0b10 	vmov	r0, r1, d0
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <uiDisplayFFT+0x120>)
 8004018:	f7fc fb66 	bl	80006e8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f7fc fe30 	bl	8000c88 <__aeabi_d2f>
 8004028:	4603      	mov	r3, r0
 800402a:	623b      	str	r3, [r7, #32]
		if(val<minvalue)
 800402c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004030:	edd7 7a06 	vldr	s15, [r7, #24]
 8004034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403c:	d501      	bpl.n	8004042 <uiDisplayFFT+0x7a>
			val=minvalue;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	623b      	str	r3, [r7, #32]
		//if(val>maxvalue)
		//	val=maxvalue;
		double normval = (val-minvalue)/(maxvalue-minvalue);
 8004042:	ed97 7a08 	vldr	s14, [r7, #32]
 8004046:	edd7 7a06 	vldr	s15, [r7, #24]
 800404a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800404e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004052:	edd7 7a06 	vldr	s15, [r7, #24]
 8004056:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800405a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800405e:	ee16 0a90 	vmov	r0, s13
 8004062:	f7fc fae9 	bl	8000638 <__aeabi_f2d>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint16_t color = normval * 0x7FFF;
 800406e:	a31a      	add	r3, pc, #104	; (adr r3, 80040d8 <uiDisplayFFT+0x110>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004078:	f7fc fb36 	bl	80006e8 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	f7fc fde0 	bl	8000c48 <__aeabi_d2uiz>
 8004088:	4603      	mov	r3, r0
 800408a:	81fb      	strh	r3, [r7, #14]
		//LCD_SetStrokeColor(color);
		LCD_DrawPixel_Color(x, LCD_SCREEN_HEIGHT-i,color);
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <uiDisplayFFT+0x124>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b298      	uxth	r0, r3
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	b29b      	uxth	r3, r3
 8004096:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 800409a:	b29b      	uxth	r3, r3
 800409c:	89fa      	ldrh	r2, [r7, #14]
 800409e:	4619      	mov	r1, r3
 80040a0:	f000 f9e2 	bl	8004468 <LCD_DrawPixel_Color>
	for(int i=0; i<fftsize; i++){
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	3301      	adds	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	db96      	blt.n	8003fe0 <uiDisplayFFT+0x18>
	}
	x++;
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <uiDisplayFFT+0x124>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	4a0c      	ldr	r2, [pc, #48]	; (80040ec <uiDisplayFFT+0x124>)
 80040ba:	6013      	str	r3, [r2, #0]
	if(x>LCD_SCREEN_WIDTH-10)
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <uiDisplayFFT+0x124>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 80040c4:	dd02      	ble.n	80040cc <uiDisplayFFT+0x104>
		x=10;
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <uiDisplayFFT+0x124>)
 80040c8:	220a      	movs	r2, #10
 80040ca:	601a      	str	r2, [r3, #0]

}
 80040cc:	bf00      	nop
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f3af 8000 	nop.w
 80040d8:	00000000 	.word	0x00000000
 80040dc:	40dfffc0 	.word	0x40dfffc0
 80040e0:	42200000 	.word	0x42200000
 80040e4:	41400000 	.word	0x41400000
 80040e8:	40340000 	.word	0x40340000
 80040ec:	20000018 	.word	0x20000018

080040f0 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 80040f4:	2201      	movs	r2, #1
 80040f6:	2102      	movs	r1, #2
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <LED_On+0x14>)
 80040fa:	f004 f88f 	bl	800821c <HAL_GPIO_WritePin>
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40022000 	.word	0x40022000

08004108 <LED_Off>:

void LED_Off(){
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	2102      	movs	r1, #2
 8004110:	4802      	ldr	r0, [pc, #8]	; (800411c <LED_Off+0x14>)
 8004112:	f004 f883 	bl	800821c <HAL_GPIO_WritePin>
}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40022000 	.word	0x40022000

08004120 <LED_Toggle>:

void LED_Toggle(){
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 8004124:	2102      	movs	r1, #2
 8004126:	4802      	ldr	r0, [pc, #8]	; (8004130 <LED_Toggle+0x10>)
 8004128:	f004 f891 	bl	800824e <HAL_GPIO_TogglePin>

}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40022000 	.word	0x40022000

08004134 <PB_GetState>:
// --------------------------------- onboard blue button ------------------------------

/**
 * @return GPIO_PIN_SET or GPIO_PIN_RESET depending on the state of the onboard blue (push) button
 */
uint32_t PB_GetState(){
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0

  return HAL_GPIO_ReadPin(BLUE_BTN_GPIO_Port, BLUE_BTN_Pin);
 8004138:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800413c:	4802      	ldr	r0, [pc, #8]	; (8004148 <PB_GetState+0x14>)
 800413e:	f004 f855 	bl	80081ec <HAL_GPIO_ReadPin>
 8004142:	4603      	mov	r3, r0

}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40022000 	.word	0x40022000

0800414c <__io_putchar>:
 * of the STLink (USB) programming port, it is enough to open a serial terminal on the host PC
 * (e.g., Hyperterminal or Putty on Windows, screen on Linux or Macos) to obtain a debugging console.
 * On linux/MacOS, this VCP shows up as /dev/ttyUSBSomething (ls /dev etc will provide you with its real name),
 * while on Windows, it's COMSOmething (from COM1 to ...).
 */
int __io_putchar(int ch){
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF); // beware blocking call! TODO => use DMA
 8004154:	1d39      	adds	r1, r7, #4
 8004156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800415a:	2201      	movs	r2, #1
 800415c:	4803      	ldr	r0, [pc, #12]	; (800416c <__io_putchar+0x20>)
 800415e:	f00c fb1b 	bl	8010798 <HAL_UART_Transmit>
	return ch;
 8004162:	687b      	ldr	r3, [r7, #4]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000bef0 	.word	0x2000bef0

08004170 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af04      	add	r7, sp, #16
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4603      	mov	r3, r0
 8004180:	72fb      	strb	r3, [r7, #11]
 8004182:	460b      	mov	r3, r1
 8004184:	813b      	strh	r3, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800418e:	7afb      	ldrb	r3, [r7, #11]
 8004190:	b299      	uxth	r1, r3
 8004192:	88f8      	ldrh	r0, [r7, #6]
 8004194:	893a      	ldrh	r2, [r7, #8]
 8004196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800419a:	9302      	str	r3, [sp, #8]
 800419c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4603      	mov	r3, r0
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f005 ffc8 	bl	800a13c <HAL_I2C_Mem_Read>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80041b6:	7afb      	ldrb	r3, [r7, #11]
 80041b8:	4619      	mov	r1, r3
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f832 	bl	8004224 <I2Cx_Error>
  }
  return status;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b08a      	sub	sp, #40	; 0x28
 80041ce:	af04      	add	r7, sp, #16
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	4608      	mov	r0, r1
 80041d4:	4611      	mov	r1, r2
 80041d6:	461a      	mov	r2, r3
 80041d8:	4603      	mov	r3, r0
 80041da:	72fb      	strb	r3, [r7, #11]
 80041dc:	460b      	mov	r3, r1
 80041de:	813b      	strh	r3, [r7, #8]
 80041e0:	4613      	mov	r3, r2
 80041e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	b299      	uxth	r1, r3
 80041ec:	88f8      	ldrh	r0, [r7, #6]
 80041ee:	893a      	ldrh	r2, [r7, #8]
 80041f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f4:	9302      	str	r3, [sp, #8]
 80041f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4603      	mov	r3, r0
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f005 fe87 	bl	8009f14 <HAL_I2C_Mem_Write>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004210:	7afb      	ldrb	r3, [r7, #11]
 8004212:	4619      	mov	r1, r3
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f805 	bl	8004224 <I2Cx_Error>
  }
  return status;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f005 fe3f 	bl	8009eb4 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f005 fdac 	bl	8009d94 <HAL_I2C_Init>
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <AUDIO_I2C_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value){
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af02      	add	r7, sp, #8
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
 800424e:	460b      	mov	r3, r1
 8004250:	80bb      	strh	r3, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	807b      	strh	r3, [r7, #2]

  uint16_t tmp = Value;
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800425a:	89fb      	ldrh	r3, [r7, #14]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	b29b      	uxth	r3, r3
 8004260:	807b      	strh	r3, [r7, #2]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004262:	89fb      	ldrh	r3, [r7, #14]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	b29b      	uxth	r3, r3
 8004268:	b21a      	sxth	r2, r3
 800426a:	887b      	ldrh	r3, [r7, #2]
 800426c:	b21b      	sxth	r3, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	b21b      	sxth	r3, r3
 8004272:	b29b      	uxth	r3, r3
 8004274:	807b      	strh	r3, [r7, #2]

  I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004276:	88ba      	ldrh	r2, [r7, #4]
 8004278:	79f9      	ldrb	r1, [r7, #7]
 800427a:	2302      	movs	r3, #2
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	1cbb      	adds	r3, r7, #2
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2302      	movs	r3, #2
 8004284:	4803      	ldr	r0, [pc, #12]	; (8004294 <AUDIO_I2C_Write+0x50>)
 8004286:	f7ff ffa0 	bl	80041ca <I2Cx_WriteMultiple>
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	2000b998 	.word	0x2000b998

08004298 <AUDIO_I2C_Read>:
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint8_t Addr, uint16_t Reg){
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af02      	add	r7, sp, #8
 800429e:	4603      	mov	r3, r0
 80042a0:	460a      	mov	r2, r1
 80042a2:	71fb      	strb	r3, [r7, #7]
 80042a4:	4613      	mov	r3, r2
 80042a6:	80bb      	strh	r3, [r7, #4]

  uint16_t read_value = 0, tmp = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	81bb      	strh	r3, [r7, #12]
 80042ac:	2300      	movs	r3, #0
 80042ae:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80042b0:	88ba      	ldrh	r2, [r7, #4]
 80042b2:	79f9      	ldrb	r1, [r7, #7]
 80042b4:	2302      	movs	r3, #2
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2302      	movs	r3, #2
 80042c0:	480a      	ldr	r0, [pc, #40]	; (80042ec <AUDIO_I2C_Read+0x54>)
 80042c2:	f7ff ff55 	bl	8004170 <I2Cx_ReadMultiple>

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80042c6:	89bb      	ldrh	r3, [r7, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80042cc:	89bb      	ldrh	r3, [r7, #12]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b21a      	sxth	r2, r3
 80042d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042d8:	4313      	orrs	r3, r2
 80042da:	b21b      	sxth	r3, r3
 80042dc:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 80042de:	89fb      	ldrh	r3, [r7, #14]
 80042e0:	81bb      	strh	r3, [r7, #12]

  return read_value;
 80042e2:	89bb      	ldrh	r3, [r7, #12]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000b998 	.word	0x2000b998

080042f0 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	4603      	mov	r3, r0
 80042f8:	460a      	mov	r2, r1
 80042fa:	71fb      	strb	r3, [r7, #7]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	b29a      	uxth	r2, r3
 8004304:	2301      	movs	r3, #1
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	1dbb      	adds	r3, r7, #6
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2301      	movs	r3, #1
 800430e:	2170      	movs	r1, #112	; 0x70
 8004310:	4803      	ldr	r0, [pc, #12]	; (8004320 <TS_I2C_Write+0x30>)
 8004312:	f7ff ff5a 	bl	80041ca <I2Cx_WriteMultiple>

}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	2000b998 	.word	0x2000b998

08004324 <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <LCD_Init+0x44>)
 800432a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432c:	2b02      	cmp	r3, #2
 800432e:	d002      	beq.n	8004336 <LCD_Init+0x12>
 8004330:	480e      	ldr	r0, [pc, #56]	; (800436c <LCD_Init+0x48>)
 8004332:	f7fe fbfb 	bl	8002b2c <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <LCD_Init+0x4c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	4619      	mov	r1, r3
 800433e:	480a      	ldr	r0, [pc, #40]	; (8004368 <LCD_Init+0x44>)
 8004340:	f006 fbd8 	bl	800aaf4 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8004344:	f000 f81a 	bl	800437c <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8004348:	480a      	ldr	r0, [pc, #40]	; (8004374 <LCD_Init+0x50>)
 800434a:	f000 f87d 	bl	8004448 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	f000 f861 	bl	8004418 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8004356:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800435a:	f000 f82d 	bl	80043b8 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 800435e:	4806      	ldr	r0, [pc, #24]	; (8004378 <LCD_Init+0x54>)
 8004360:	f000 f842 	bl	80043e8 <LCD_SetFillColor>


}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}
 8004368:	2000bdb0 	.word	0x2000bdb0
 800436c:	0801ae70 	.word	0x0801ae70
 8004370:	2000001c 	.word	0x2000001c
 8004374:	2000002c 	.word	0x2000002c
 8004378:	ffff0000 	.word	0xffff0000

0800437c <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <LCD_DisplayOn+0x30>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <LCD_DisplayOn+0x30>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004390:	2201      	movs	r2, #1
 8004392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004396:	4806      	ldr	r0, [pc, #24]	; (80043b0 <LCD_DisplayOn+0x34>)
 8004398:	f003 ff40 	bl	800821c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800439c:	2201      	movs	r2, #1
 800439e:	2108      	movs	r1, #8
 80043a0:	4804      	ldr	r0, [pc, #16]	; (80043b4 <LCD_DisplayOn+0x38>)
 80043a2:	f003 ff3b 	bl	800821c <HAL_GPIO_WritePin>
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000bdb0 	.word	0x2000bdb0
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40022800 	.word	0x40022800

080043b8 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 80043c0:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <LCD_SetStrokeColor+0x28>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <LCD_SetStrokeColor+0x28>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa4c 	bl	8004868 <ARGB888ToRGB565>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <LCD_SetStrokeColor+0x2c>)
 80043d6:	601a      	str	r2, [r3, #0]
#endif
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000350 	.word	0x20000350
 80043e4:	2000035c 	.word	0x2000035c

080043e8 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 80043f0:	4a07      	ldr	r2, [pc, #28]	; (8004410 <LCD_SetFillColor+0x28>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <LCD_SetFillColor+0x28>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa34 	bl	8004868 <ARGB888ToRGB565>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <LCD_SetFillColor+0x2c>)
 8004406:	601a      	str	r2, [r3, #0]
#endif
}
 8004408:	bf00      	nop
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000354 	.word	0x20000354
 8004414:	20000360 	.word	0x20000360

08004418 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <LCD_SetBackColor+0x28>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <LCD_SetBackColor+0x28>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fa1c 	bl	8004868 <ARGB888ToRGB565>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <LCD_SetBackColor+0x2c>)
 8004436:	601a      	str	r2, [r3, #0]
#endif
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000358 	.word	0x20000358
 8004444:	20000364 	.word	0x20000364

08004448 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <LCD_SetFont+0x1c>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6013      	str	r3, [r2, #0]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000368 	.word	0x20000368

08004468 <LCD_DrawPixel_Color>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_DrawPixel_Color(uint16_t Xpos, uint16_t Ypos, uint16_t Color)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	80fb      	strh	r3, [r7, #6]
 8004472:	460b      	mov	r3, r1
 8004474:	80bb      	strh	r3, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	807b      	strh	r3, [r7, #2]
	__DrawPixel(Xpos, Ypos, Color);
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <LCD_DrawPixel_Color+0x3c>)
 800447c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800447e:	88ba      	ldrh	r2, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	015b      	lsls	r3, r3, #5
 8004488:	461a      	mov	r2, r3
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	4413      	add	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	440b      	add	r3, r1
 8004492:	461a      	mov	r2, r3
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	8013      	strh	r3, [r2, #0]
	__CleanDCache();

}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	2000bdb0 	.word	0x2000bdb0

080044a8 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	460a      	mov	r2, r1
 80044b2:	80fb      	strh	r3, [r7, #6]
 80044b4:	4613      	mov	r3, r2
 80044b6:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <LCD_ErasePixel+0x3c>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <LCD_ErasePixel+0x40>)
 80044be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80044c0:	88ba      	ldrh	r2, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	015b      	lsls	r3, r3, #5
 80044ca:	461a      	mov	r2, r3
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	4413      	add	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	440b      	add	r3, r1
 80044d4:	b282      	uxth	r2, r0
 80044d6:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000364 	.word	0x20000364
 80044e8:	2000bdb0 	.word	0x2000bdb0

080044ec <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <LCD_Clear+0x28>)
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	4618      	mov	r0, r3
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <LCD_Clear+0x2c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	2300      	movs	r3, #0
 8004500:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004504:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004508:	f000 f976 	bl	80047f8 <LL_FillBuffer>
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	2000bdb0 	.word	0x2000bdb0
 8004518:	20000358 	.word	0x20000358

0800451c <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4623      	mov	r3, r4
 800452c:	80fb      	strh	r3, [r7, #6]
 800452e:	4603      	mov	r3, r0
 8004530:	80bb      	strh	r3, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	70fb      	strb	r3, [r7, #3]
 8004536:	4613      	mov	r3, r2
 8004538:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <LCD_DrawChar+0x5c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	3b20      	subs	r3, #32
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <LCD_DrawChar+0x5c>)
 8004546:	6809      	ldr	r1, [r1, #0]
 8004548:	88c9      	ldrh	r1, [r1, #6]
 800454a:	fb01 f103 	mul.w	r1, r1, r3
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <LCD_DrawChar+0x5c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	889b      	ldrh	r3, [r3, #4]
 8004554:	3307      	adds	r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	da00      	bge.n	800455c <LCD_DrawChar+0x40>
 800455a:	3307      	adds	r3, #7
 800455c:	10db      	asrs	r3, r3, #3
 800455e:	fb03 f301 	mul.w	r3, r3, r1
 8004562:	441a      	add	r2, r3
 8004564:	78bb      	ldrb	r3, [r7, #2]
 8004566:	88b9      	ldrh	r1, [r7, #4]
 8004568:	88f8      	ldrh	r0, [r7, #6]
 800456a:	f000 f89d 	bl	80046a8 <DrawChar>

}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bd90      	pop	{r4, r7, pc}
 8004576:	bf00      	nop
 8004578:	20000368 	.word	0x20000368

0800457c <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	60ba      	str	r2, [r7, #8]
 8004584:	461a      	mov	r2, r3
 8004586:	4603      	mov	r3, r0
 8004588:	81fb      	strh	r3, [r7, #14]
 800458a:	460b      	mov	r3, r1
 800458c:	81bb      	strh	r3, [r7, #12]
 800458e:	4613      	mov	r3, r2
 8004590:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004592:	2301      	movs	r3, #1
 8004594:	83fb      	strh	r3, [r7, #30]
 8004596:	2300      	movs	r3, #0
 8004598:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 80045a6:	e002      	b.n	80045ae <LCD_DrawString+0x32>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	617a      	str	r2, [r7, #20]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f6      	bne.n	80045a8 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 80045ba:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <LCD_DrawString+0x128>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	889b      	ldrh	r3, [r3, #4]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80045c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d014      	beq.n	80045fc <LCD_DrawString+0x80>
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	dc23      	bgt.n	800461e <LCD_DrawString+0xa2>
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d002      	beq.n	80045e0 <LCD_DrawString+0x64>
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d011      	beq.n	8004602 <LCD_DrawString+0x86>
 80045de:	e01e      	b.n	800461e <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	4a2f      	ldr	r2, [pc, #188]	; (80046a4 <LCD_DrawString+0x128>)
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	8892      	ldrh	r2, [r2, #4]
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	4413      	add	r3, r2
 80045f8:	83fb      	strh	r3, [r7, #30]
		break;
 80045fa:	e013      	b.n	8004624 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	83fb      	strh	r3, [r7, #30]
		break;
 8004600:	e010      	b.n	8004624 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	b29a      	uxth	r2, r3
 800460a:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <LCD_DrawString+0x128>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	889b      	ldrh	r3, [r3, #4]
 8004610:	fb12 f303 	smulbb	r3, r2, r3
 8004614:	b29a      	uxth	r2, r3
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	83fb      	strh	r3, [r7, #30]
		break;
 800461c:	e002      	b.n	8004624 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	83fb      	strh	r3, [r7, #30]
		break;
 8004622:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004624:	8bfb      	ldrh	r3, [r7, #30]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <LCD_DrawString+0xb6>
 800462a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800462e:	2b00      	cmp	r3, #0
 8004630:	da16      	bge.n	8004660 <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004636:	e013      	b.n	8004660 <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004640:	89b9      	ldrh	r1, [r7, #12]
 8004642:	8bf8      	ldrh	r0, [r7, #30]
 8004644:	f7ff ff6a 	bl	800451c <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <LCD_DrawString+0x128>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	889a      	ldrh	r2, [r3, #4]
 800464e:	8bfb      	ldrh	r3, [r7, #30]
 8004650:	4413      	add	r3, r2
 8004652:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3301      	adds	r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
		i++;
 800465a:	8bbb      	ldrh	r3, [r7, #28]
 800465c:	3301      	adds	r3, #1
 800465e:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2da      	uxtb	r2, r3
 800466e:	8bbb      	ldrh	r3, [r7, #28]
 8004670:	490c      	ldr	r1, [pc, #48]	; (80046a4 <LCD_DrawString+0x128>)
 8004672:	6809      	ldr	r1, [r1, #0]
 8004674:	8889      	ldrh	r1, [r1, #4]
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800467e:	b29b      	uxth	r3, r3
 8004680:	4908      	ldr	r1, [pc, #32]	; (80046a4 <LCD_DrawString+0x128>)
 8004682:	6809      	ldr	r1, [r1, #0]
 8004684:	8889      	ldrh	r1, [r1, #4]
 8004686:	428b      	cmp	r3, r1
 8004688:	bfac      	ite	ge
 800468a:	2301      	movge	r3, #1
 800468c:	2300      	movlt	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4013      	ands	r3, r2
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1cf      	bne.n	8004638 <LCD_DrawString+0xbc>
	}
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000368 	.word	0x20000368

080046a8 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b08b      	sub	sp, #44	; 0x2c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60ba      	str	r2, [r7, #8]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	81fb      	strh	r3, [r7, #14]
 80046b6:	460b      	mov	r3, r1
 80046b8:	81bb      	strh	r3, [r7, #12]
 80046ba:	4613      	mov	r3, r2
 80046bc:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 80046c6:	4b49      	ldr	r3, [pc, #292]	; (80047ec <DrawChar+0x144>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	88db      	ldrh	r3, [r3, #6]
 80046cc:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 80046ce:	4b47      	ldr	r3, [pc, #284]	; (80047ec <DrawChar+0x144>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	889b      	ldrh	r3, [r3, #4]
 80046d4:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 80046d6:	8b3b      	ldrh	r3, [r7, #24]
 80046d8:	3307      	adds	r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da00      	bge.n	80046e0 <DrawChar+0x38>
 80046de:	3307      	adds	r3, #7
 80046e0:	10db      	asrs	r3, r3, #3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	8b3b      	ldrh	r3, [r7, #24]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	e070      	b.n	80047d8 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80046f6:	8b3b      	ldrh	r3, [r7, #24]
 80046f8:	3307      	adds	r3, #7
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da00      	bge.n	8004700 <DrawChar+0x58>
 80046fe:	3307      	adds	r3, #7
 8004700:	10db      	asrs	r3, r3, #3
 8004702:	461a      	mov	r2, r3
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	fb03 f302 	mul.w	r3, r3, r2
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004710:	8b3b      	ldrh	r3, [r7, #24]
 8004712:	3307      	adds	r3, #7
 8004714:	2b00      	cmp	r3, #0
 8004716:	da00      	bge.n	800471a <DrawChar+0x72>
 8004718:	3307      	adds	r3, #7
 800471a:	10db      	asrs	r3, r3, #3
 800471c:	2b01      	cmp	r3, #1
 800471e:	d002      	beq.n	8004726 <DrawChar+0x7e>
 8004720:	2b02      	cmp	r3, #2
 8004722:	d004      	beq.n	800472e <DrawChar+0x86>
 8004724:	e00c      	b.n	8004740 <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	61fb      	str	r3, [r7, #28]
			break;
 800472c:	e016      	b.n	800475c <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	3201      	adds	r2, #1
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	61fb      	str	r3, [r7, #28]
			break;
 800473e:	e00d      	b.n	800475c <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	041a      	lsls	r2, r3, #16
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3301      	adds	r3, #1
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	4313      	orrs	r3, r2
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	3202      	adds	r2, #2
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	4313      	orrs	r3, r2
 8004758:	61fb      	str	r3, [r7, #28]
			break;
 800475a:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 800475c:	2300      	movs	r3, #0
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	e030      	b.n	80047c4 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8004762:	8b3a      	ldrh	r2, [r7, #24]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	1ad2      	subs	r2, r2, r3
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	4413      	add	r3, r2
 800476c:	3b01      	subs	r3, #1
 800476e:	2201      	movs	r2, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	461a      	mov	r2, r3
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d012      	beq.n	80047a4 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 800477e:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <DrawChar+0x148>)
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <DrawChar+0x14c>)
 8004784:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004786:	89ba      	ldrh	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	015b      	lsls	r3, r3, #5
 8004790:	461c      	mov	r4, r3
 8004792:	89fa      	ldrh	r2, [r7, #14]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	4413      	add	r3, r2
 8004798:	4423      	add	r3, r4
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	440b      	add	r3, r1
 800479e:	b282      	uxth	r2, r0
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e00c      	b.n	80047be <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d109      	bne.n	80047be <DrawChar+0x116>
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	4413      	add	r3, r2
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	89ba      	ldrh	r2, [r7, #12]
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fe75 	bl	80044a8 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	3301      	adds	r3, #1
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	8b3b      	ldrh	r3, [r7, #24]
 80047c6:	6a3a      	ldr	r2, [r7, #32]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3ca      	bcc.n	8004762 <DrawChar+0xba>
			}
		}
		Ypos++;
 80047cc:	89bb      	ldrh	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3301      	adds	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	8b7b      	ldrh	r3, [r7, #26]
 80047da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047dc:	429a      	cmp	r2, r3
 80047de:	d38a      	bcc.n	80046f6 <DrawChar+0x4e>
	}

	__CleanDCache();
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	372c      	adds	r7, #44	; 0x2c
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000368 	.word	0x20000368
 80047f0:	2000035c 	.word	0x2000035c
 80047f4:	2000bdb0 	.word	0x2000bdb0

080047f8 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <LL_FillBuffer+0x68>)
 8004808:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800480c:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <LL_FillBuffer+0x68>)
 8004810:	2202      	movs	r2, #2
 8004812:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8004814:	4a12      	ldr	r2, [pc, #72]	; (8004860 <LL_FillBuffer+0x68>)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <LL_FillBuffer+0x68>)
 800481c:	4a11      	ldr	r2, [pc, #68]	; (8004864 <LL_FillBuffer+0x6c>)
 800481e:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004820:	480f      	ldr	r0, [pc, #60]	; (8004860 <LL_FillBuffer+0x68>)
 8004822:	f002 fe8f 	bl	8007544 <HAL_DMA2D_Init>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d115      	bne.n	8004858 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 800482c:	2100      	movs	r1, #0
 800482e:	480c      	ldr	r0, [pc, #48]	; (8004860 <LL_FillBuffer+0x68>)
 8004830:	f003 f8f6 	bl	8007a20 <HAL_DMA2D_ConfigLayer>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10e      	bne.n	8004858 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	69b9      	ldr	r1, [r7, #24]
 8004844:	4806      	ldr	r0, [pc, #24]	; (8004860 <LL_FillBuffer+0x68>)
 8004846:	f002 fec7 	bl	80075d8 <HAL_DMA2D_Start>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8004850:	210a      	movs	r1, #10
 8004852:	4803      	ldr	r0, [pc, #12]	; (8004860 <LL_FillBuffer+0x68>)
 8004854:	f002 feeb 	bl	800762e <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	2000c0c4 	.word	0x2000c0c4
 8004864:	4002b000 	.word	0x4002b000

08004868 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0c1b      	lsrs	r3, r3, #16
 8004874:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8004880:	7d7b      	ldrb	r3, [r7, #21]
 8004882:	08db      	lsrs	r3, r3, #3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	b29b      	uxth	r3, r3
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 800488e:	7dbb      	ldrb	r3, [r7, #22]
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	015b      	lsls	r3, r3, #5
 8004896:	b29b      	uxth	r3, r3
 8004898:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800489c:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 800489e:	7dfb      	ldrb	r3, [r7, #23]
 80048a0:	08db      	lsrs	r3, r3, #3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	02db      	lsls	r3, r3, #11
 80048a6:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 80048a8:	89fa      	ldrh	r2, [r7, #14]
 80048aa:	8a3b      	ldrh	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	8a7b      	ldrh	r3, [r7, #18]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b29b      	uxth	r3, r3
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b090      	sub	sp, #64	; 0x40
 80048c8:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ce:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80048d0:	23eb      	movs	r3, #235	; 0xeb
 80048d2:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80048d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80048da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048de:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80048e4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80048ea:	230a      	movs	r3, #10
 80048ec:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80048f2:	2300      	movs	r3, #0
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80048f6:	2300      	movs	r3, #0
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004902:	463a      	mov	r2, r7
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	4619      	mov	r1, r3
 800490a:	4806      	ldr	r0, [pc, #24]	; (8004924 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 800490c:	f006 ff6c 	bl	800b7e8 <HAL_QSPI_MemoryMapped>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3740      	adds	r7, #64	; 0x40
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	2000c1d0 	.word	0x2000c1d0

08004928 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b090      	sub	sp, #64	; 0x40
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004934:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004936:	2366      	movs	r3, #102	; 0x66
 8004938:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800493a:	2300      	movs	r3, #0
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800493e:	2300      	movs	r3, #0
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800494a:	2300      	movs	r3, #0
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800494e:	2300      	movs	r3, #0
 8004950:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004952:	2300      	movs	r3, #0
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f006 fd33 	bl	800b3cc <HAL_QSPI_Command>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e019      	b.n	80049a4 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8004970:	2399      	movs	r3, #153	; 0x99
 8004972:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	f241 3288 	movw	r2, #5000	; 0x1388
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f006 fd24 	bl	800b3cc <HAL_QSPI_Command>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e00a      	b.n	80049a4 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800498e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8c7 	bl	8004b26 <QSPI_AutoPollingMemReady>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3740      	adds	r7, #64	; 0x40
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b094      	sub	sp, #80	; 0x50
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80049b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80049ba:	2385      	movs	r3, #133	; 0x85
 80049bc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049be:	2300      	movs	r3, #0
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80049c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80049d0:	2301      	movs	r3, #1
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049d8:	2300      	movs	r3, #0
 80049da:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049dc:	2300      	movs	r3, #0
 80049de:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f006 fcee 	bl	800b3cc <HAL_QSPI_Command>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e048      	b.n	8004a8c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049fa:	f107 030f 	add.w	r3, r7, #15
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f006 fdd6 	bl	800b5b6 <HAL_QSPI_Receive>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e03b      	b.n	8004a8c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f83d 	bl	8004a94 <QSPI_WriteEnable>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e033      	b.n	8004a8c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004a24:	2381      	movs	r3, #129	; 0x81
 8004a26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	b25b      	sxtb	r3, r3
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	b25a      	sxtb	r2, r3
 8004a32:	23f0      	movs	r3, #240	; 0xf0
 8004a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	fa93 f3a3 	rbit	r3, r3
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a40:	fab3 f383 	clz	r3, r3
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	4619      	mov	r1, r3
 8004a48:	230a      	movs	r3, #10
 8004a4a:	408b      	lsls	r3, r1
 8004a4c:	b25b      	sxtb	r3, r3
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a56:	f107 0310 	add.w	r3, r7, #16
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f006 fcb3 	bl	800b3cc <HAL_QSPI_Command>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e00d      	b.n	8004a8c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a70:	f107 030f 	add.w	r3, r7, #15
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f006 fd04 	bl	800b488 <HAL_QSPI_Transmit>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3750      	adds	r7, #80	; 0x50
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b096      	sub	sp, #88	; 0x58
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004aa2:	2306      	movs	r3, #6
 8004aa4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004aba:	2300      	movs	r3, #0
 8004abc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ac2:	f107 0320 	add.w	r3, r7, #32
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f006 fc7d 	bl	800b3cc <HAL_QSPI_Command>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e020      	b.n	8004b1e <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 8004adc:	2302      	movs	r3, #2
 8004ade:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004aec:	2310      	movs	r3, #16
 8004aee:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004af4:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004af6:	2305      	movs	r3, #5
 8004af8:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004afa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004afe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b00:	f107 0208 	add.w	r2, r7, #8
 8004b04:	f107 0120 	add.w	r1, r7, #32
 8004b08:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f006 fdf4 	bl	800b6fa <HAL_QSPI_AutoPolling>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3758      	adds	r7, #88	; 0x58
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b096      	sub	sp, #88	; 0x58
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004b36:	2305      	movs	r3, #5
 8004b38:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b50:	2300      	movs	r3, #0
 8004b52:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b54:	2300      	movs	r3, #0
 8004b56:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8004b64:	2301      	movs	r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8004b68:	2310      	movs	r3, #16
 8004b6a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b70:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004b72:	f107 0208 	add.w	r2, r7, #8
 8004b76:	f107 0120 	add.w	r1, r7, #32
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f006 fdbc 	bl	800b6fa <HAL_QSPI_AutoPolling>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3758      	adds	r7, #88	; 0x58
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <start_Audio_Processing>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void start_Audio_Processing(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size, uint16_t InputDevice, uint32_t AudioFreq) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	807b      	strh	r3, [r7, #2]

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bac:	d005      	beq.n	8004bba <start_Audio_Processing+0x22>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb4:	d001      	beq.n	8004bba <start_Audio_Processing+0x22>
		Error_Handler();
 8004bb6:	f7fe f823 	bl	8002c00 <Error_Handler>

	__HAL_RCC_SAI2_CLK_ENABLE();// bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8004bba:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <start_Audio_Processing+0xb4>)
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <start_Audio_Processing+0xb4>)
 8004bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bc6:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <start_Audio_Processing+0xb4>)
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC

	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8004bd2:	2034      	movs	r0, #52	; 0x34
 8004bd4:	f001 f820 	bl	8005c18 <wm8994_ReadID>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f648 1294 	movw	r2, #35220	; 0x8994
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d001      	beq.n	8004be6 <start_Audio_Processing+0x4e>
 8004be2:	f7fe f80d 	bl	8002c00 <Error_Handler>
	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 8004be6:	2034      	movs	r0, #52	; 0x34
 8004be8:	f001 f998 	bl	8005f1c <wm8994_Reset>
	/* Initialize the codec internal registers */
	wm8994_Init(AUDIO_I2C_ADDRESS, InputDevice | OUTPUT_DEVICE_HEADPHONE, 100, AudioFreq);
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	f043 0302 	orr.w	r3, r3, #2
 8004bf2:	b299      	uxth	r1, r3
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2264      	movs	r2, #100	; 0x64
 8004bf8:	2034      	movs	r0, #52	; 0x34
 8004bfa:	f000 f953 	bl	8004ea4 <wm8994_Init>
	/* set lower initial volume for Line In */
	if (InputDevice == INPUT_DEVICE_INPUT_LINE_1)
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c04:	d104      	bne.n	8004c10 <start_Audio_Processing+0x78>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 75);
 8004c06:	214b      	movs	r1, #75	; 0x4b
 8004c08:	2034      	movs	r0, #52	; 0x34
 8004c0a:	f001 f815 	bl	8005c38 <wm8994_SetVolume>
 8004c0e:	e007      	b.n	8004c20 <start_Audio_Processing+0x88>
	else if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c16:	d103      	bne.n	8004c20 <start_Audio_Processing+0x88>
		wm8994_SetVolume(AUDIO_I2C_ADDRESS, 200);
 8004c18:	21c8      	movs	r1, #200	; 0xc8
 8004c1a:	2034      	movs	r0, #52	; 0x34
 8004c1c:	f001 f80c 	bl	8005c38 <wm8994_SetVolume>
	// unmute CODEC output
	wm8994_SetMute(AUDIO_I2C_ADDRESS, AUDIO_MUTE_OFF);
 8004c20:	2100      	movs	r1, #0
 8004c22:	2034      	movs	r0, #52	; 0x34
 8004c24:	f001 f92c 	bl	8005e80 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4807      	ldr	r0, [pc, #28]	; (8004c50 <start_Audio_Processing+0xb8>)
 8004c32:	f009 f939 	bl	800dea8 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68f9      	ldr	r1, [r7, #12]
 8004c3e:	4805      	ldr	r0, [pc, #20]	; (8004c54 <start_Audio_Processing+0xbc>)
 8004c40:	f009 f882 	bl	800dd48 <HAL_SAI_Transmit_DMA>

}
 8004c44:	bf00      	nop
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	2000b910 	.word	0x2000b910
 8004c54:	2000bb3c 	.word	0x2000bb3c

08004c58 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_SAI_ErrorCallback+0x30>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d103      	bne.n	8004c98 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 8004c90:	4808      	ldr	r0, [pc, #32]	; (8004cb4 <HAL_SAI_ErrorCallback+0x34>)
 8004c92:	f014 fec7 	bl	8019a24 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8004c96:	e006      	b.n	8004ca6 <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a07      	ldr	r2, [pc, #28]	; (8004cb8 <HAL_SAI_ErrorCallback+0x38>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d102      	bne.n	8004ca6 <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 8004ca0:	4806      	ldr	r0, [pc, #24]	; (8004cbc <HAL_SAI_ErrorCallback+0x3c>)
 8004ca2:	f014 febf 	bl	8019a24 <puts>
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	2000bb3c 	.word	0x2000bb3c
 8004cb4:	0801aec0 	.word	0x0801aec0
 8004cb8:	2000b910 	.word	0x2000b910
 8004cbc:	0801aed0 	.word	0x0801aed0

08004cc0 <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004ccc:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004cd8:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce8:	4923      	ldr	r1, [pc, #140]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cea:	4824      	ldr	r0, [pc, #144]	; (8004d7c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004cec:	f00a fb59 	bl	800f3a2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f001 f9a1 	bl	8006038 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004cfe:	2210      	movs	r2, #16
 8004d00:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d02:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d12:	4919      	ldr	r1, [pc, #100]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d14:	4819      	ldr	r0, [pc, #100]	; (8004d7c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d16:	f00a fb44 	bl	800f3a2 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004d1a:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d22:	2210      	movs	r2, #16
 8004d24:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d28:	2208      	movs	r2, #8
 8004d2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d36:	4910      	ldr	r1, [pc, #64]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d38:	4810      	ldr	r0, [pc, #64]	; (8004d7c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d3a:	f00a fb32 	bl	800f3a2 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004d3e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004d42:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d46:	2204      	movs	r2, #4
 8004d48:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d5a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8004d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d60:	4905      	ldr	r1, [pc, #20]	; (8004d78 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8004d62:	4806      	ldr	r0, [pc, #24]	; (8004d7c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d64:	f00a fb1d 	bl	800f3a2 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4804      	ldr	r0, [pc, #16]	; (8004d7c <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8004d6c:	f00a fb44 	bl	800f3f8 <HAL_SDRAM_ProgramRefreshRate>
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	2000036c 	.word	0x2000036c
 8004d7c:	2000c19c 	.word	0x2000c19c

08004d80 <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8004d84:	20c8      	movs	r0, #200	; 0xc8
 8004d86:	f001 f957 	bl	8006038 <HAL_Delay>

	TS_DisableIT();
 8004d8a:	f000 f802 	bl	8004d92 <TS_DisableIT>

}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	4619      	mov	r1, r3
 8004da4:	20a4      	movs	r0, #164	; 0xa4
 8004da6:	f7ff faa3 	bl	80042f0 <TS_I2C_Write>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <MPU_Init>:
 */

#include "bsp/mpu.h"


void MPU_Init(){
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0

	HAL_MPU_Disable();
 8004db8:	f001 fcfe 	bl	80067b8 <HAL_MPU_Disable>
    /* Configure unused area of QSPI region as strongly ordered.
     * This is *important* to avoid unintentional fetches from illegal
     * addresses due to cache/speculation which would halt the MCU.
     */
    MPU_Region_InitTypeDef MPU_InitStruct;
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8004dc0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004dc4:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8004dc6:	231b      	movs	r3, #27
 8004dc8:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004de2:	2300      	movs	r3, #0
 8004de4:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004dea:	463b      	mov	r3, r7
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fd1b 	bl	8006828 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8004df6:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8004dfa:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8004dfc:	2317      	movs	r3, #23
 8004dfe:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004e00:	2303      	movs	r3, #3
 8004e02:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8004e10:	2303      	movs	r3, #3
 8004e12:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e20:	463b      	mov	r3, r7
 8004e22:	4618      	mov	r0, r3
 8004e24:	f001 fd00 	bl	8006828 <HAL_MPU_ConfigRegion>

    /* Enable D-cache on SDRAM (Write-through) */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8004e2c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004e30:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8004e32:	2316      	movs	r3, #22
 8004e34:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004e36:	2303      	movs	r3, #3
 8004e38:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e56:	463b      	mov	r3, r7
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fce5 	bl	8006828 <HAL_MPU_ConfigRegion>

    // RAM interne : (test)
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x20000000;
 8004e62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004e66:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8004e68:	2312      	movs	r3, #18
 8004e6a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004e84:	2300      	movs	r3, #0
 8004e86:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	733b      	strb	r3, [r7, #12]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 fcca 	bl	8006828 <HAL_MPU_ConfigRegion>


    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004e94:	2004      	movs	r0, #4
 8004e96:	f001 fca7 	bl	80067e8 <HAL_MPU_Enable>

}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	4603      	mov	r3, r0
 8004eae:	81fb      	strh	r3, [r7, #14]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	81bb      	strh	r3, [r7, #12]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004ebc:	89bb      	ldrh	r3, [r7, #12]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8004ec2:	89bb      	ldrh	r3, [r7, #12]
 8004ec4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ec8:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	837b      	strh	r3, [r7, #26]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8004ece:	89fb      	ldrh	r3, [r7, #14]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 f83f 	bl	8005f5c <CODEC_IO_Write>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004ee8:	89fb      	ldrh	r3, [r7, #14]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2200      	movs	r2, #0
 8004eee:	f640 0117 	movw	r1, #2071	; 0x817
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 f832 	bl	8005f5c <CODEC_IO_Write>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2200      	movs	r2, #0
 8004f08:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 f825 	bl	8005f5c <CODEC_IO_Write>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8004f1c:	89fb      	ldrh	r3, [r7, #14]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	226c      	movs	r2, #108	; 0x6c
 8004f22:	2139      	movs	r1, #57	; 0x39
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 f819 	bl	8005f5c <CODEC_IO_Write>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004f34:	8afb      	ldrh	r3, [r7, #22]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <wm8994_Init+0xb0>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8004f3a:	89fb      	ldrh	r3, [r7, #14]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2213      	movs	r2, #19
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 f80a 	bl	8005f5c <CODEC_IO_Write>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e00b      	b.n	8004f6c <wm8994_Init+0xc8>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004f54:	89fb      	ldrh	r3, [r7, #14]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2203      	movs	r2, #3
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fffd 	bl	8005f5c <CODEC_IO_Write>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  HAL_Delay(50);
 8004f6c:	2032      	movs	r0, #50	; 0x32
 8004f6e:	f001 f863 	bl	8006038 <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8004f72:	8b3b      	ldrh	r3, [r7, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 815f 	beq.w	8005238 <wm8994_Init+0x394>
  {
    outputEnabled = 1;
 8004f7a:	4bae      	ldr	r3, [pc, #696]	; (8005234 <wm8994_Init+0x390>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8004f80:	8b3b      	ldrh	r3, [r7, #24]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	f000 808c 	beq.w	80050a0 <wm8994_Init+0x1fc>
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	f300 8111 	bgt.w	80051b0 <wm8994_Init+0x30c>
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d002      	beq.n	8004f98 <wm8994_Init+0xf4>
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d042      	beq.n	800501c <wm8994_Init+0x178>
 8004f96:	e10b      	b.n	80051b0 <wm8994_Init+0x30c>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004f98:	89fb      	ldrh	r3, [r7, #14]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8004fa0:	2105      	movs	r1, #5
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 ffda 	bl	8005f5c <CODEC_IO_Write>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	4413      	add	r3, r2
 8004fb0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8004fb2:	89fb      	ldrh	r3, [r7, #14]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f240 6101 	movw	r1, #1537	; 0x601
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 ffcd 	bl	8005f5c <CODEC_IO_Write>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004fcc:	89fb      	ldrh	r3, [r7, #14]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f240 6102 	movw	r1, #1538	; 0x602
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ffc0 	bl	8005f5c <CODEC_IO_Write>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461a      	mov	r2, r3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004fe6:	89fb      	ldrh	r3, [r7, #14]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2202      	movs	r2, #2
 8004fec:	f240 6104 	movw	r1, #1540	; 0x604
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 ffb3 	bl	8005f5c <CODEC_IO_Write>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005000:	89fb      	ldrh	r3, [r7, #14]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2202      	movs	r2, #2
 8005006:	f240 6105 	movw	r1, #1541	; 0x605
 800500a:	4618      	mov	r0, r3
 800500c:	f000 ffa6 	bl	8005f5c <CODEC_IO_Write>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	61fb      	str	r3, [r7, #28]
      break;
 800501a:	e110      	b.n	800523e <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800501c:	89fb      	ldrh	r3, [r7, #14]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f240 3203 	movw	r2, #771	; 0x303
 8005024:	2105      	movs	r1, #5
 8005026:	4618      	mov	r0, r3
 8005028:	f000 ff98 	bl	8005f5c <CODEC_IO_Write>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005036:	89fb      	ldrh	r3, [r7, #14]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2201      	movs	r2, #1
 800503c:	f240 6101 	movw	r1, #1537	; 0x601
 8005040:	4618      	mov	r0, r3
 8005042:	f000 ff8b 	bl	8005f5c <CODEC_IO_Write>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005050:	89fb      	ldrh	r3, [r7, #14]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2201      	movs	r2, #1
 8005056:	f240 6102 	movw	r1, #1538	; 0x602
 800505a:	4618      	mov	r0, r3
 800505c:	f000 ff7e 	bl	8005f5c <CODEC_IO_Write>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800506a:	89fb      	ldrh	r3, [r7, #14]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2200      	movs	r2, #0
 8005070:	f240 6104 	movw	r1, #1540	; 0x604
 8005074:	4618      	mov	r0, r3
 8005076:	f000 ff71 	bl	8005f5c <CODEC_IO_Write>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005084:	89fb      	ldrh	r3, [r7, #14]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2200      	movs	r2, #0
 800508a:	f240 6105 	movw	r1, #1541	; 0x605
 800508e:	4618      	mov	r0, r3
 8005090:	f000 ff64 	bl	8005f5c <CODEC_IO_Write>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	61fb      	str	r3, [r7, #28]
      break;
 800509e:	e0ce      	b.n	800523e <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80050a0:	8afb      	ldrh	r3, [r7, #22]
 80050a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a6:	d141      	bne.n	800512c <wm8994_Init+0x288>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80050a8:	89fb      	ldrh	r3, [r7, #14]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f640 720f 	movw	r2, #3855	; 0xf0f
 80050b0:	2105      	movs	r1, #5
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 ff52 	bl	8005f5c <CODEC_IO_Write>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80050c2:	89fb      	ldrh	r3, [r7, #14]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2203      	movs	r2, #3
 80050c8:	f240 6101 	movw	r1, #1537	; 0x601
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 ff45 	bl	8005f5c <CODEC_IO_Write>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461a      	mov	r2, r3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80050dc:	89fb      	ldrh	r3, [r7, #14]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2203      	movs	r2, #3
 80050e2:	f240 6102 	movw	r1, #1538	; 0x602
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 ff38 	bl	8005f5c <CODEC_IO_Write>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	4413      	add	r3, r2
 80050f4:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80050f6:	89fb      	ldrh	r3, [r7, #14]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2203      	movs	r2, #3
 80050fc:	f240 6104 	movw	r1, #1540	; 0x604
 8005100:	4618      	mov	r0, r3
 8005102:	f000 ff2b 	bl	8005f5c <CODEC_IO_Write>
 8005106:	4603      	mov	r3, r0
 8005108:	461a      	mov	r2, r3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	61fb      	str	r3, [r7, #28]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2203      	movs	r2, #3
 8005116:	f240 6105 	movw	r1, #1541	; 0x605
 800511a:	4618      	mov	r0, r3
 800511c:	f000 ff1e 	bl	8005f5c <CODEC_IO_Write>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
      }
      break;
 800512a:	e088      	b.n	800523e <wm8994_Init+0x39a>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005134:	2105      	movs	r1, #5
 8005136:	4618      	mov	r0, r3
 8005138:	f000 ff10 	bl	8005f5c <CODEC_IO_Write>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005146:	89fb      	ldrh	r3, [r7, #14]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2201      	movs	r2, #1
 800514c:	f240 6101 	movw	r1, #1537	; 0x601
 8005150:	4618      	mov	r0, r3
 8005152:	f000 ff03 	bl	8005f5c <CODEC_IO_Write>
 8005156:	4603      	mov	r3, r0
 8005158:	461a      	mov	r2, r3
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005160:	89fb      	ldrh	r3, [r7, #14]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2201      	movs	r2, #1
 8005166:	f240 6102 	movw	r1, #1538	; 0x602
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fef6 	bl	8005f5c <CODEC_IO_Write>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2202      	movs	r2, #2
 8005180:	f240 6104 	movw	r1, #1540	; 0x604
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fee9 	bl	8005f5c <CODEC_IO_Write>
 800518a:	4603      	mov	r3, r0
 800518c:	461a      	mov	r2, r3
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005194:	89fb      	ldrh	r3, [r7, #14]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2202      	movs	r2, #2
 800519a:	f240 6105 	movw	r1, #1541	; 0x605
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fedc 	bl	8005f5c <CODEC_IO_Write>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	61fb      	str	r3, [r7, #28]
      break;
 80051ae:	e046      	b.n	800523e <wm8994_Init+0x39a>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80051b0:	89fb      	ldrh	r3, [r7, #14]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f240 3203 	movw	r2, #771	; 0x303
 80051b8:	2105      	movs	r1, #5
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fece 	bl	8005f5c <CODEC_IO_Write>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80051ca:	89fb      	ldrh	r3, [r7, #14]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2201      	movs	r2, #1
 80051d0:	f240 6101 	movw	r1, #1537	; 0x601
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fec1 	bl	8005f5c <CODEC_IO_Write>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2201      	movs	r2, #1
 80051ea:	f240 6102 	movw	r1, #1538	; 0x602
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 feb4 	bl	8005f5c <CODEC_IO_Write>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80051fe:	89fb      	ldrh	r3, [r7, #14]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2200      	movs	r2, #0
 8005204:	f240 6104 	movw	r1, #1540	; 0x604
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fea7 	bl	8005f5c <CODEC_IO_Write>
 800520e:	4603      	mov	r3, r0
 8005210:	461a      	mov	r2, r3
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005218:	89fb      	ldrh	r3, [r7, #14]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2200      	movs	r2, #0
 800521e:	f240 6105 	movw	r1, #1541	; 0x605
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fe9a 	bl	8005f5c <CODEC_IO_Write>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	61fb      	str	r3, [r7, #28]
      break;
 8005232:	e004      	b.n	800523e <wm8994_Init+0x39a>
 8005234:	2000037c 	.word	0x2000037c
    }
  }
  else
  {
    outputEnabled = 0;
 8005238:	4b99      	ldr	r3, [pc, #612]	; (80054a0 <wm8994_Init+0x5fc>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800523e:	8afb      	ldrh	r3, [r7, #22]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 81ab 	beq.w	800559c <wm8994_Init+0x6f8>
  {
    inputEnabled = 1;
 8005246:	4b97      	ldr	r3, [pc, #604]	; (80054a4 <wm8994_Init+0x600>)
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800524c:	8afb      	ldrh	r3, [r7, #22]
 800524e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005252:	f000 8129 	beq.w	80054a8 <wm8994_Init+0x604>
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	f300 819b 	bgt.w	8005594 <wm8994_Init+0x6f0>
 800525e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005262:	d05a      	beq.n	800531a <wm8994_Init+0x476>
 8005264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005268:	f300 8194 	bgt.w	8005594 <wm8994_Init+0x6f0>
 800526c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005270:	f000 80c6 	beq.w	8005400 <wm8994_Init+0x55c>
 8005274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005278:	f040 818c 	bne.w	8005594 <wm8994_Init+0x6f0>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8005284:	2104      	movs	r1, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fe68 	bl	8005f5c <CODEC_IO_Write>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8005296:	89fb      	ldrh	r3, [r7, #14]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	22db      	movs	r2, #219	; 0xdb
 800529c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fe5b 	bl	8005f5c <CODEC_IO_Write>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461a      	mov	r2, r3
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80052b0:	89fb      	ldrh	r3, [r7, #14]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80052b8:	2102      	movs	r1, #2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fe4e 	bl	8005f5c <CODEC_IO_Write>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80052ca:	89fb      	ldrh	r3, [r7, #14]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2202      	movs	r2, #2
 80052d0:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fe41 	bl	8005f5c <CODEC_IO_Write>
 80052da:	4603      	mov	r3, r0
 80052dc:	461a      	mov	r2, r3
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2202      	movs	r2, #2
 80052ea:	f240 6109 	movw	r1, #1545	; 0x609
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fe34 	bl	8005f5c <CODEC_IO_Write>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80052fe:	89fb      	ldrh	r3, [r7, #14]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	220e      	movs	r2, #14
 8005304:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fe27 	bl	8005f5c <CODEC_IO_Write>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	61fb      	str	r3, [r7, #28]
      break;
 8005318:	e143      	b.n	80055a2 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800531a:	89fb      	ldrh	r3, [r7, #14]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2211      	movs	r2, #17
 8005320:	2128      	movs	r1, #40	; 0x28
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fe1a 	bl	8005f5c <CODEC_IO_Write>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2220      	movs	r2, #32
 8005338:	2129      	movs	r1, #41	; 0x29
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fe0e 	bl	8005f5c <CODEC_IO_Write>
 8005340:	4603      	mov	r3, r0
 8005342:	461a      	mov	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 800534a:	89fb      	ldrh	r3, [r7, #14]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2220      	movs	r2, #32
 8005350:	212a      	movs	r1, #42	; 0x2a
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fe02 	bl	8005f5c <CODEC_IO_Write>
 8005358:	4603      	mov	r3, r0
 800535a:	461a      	mov	r2, r3
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f240 3203 	movw	r2, #771	; 0x303
 800536a:	2104      	movs	r1, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fdf5 	bl	8005f5c <CODEC_IO_Write>
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800537c:	89fb      	ldrh	r3, [r7, #14]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	22db      	movs	r2, #219	; 0xdb
 8005382:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fde8 	bl	8005f5c <CODEC_IO_Write>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005396:	89fb      	ldrh	r3, [r7, #14]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f246 3250 	movw	r2, #25424	; 0x6350
 800539e:	2102      	movs	r1, #2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fddb 	bl	8005f5c <CODEC_IO_Write>
 80053a6:	4603      	mov	r3, r0
 80053a8:	461a      	mov	r2, r3
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80053b0:	89fb      	ldrh	r3, [r7, #14]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2202      	movs	r2, #2
 80053b6:	f240 6106 	movw	r1, #1542	; 0x606
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fdce 	bl	8005f5c <CODEC_IO_Write>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80053ca:	89fb      	ldrh	r3, [r7, #14]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2202      	movs	r2, #2
 80053d0:	f240 6107 	movw	r1, #1543	; 0x607
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fdc1 	bl	8005f5c <CODEC_IO_Write>
 80053da:	4603      	mov	r3, r0
 80053dc:	461a      	mov	r2, r3
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	220d      	movs	r2, #13
 80053ea:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fdb4 	bl	8005f5c <CODEC_IO_Write>
 80053f4:	4603      	mov	r3, r0
 80053f6:	461a      	mov	r2, r3
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	61fb      	str	r3, [r7, #28]
      break;
 80053fe:	e0d0      	b.n	80055a2 <wm8994_Init+0x6fe>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8005400:	89fb      	ldrh	r3, [r7, #14]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8005408:	2104      	movs	r1, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fda6 	bl	8005f5c <CODEC_IO_Write>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800541a:	89fb      	ldrh	r3, [r7, #14]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	22db      	movs	r2, #219	; 0xdb
 8005420:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fd99 	bl	8005f5c <CODEC_IO_Write>
 800542a:	4603      	mov	r3, r0
 800542c:	461a      	mov	r2, r3
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005434:	89fb      	ldrh	r3, [r7, #14]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f246 3250 	movw	r2, #25424	; 0x6350
 800543c:	2102      	movs	r1, #2
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fd8c 	bl	8005f5c <CODEC_IO_Write>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800544e:	89fb      	ldrh	r3, [r7, #14]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2202      	movs	r2, #2
 8005454:	f240 6106 	movw	r1, #1542	; 0x606
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fd7f 	bl	8005f5c <CODEC_IO_Write>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005468:	89fb      	ldrh	r3, [r7, #14]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2202      	movs	r2, #2
 800546e:	f240 6107 	movw	r1, #1543	; 0x607
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fd72 	bl	8005f5c <CODEC_IO_Write>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005482:	89fb      	ldrh	r3, [r7, #14]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	220d      	movs	r2, #13
 8005488:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fd65 	bl	8005f5c <CODEC_IO_Write>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	61fb      	str	r3, [r7, #28]
      break;
 800549c:	e081      	b.n	80055a2 <wm8994_Init+0x6fe>
 800549e:	bf00      	nop
 80054a0:	2000037c 	.word	0x2000037c
 80054a4:	20000380 	.word	0x20000380
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80054a8:	89fb      	ldrh	r3, [r7, #14]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f640 723c 	movw	r2, #3900	; 0xf3c
 80054b0:	2104      	movs	r1, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fd52 	bl	8005f5c <CODEC_IO_Write>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	4413      	add	r3, r2
 80054c0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80054c2:	89fb      	ldrh	r3, [r7, #14]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	22db      	movs	r2, #219	; 0xdb
 80054c8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fd45 	bl	8005f5c <CODEC_IO_Write>
 80054d2:	4603      	mov	r3, r0
 80054d4:	461a      	mov	r2, r3
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80054dc:	89fb      	ldrh	r3, [r7, #14]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	22db      	movs	r2, #219	; 0xdb
 80054e2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fd38 	bl	8005f5c <CODEC_IO_Write>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80054f6:	89fb      	ldrh	r3, [r7, #14]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80054fe:	2102      	movs	r1, #2
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fd2b 	bl	8005f5c <CODEC_IO_Write>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005510:	89fb      	ldrh	r3, [r7, #14]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2202      	movs	r2, #2
 8005516:	f240 6106 	movw	r1, #1542	; 0x606
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fd1e 	bl	8005f5c <CODEC_IO_Write>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800552a:	89fb      	ldrh	r3, [r7, #14]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2202      	movs	r2, #2
 8005530:	f240 6107 	movw	r1, #1543	; 0x607
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fd11 	bl	8005f5c <CODEC_IO_Write>
 800553a:	4603      	mov	r3, r0
 800553c:	461a      	mov	r2, r3
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005544:	89fb      	ldrh	r3, [r7, #14]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2202      	movs	r2, #2
 800554a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fd04 	bl	8005f5c <CODEC_IO_Write>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800555e:	89fb      	ldrh	r3, [r7, #14]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2202      	movs	r2, #2
 8005564:	f240 6109 	movw	r1, #1545	; 0x609
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fcf7 	bl	8005f5c <CODEC_IO_Write>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	220d      	movs	r2, #13
 800557e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fcea 	bl	8005f5c <CODEC_IO_Write>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	61fb      	str	r3, [r7, #28]
      break;
 8005592:	e006      	b.n	80055a2 <wm8994_Init+0x6fe>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
      break;
 800559a:	e002      	b.n	80055a2 <wm8994_Init+0x6fe>
    }
  }
  else
  {
    inputEnabled = 0;
 800559c:	4ba4      	ldr	r3, [pc, #656]	; (8005830 <wm8994_Init+0x98c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4aa3      	ldr	r2, [pc, #652]	; (8005834 <wm8994_Init+0x990>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d079      	beq.n	800569e <wm8994_Init+0x7fa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4aa1      	ldr	r2, [pc, #644]	; (8005834 <wm8994_Init+0x990>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	f200 80ad 	bhi.w	800570e <wm8994_Init+0x86a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d061      	beq.n	8005682 <wm8994_Init+0x7de>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80055c4:	4293      	cmp	r3, r2
 80055c6:	f200 80a2 	bhi.w	800570e <wm8994_Init+0x86a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80055d0:	4293      	cmp	r3, r2
 80055d2:	f000 808e 	beq.w	80056f2 <wm8994_Init+0x84e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80055dc:	4293      	cmp	r3, r2
 80055de:	f200 8096 	bhi.w	800570e <wm8994_Init+0x86a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80055e8:	d03d      	beq.n	8005666 <wm8994_Init+0x7c2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80055f0:	f200 808d 	bhi.w	800570e <wm8994_Init+0x86a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f245 6222 	movw	r2, #22050	; 0x5622
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d06b      	beq.n	80056d6 <wm8994_Init+0x832>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f245 6222 	movw	r2, #22050	; 0x5622
 8005604:	4293      	cmp	r3, r2
 8005606:	f200 8082 	bhi.w	800570e <wm8994_Init+0x86a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005610:	d01b      	beq.n	800564a <wm8994_Init+0x7a6>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005618:	d879      	bhi.n	800570e <wm8994_Init+0x86a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005620:	d005      	beq.n	800562e <wm8994_Init+0x78a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005628:	4293      	cmp	r3, r2
 800562a:	d046      	beq.n	80056ba <wm8994_Init+0x816>
 800562c:	e06f      	b.n	800570e <wm8994_Init+0x86a>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2203      	movs	r2, #3
 8005634:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fc8f 	bl	8005f5c <CODEC_IO_Write>
 800563e:	4603      	mov	r3, r0
 8005640:	461a      	mov	r2, r3
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]
    break;
 8005648:	e06f      	b.n	800572a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800564a:	89fb      	ldrh	r3, [r7, #14]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2233      	movs	r2, #51	; 0x33
 8005650:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fc81 	bl	8005f5c <CODEC_IO_Write>
 800565a:	4603      	mov	r3, r0
 800565c:	461a      	mov	r2, r3
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	61fb      	str	r3, [r7, #28]
    break;
 8005664:	e061      	b.n	800572a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2263      	movs	r2, #99	; 0x63
 800566c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fc73 	bl	8005f5c <CODEC_IO_Write>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]
    break;
 8005680:	e053      	b.n	800572a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2283      	movs	r2, #131	; 0x83
 8005688:	f44f 7104 	mov.w	r1, #528	; 0x210
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fc65 	bl	8005f5c <CODEC_IO_Write>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	61fb      	str	r3, [r7, #28]
    break;
 800569c:	e045      	b.n	800572a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	22a3      	movs	r2, #163	; 0xa3
 80056a4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fc57 	bl	8005f5c <CODEC_IO_Write>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	61fb      	str	r3, [r7, #28]
    break;
 80056b8:	e037      	b.n	800572a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80056ba:	89fb      	ldrh	r3, [r7, #14]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2213      	movs	r2, #19
 80056c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fc49 	bl	8005f5c <CODEC_IO_Write>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	61fb      	str	r3, [r7, #28]
    break;
 80056d4:	e029      	b.n	800572a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80056d6:	89fb      	ldrh	r3, [r7, #14]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2243      	movs	r2, #67	; 0x43
 80056dc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fc3b 	bl	8005f5c <CODEC_IO_Write>
 80056e6:	4603      	mov	r3, r0
 80056e8:	461a      	mov	r2, r3
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	61fb      	str	r3, [r7, #28]
    break;
 80056f0:	e01b      	b.n	800572a <wm8994_Init+0x886>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80056f2:	89fb      	ldrh	r3, [r7, #14]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2273      	movs	r2, #115	; 0x73
 80056f8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fc2d 	bl	8005f5c <CODEC_IO_Write>
 8005702:	4603      	mov	r3, r0
 8005704:	461a      	mov	r2, r3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	61fb      	str	r3, [r7, #28]
    break;
 800570c:	e00d      	b.n	800572a <wm8994_Init+0x886>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800570e:	89fb      	ldrh	r3, [r7, #14]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2283      	movs	r2, #131	; 0x83
 8005714:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fc1f 	bl	8005f5c <CODEC_IO_Write>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	61fb      	str	r3, [r7, #28]
    break;
 8005728:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800572a:	8afb      	ldrh	r3, [r7, #22]
 800572c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005730:	d10e      	bne.n	8005750 <wm8994_Init+0x8ac>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f244 0218 	movw	r2, #16408	; 0x4018
 800573a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fc0c 	bl	8005f5c <CODEC_IO_Write>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e00d      	b.n	800576c <wm8994_Init+0x8c8>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8005750:	89fb      	ldrh	r3, [r7, #14]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f244 0210 	movw	r2, #16400	; 0x4010
 8005758:	f44f 7140 	mov.w	r1, #768	; 0x300
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fbfd 	bl	8005f5c <CODEC_IO_Write>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	61fb      	str	r3, [r7, #28]
  }

  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2200      	movs	r2, #0
 8005772:	f240 3102 	movw	r1, #770	; 0x302
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fbf0 	bl	8005f5c <CODEC_IO_Write>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	61fb      	str	r3, [r7, #28]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8005786:	89fb      	ldrh	r3, [r7, #14]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	220a      	movs	r2, #10
 800578c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fbe3 	bl	8005f5c <CODEC_IO_Write>
 8005796:	4603      	mov	r3, r0
 8005798:	461a      	mov	r2, r3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2201      	movs	r2, #1
 80057a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fbd6 	bl	8005f5c <CODEC_IO_Write>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80057ba:	8b3b      	ldrh	r3, [r7, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 817b 	beq.w	8005ab8 <wm8994_Init+0xc14>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80057c2:	8b3b      	ldrh	r3, [r7, #24]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d157      	bne.n	8005878 <wm8994_Init+0x9d4>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d0:	212d      	movs	r1, #45	; 0x2d
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fbc2 	bl	8005f5c <CODEC_IO_Write>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	61fb      	str	r3, [r7, #28]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);
 80057e2:	89fb      	ldrh	r3, [r7, #14]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ea:	212e      	movs	r1, #46	; 0x2e
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fbb5 	bl	8005f5c <CODEC_IO_Write>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	61fb      	str	r3, [r7, #28]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 80057fc:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <wm8994_Init+0x994>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <wm8994_Init+0x998>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800580c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fba3 	bl	8005f5c <CODEC_IO_Write>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	61fb      	str	r3, [r7, #28]

        ColdStartup=0;
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <wm8994_Init+0x994>)
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8005826:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800582a:	f000 fc05 	bl	8006038 <HAL_Delay>
 800582e:	e016      	b.n	800585e <wm8994_Init+0x9ba>
 8005830:	20000380 	.word	0x20000380
 8005834:	00017700 	.word	0x00017700
 8005838:	20000020 	.word	0x20000020
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f248 1208 	movw	r2, #33032	; 0x8108
 8005844:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fb87 	bl	8005f5c <CODEC_IO_Write>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        HAL_Delay(50);
 8005858:	2032      	movs	r0, #50	; 0x32
 800585a:	f000 fbed 	bl	8006038 <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800585e:	89fb      	ldrh	r3, [r7, #14]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2200      	movs	r2, #0
 8005864:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fb77 	bl	8005f5c <CODEC_IO_Write>
 800586e:	4603      	mov	r3, r0
 8005870:	461a      	mov	r2, r3
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8005878:	89fb      	ldrh	r3, [r7, #14]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005880:	2103      	movs	r1, #3
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb6a 	bl	8005f5c <CODEC_IO_Write>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2200      	movs	r2, #0
 8005898:	2122      	movs	r1, #34	; 0x22
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fb5e 	bl	8005f5c <CODEC_IO_Write>
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2200      	movs	r2, #0
 80058b0:	2123      	movs	r1, #35	; 0x23
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fb52 	bl	8005f5c <CODEC_IO_Write>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461a      	mov	r2, r3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	4413      	add	r3, r2
 80058c0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80058c2:	89fb      	ldrh	r3, [r7, #14]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80058ca:	2136      	movs	r1, #54	; 0x36
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fb45 	bl	8005f5c <CODEC_IO_Write>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80058dc:	89fb      	ldrh	r3, [r7, #14]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f243 0203 	movw	r2, #12291	; 0x3003
 80058e4:	2101      	movs	r1, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb38 	bl	8005f5c <CODEC_IO_Write>
 80058ec:	4603      	mov	r3, r0
 80058ee:	461a      	mov	r2, r3
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80058f6:	8afb      	ldrh	r3, [r7, #22]
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fc:	d10d      	bne.n	800591a <wm8994_Init+0xa76>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f240 2205 	movw	r2, #517	; 0x205
 8005906:	2151      	movs	r1, #81	; 0x51
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fb27 	bl	8005f5c <CODEC_IO_Write>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e00b      	b.n	8005932 <wm8994_Init+0xa8e>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 800591a:	89fb      	ldrh	r3, [r7, #14]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2205      	movs	r2, #5
 8005920:	2151      	movs	r1, #81	; 0x51
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fb1a 	bl	8005f5c <CODEC_IO_Write>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8005932:	8b7b      	ldrh	r3, [r7, #26]
 8005934:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005938:	f043 0303 	orr.w	r3, r3, #3
 800593c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	8b7a      	ldrh	r2, [r7, #26]
 8005944:	2101      	movs	r1, #1
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fb08 	bl	8005f5c <CODEC_IO_Write>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8005956:	89fb      	ldrh	r3, [r7, #14]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2222      	movs	r2, #34	; 0x22
 800595c:	2160      	movs	r1, #96	; 0x60
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fafc 	bl	8005f5c <CODEC_IO_Write>
 8005964:	4603      	mov	r3, r0
 8005966:	461a      	mov	r2, r3
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800596e:	89fb      	ldrh	r3, [r7, #14]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f649 7225 	movw	r2, #40741	; 0x9f25
 8005976:	214c      	movs	r1, #76	; 0x4c
 8005978:	4618      	mov	r0, r3
 800597a:	f000 faef 	bl	8005f5c <CODEC_IO_Write>
 800597e:	4603      	mov	r3, r0
 8005980:	461a      	mov	r2, r3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(15);
 8005988:	200f      	movs	r0, #15
 800598a:	f000 fb55 	bl	8006038 <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800598e:	89fb      	ldrh	r3, [r7, #14]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2201      	movs	r2, #1
 8005994:	212d      	movs	r1, #45	; 0x2d
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fae0 	bl	8005f5c <CODEC_IO_Write>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	4413      	add	r3, r2
 80059a4:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80059a6:	89fb      	ldrh	r3, [r7, #14]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2201      	movs	r2, #1
 80059ac:	212e      	movs	r1, #46	; 0x2e
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fad4 	bl	8005f5c <CODEC_IO_Write>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80059be:	89fb      	ldrh	r3, [r7, #14]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f44f 724c 	mov.w	r2, #816	; 0x330
 80059c6:	2103      	movs	r1, #3
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fac7 	bl	8005f5c <CODEC_IO_Write>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80059d8:	89fb      	ldrh	r3, [r7, #14]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2233      	movs	r2, #51	; 0x33
 80059de:	2154      	movs	r1, #84	; 0x54
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fabb 	bl	8005f5c <CODEC_IO_Write>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    HAL_Delay(257);
 80059f0:	f240 1001 	movw	r0, #257	; 0x101
 80059f4:	f000 fb20 	bl	8006038 <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80059f8:	89fb      	ldrh	r3, [r7, #14]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	22ee      	movs	r2, #238	; 0xee
 80059fe:	2160      	movs	r1, #96	; 0x60
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 faab 	bl	8005f5c <CODEC_IO_Write>
 8005a06:	4603      	mov	r3, r0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8005a10:	89fb      	ldrh	r3, [r7, #14]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	22c0      	movs	r2, #192	; 0xc0
 8005a16:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fa9e 	bl	8005f5c <CODEC_IO_Write>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8005a2a:	89fb      	ldrh	r3, [r7, #14]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	22c0      	movs	r2, #192	; 0xc0
 8005a30:	f240 6111 	movw	r1, #1553	; 0x611
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fa91 	bl	8005f5c <CODEC_IO_Write>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005a44:	89fb      	ldrh	r3, [r7, #14]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2210      	movs	r2, #16
 8005a4a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fa84 	bl	8005f5c <CODEC_IO_Write>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8005a5e:	89fb      	ldrh	r3, [r7, #14]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	22c0      	movs	r2, #192	; 0xc0
 8005a64:	f240 6112 	movw	r1, #1554	; 0x612
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fa77 	bl	8005f5c <CODEC_IO_Write>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461a      	mov	r2, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8005a78:	89fb      	ldrh	r3, [r7, #14]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	22c0      	movs	r2, #192	; 0xc0
 8005a7e:	f240 6113 	movw	r1, #1555	; 0x613
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fa6a 	bl	8005f5c <CODEC_IO_Write>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005a92:	89fb      	ldrh	r3, [r7, #14]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2210      	movs	r2, #16
 8005a98:	f240 4122 	movw	r1, #1058	; 0x422
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fa5d 	bl	8005f5c <CODEC_IO_Write>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	61fb      	str	r3, [r7, #28]

    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005aac:	7afa      	ldrb	r2, [r7, #11]
 8005aae:	89fb      	ldrh	r3, [r7, #14]
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f8c0 	bl	8005c38 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8005ab8:	8afb      	ldrh	r3, [r7, #22]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80a6 	beq.w	8005c0c <wm8994_Init+0xd68>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005ac0:	8afb      	ldrh	r3, [r7, #22]
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac6:	d003      	beq.n	8005ad0 <wm8994_Init+0xc2c>
 8005ac8:	8afb      	ldrh	r3, [r7, #22]
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d12b      	bne.n	8005b28 <wm8994_Init+0xc84>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005ad0:	8b7b      	ldrh	r3, [r7, #26]
 8005ad2:	f043 0313 	orr.w	r3, r3, #19
 8005ad6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005ad8:	89fb      	ldrh	r3, [r7, #14]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	8b7a      	ldrh	r2, [r7, #26]
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fa3b 	bl	8005f5c <CODEC_IO_Write>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005af0:	89fb      	ldrh	r3, [r7, #14]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2202      	movs	r2, #2
 8005af6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fa2e 	bl	8005f5c <CODEC_IO_Write>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8005b0a:	89fb      	ldrh	r3, [r7, #14]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005b12:	f240 4111 	movw	r1, #1041	; 0x411
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fa20 	bl	8005f5c <CODEC_IO_Write>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e06b      	b.n	8005c00 <wm8994_Init+0xd5c>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005b28:	8afb      	ldrh	r3, [r7, #22]
 8005b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2e:	d139      	bne.n	8005ba4 <wm8994_Init+0xd00>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005b30:	8b7b      	ldrh	r3, [r7, #26]
 8005b32:	f043 0313 	orr.w	r3, r3, #19
 8005b36:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005b38:	89fb      	ldrh	r3, [r7, #14]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	8b7a      	ldrh	r2, [r7, #26]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fa0b 	bl	8005f5c <CODEC_IO_Write>
 8005b46:	4603      	mov	r3, r0
 8005b48:	461a      	mov	r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2202      	movs	r2, #2
 8005b56:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f9fe 	bl	8005f5c <CODEC_IO_Write>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005b72:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f9f0 	bl	8005f5c <CODEC_IO_Write>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);
 8005b86:	89fb      	ldrh	r3, [r7, #14]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005b8e:	f240 4111 	movw	r1, #1041	; 0x411
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f9e2 	bl	8005f5c <CODEC_IO_Write>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	e02d      	b.n	8005c00 <wm8994_Init+0xd5c>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005ba4:	8afb      	ldrh	r3, [r7, #22]
 8005ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005baa:	d003      	beq.n	8005bb4 <wm8994_Init+0xd10>
 8005bac:	8afb      	ldrh	r3, [r7, #22]
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb2:	d125      	bne.n	8005c00 <wm8994_Init+0xd5c>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8005bb4:	89fb      	ldrh	r3, [r7, #14]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	220b      	movs	r2, #11
 8005bba:	2118      	movs	r1, #24
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f9cd 	bl	8005f5c <CODEC_IO_Write>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8005bcc:	89fb      	ldrh	r3, [r7, #14]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	220b      	movs	r2, #11
 8005bd2:	211a      	movs	r1, #26
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f9c1 	bl	8005f5c <CODEC_IO_Write>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005be4:	89fb      	ldrh	r3, [r7, #14]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005bec:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 f9b3 	bl	8005f5c <CODEC_IO_Write>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005c00:	7afa      	ldrb	r2, [r7, #11]
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f816 	bl	8005c38 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop

08005c18 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2100      	movs	r1, #0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe fb35 	bl	8004298 <AUDIO_I2C_Read>
 8005c2e:	4603      	mov	r3, r0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	460a      	mov	r2, r1
 8005c42:	80fb      	strh	r3, [r7, #6]
 8005c44:	4613      	mov	r3, r2
 8005c46:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005c4c:	797b      	ldrb	r3, [r7, #5]
 8005c4e:	2b64      	cmp	r3, #100	; 0x64
 8005c50:	d80b      	bhi.n	8005c6a <wm8994_SetVolume+0x32>
 8005c52:	797a      	ldrb	r2, [r7, #5]
 8005c54:	4613      	mov	r3, r2
 8005c56:	019b      	lsls	r3, r3, #6
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	4a86      	ldr	r2, [pc, #536]	; (8005e74 <wm8994_SetVolume+0x23c>)
 8005c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8005c60:	1152      	asrs	r2, r2, #5
 8005c62:	17db      	asrs	r3, r3, #31
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	e000      	b.n	8005c6c <wm8994_SetVolume+0x34>
 8005c6a:	2364      	movs	r3, #100	; 0x64
 8005c6c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8005c6e:	4b82      	ldr	r3, [pc, #520]	; (8005e78 <wm8994_SetVolume+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 809b 	beq.w	8005dae <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8005c78:	7afb      	ldrb	r3, [r7, #11]
 8005c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c7c:	d93d      	bls.n	8005cfa <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	2100      	movs	r1, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f8fc 	bl	8005e80 <wm8994_SetMute>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f240 127f 	movw	r2, #383	; 0x17f
 8005c98:	211c      	movs	r1, #28
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f95e 	bl	8005f5c <CODEC_IO_Write>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f240 127f 	movw	r2, #383	; 0x17f
 8005cb2:	211d      	movs	r1, #29
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 f951 	bl	8005f5c <CODEC_IO_Write>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f240 127f 	movw	r2, #383	; 0x17f
 8005ccc:	2126      	movs	r1, #38	; 0x26
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f944 	bl	8005f5c <CODEC_IO_Write>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f240 127f 	movw	r2, #383	; 0x17f
 8005ce6:	2127      	movs	r1, #39	; 0x27
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f937 	bl	8005f5c <CODEC_IO_Write>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e059      	b.n	8005dae <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8005cfa:	797b      	ldrb	r3, [r7, #5]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2101      	movs	r1, #1
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f8bb 	bl	8005e80 <wm8994_SetMute>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e04c      	b.n	8005dae <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	2100      	movs	r1, #0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f8b1 	bl	8005e80 <wm8994_SetMute>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	b2d8      	uxtb	r0, r3
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	211c      	movs	r1, #28
 8005d3a:	f000 f90f 	bl	8005f5c <CODEC_IO_Write>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	b2d8      	uxtb	r0, r3
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
 8005d4e:	b21b      	sxth	r3, r3
 8005d50:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d54:	b21b      	sxth	r3, r3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	211d      	movs	r1, #29
 8005d5c:	f000 f8fe 	bl	8005f5c <CODEC_IO_Write>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461a      	mov	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	b2d8      	uxtb	r0, r3
 8005d6e:	7afb      	ldrb	r3, [r7, #11]
 8005d70:	b21b      	sxth	r3, r3
 8005d72:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d76:	b21b      	sxth	r3, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	2126      	movs	r1, #38	; 0x26
 8005d7e:	f000 f8ed 	bl	8005f5c <CODEC_IO_Write>
 8005d82:	4603      	mov	r3, r0
 8005d84:	461a      	mov	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	b2d8      	uxtb	r0, r3
 8005d90:	7afb      	ldrb	r3, [r7, #11]
 8005d92:	b21b      	sxth	r3, r3
 8005d94:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005d98:	b21b      	sxth	r3, r3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	2127      	movs	r1, #39	; 0x27
 8005da0:	f000 f8dc 	bl	8005f5c <CODEC_IO_Write>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005dae:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <wm8994_SetVolume+0x244>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d059      	beq.n	8005e6a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005db6:	797b      	ldrb	r3, [r7, #5]
 8005db8:	2b63      	cmp	r3, #99	; 0x63
 8005dba:	d80c      	bhi.n	8005dd6 <wm8994_SetVolume+0x19e>
 8005dbc:	797a      	ldrb	r2, [r7, #5]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	4a2b      	ldr	r2, [pc, #172]	; (8005e74 <wm8994_SetVolume+0x23c>)
 8005dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8005dcc:	1152      	asrs	r2, r2, #5
 8005dce:	17db      	asrs	r3, r3, #31
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	e000      	b.n	8005dd8 <wm8994_SetVolume+0x1a0>
 8005dd6:	23ef      	movs	r3, #239	; 0xef
 8005dd8:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	b2d8      	uxtb	r0, r3
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	b21b      	sxth	r3, r3
 8005de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de6:	b21b      	sxth	r3, r3
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005df0:	f000 f8b4 	bl	8005f5c <CODEC_IO_Write>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	b2d8      	uxtb	r0, r3
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	b21b      	sxth	r3, r3
 8005e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0a:	b21b      	sxth	r3, r3
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f240 4101 	movw	r1, #1025	; 0x401
 8005e14:	f000 f8a2 	bl	8005f5c <CODEC_IO_Write>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	b2d8      	uxtb	r0, r3
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	b21b      	sxth	r3, r3
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	b21b      	sxth	r3, r3
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	f240 4104 	movw	r1, #1028	; 0x404
 8005e38:	f000 f890 	bl	8005f5c <CODEC_IO_Write>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	b2d8      	uxtb	r0, r3
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e52:	b21b      	sxth	r3, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	f240 4105 	movw	r1, #1029	; 0x405
 8005e5c:	f000 f87e 	bl	8005f5c <CODEC_IO_Write>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	51eb851f 	.word	0x51eb851f
 8005e78:	2000037c 	.word	0x2000037c
 8005e7c:	20000380 	.word	0x20000380

08005e80 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	6039      	str	r1, [r7, #0]
 8005e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <wm8994_SetMute+0x98>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d039      	beq.n	8005f0c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d11c      	bne.n	8005ed8 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 f856 	bl	8005f5c <CODEC_IO_Write>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec2:	f240 4122 	movw	r1, #1058	; 0x422
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f848 	bl	8005f5c <CODEC_IO_Write>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	e019      	b.n	8005f0c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2210      	movs	r2, #16
 8005ede:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 f83a 	bl	8005f5c <CODEC_IO_Write>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	f240 4122 	movw	r1, #1058	; 0x422
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f82d 	bl	8005f5c <CODEC_IO_Write>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	2000037c 	.word	0x2000037c

08005f1c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f812 	bl	8005f5c <CODEC_IO_Write>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <wm8994_Reset+0x38>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <wm8994_Reset+0x3c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

  return counter;
 8005f48:	68fb      	ldr	r3, [r7, #12]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	2000037c 	.word	0x2000037c
 8005f58:	20000380 	.word	0x20000380

08005f5c <CODEC_IO_Write>:
  * @param  Value: Data to be written
  * @retval None
  * TODO : delete
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	71fb      	strb	r3, [r7, #7]
 8005f66:	460b      	mov	r3, r1
 8005f68:	80bb      	strh	r3, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]

 AUDIO_I2C_Write(Addr, Reg, Value);
 8005f72:	887a      	ldrh	r2, [r7, #2]
 8005f74:	88b9      	ldrh	r1, [r7, #4]
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe f963 	bl	8004244 <AUDIO_I2C_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_I2C_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	b2db      	uxtb	r3, r3
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f90:	480d      	ldr	r0, [pc, #52]	; (8005fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f92:	490e      	ldr	r1, [pc, #56]	; (8005fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f94:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f98:	e002      	b.n	8005fa0 <LoopCopyDataInit>

08005f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f9e:	3304      	adds	r3, #4

08005fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fa4:	d3f9      	bcc.n	8005f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fa6:	4a0b      	ldr	r2, [pc, #44]	; (8005fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005fa8:	4c0b      	ldr	r4, [pc, #44]	; (8005fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fac:	e001      	b.n	8005fb2 <LoopFillZerobss>

08005fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fb0:	3204      	adds	r2, #4

08005fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fb4:	d3fb      	bcc.n	8005fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005fb6:	f7fd ffb9 	bl	8003f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fba:	f013 fba3 	bl	8019704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fbe:	f7fb fabb 	bl	8001538 <main>
  bx  lr    
 8005fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005fc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fcc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8005fd0:	08030394 	.word	0x08030394
  ldr r2, =_sbss
 8005fd4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8005fd8:	2004c9d0 	.word	0x2004c9d0

08005fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fdc:	e7fe      	b.n	8005fdc <ADC_IRQHandler>

08005fde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fe2:	2003      	movs	r0, #3
 8005fe4:	f000 fba5 	bl	8006732 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f7fd fe2b 	bl	8003c44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005fee:	f7fc fe0f 	bl	8002c10 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <HAL_IncTick+0x20>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <HAL_IncTick+0x24>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4413      	add	r3, r2
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <HAL_IncTick+0x24>)
 800600a:	6013      	str	r3, [r2, #0]
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000038 	.word	0x20000038
 800601c:	2004be68 	.word	0x2004be68

08006020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return uwTick;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <HAL_GetTick+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	2004be68 	.word	0x2004be68

08006038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006040:	f7ff ffee 	bl	8006020 <HAL_GetTick>
 8006044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006050:	d005      	beq.n	800605e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_Delay+0x44>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800605e:	bf00      	nop
 8006060:	f7ff ffde 	bl	8006020 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	429a      	cmp	r2, r3
 800606e:	d8f7      	bhi.n	8006060 <HAL_Delay+0x28>
  {
  }
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000038 	.word	0x20000038

08006080 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e031      	b.n	80060fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fc fdde 	bl	8002c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d116      	bne.n	80060ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <HAL_ADC_Init+0x84>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	f043 0202 	orr.w	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f964 	bl	800639c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	f043 0201 	orr.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
 80060ea:	e001      	b.n	80060f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	ffffeefd 	.word	0xffffeefd

08006108 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x1c>
 8006120:	2302      	movs	r3, #2
 8006122:	e12a      	b.n	800637a <HAL_ADC_ConfigChannel+0x272>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b09      	cmp	r3, #9
 8006132:	d93a      	bls.n	80061aa <HAL_ADC_ConfigChannel+0xa2>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613c:	d035      	beq.n	80061aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68d9      	ldr	r1, [r3, #12]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	4613      	mov	r3, r2
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	4413      	add	r3, r2
 8006152:	3b1e      	subs	r3, #30
 8006154:	2207      	movs	r2, #7
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43da      	mvns	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	400a      	ands	r2, r1
 8006162:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a87      	ldr	r2, [pc, #540]	; (8006388 <HAL_ADC_ConfigChannel+0x280>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d10a      	bne.n	8006184 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68d9      	ldr	r1, [r3, #12]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	061a      	lsls	r2, r3, #24
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006182:	e035      	b.n	80061f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68d9      	ldr	r1, [r3, #12]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	4618      	mov	r0, r3
 8006196:	4603      	mov	r3, r0
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4403      	add	r3, r0
 800619c:	3b1e      	subs	r3, #30
 800619e:	409a      	lsls	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061a8:	e022      	b.n	80061f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6919      	ldr	r1, [r3, #16]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	4613      	mov	r3, r2
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	4413      	add	r3, r2
 80061be:	2207      	movs	r2, #7
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43da      	mvns	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	400a      	ands	r2, r1
 80061cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6919      	ldr	r1, [r3, #16]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	4618      	mov	r0, r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4403      	add	r3, r0
 80061e6:	409a      	lsls	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b06      	cmp	r3, #6
 80061f6:	d824      	bhi.n	8006242 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	3b05      	subs	r3, #5
 800620a:	221f      	movs	r2, #31
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43da      	mvns	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	400a      	ands	r2, r1
 8006218:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	4618      	mov	r0, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	3b05      	subs	r3, #5
 8006234:	fa00 f203 	lsl.w	r2, r0, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	635a      	str	r2, [r3, #52]	; 0x34
 8006240:	e04c      	b.n	80062dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b0c      	cmp	r3, #12
 8006248:	d824      	bhi.n	8006294 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	3b23      	subs	r3, #35	; 0x23
 800625c:	221f      	movs	r2, #31
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43da      	mvns	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	400a      	ands	r2, r1
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	4618      	mov	r0, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	3b23      	subs	r3, #35	; 0x23
 8006286:	fa00 f203 	lsl.w	r2, r0, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
 8006292:	e023      	b.n	80062dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	3b41      	subs	r3, #65	; 0x41
 80062a6:	221f      	movs	r2, #31
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43da      	mvns	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	400a      	ands	r2, r1
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	4618      	mov	r0, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	3b41      	subs	r3, #65	; 0x41
 80062d0:	fa00 f203 	lsl.w	r2, r0, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a2a      	ldr	r2, [pc, #168]	; (800638c <HAL_ADC_ConfigChannel+0x284>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10a      	bne.n	80062fc <HAL_ADC_ConfigChannel+0x1f4>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ee:	d105      	bne.n	80062fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80062f0:	4b27      	ldr	r3, [pc, #156]	; (8006390 <HAL_ADC_ConfigChannel+0x288>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_ADC_ConfigChannel+0x288>)
 80062f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80062fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a22      	ldr	r2, [pc, #136]	; (800638c <HAL_ADC_ConfigChannel+0x284>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d109      	bne.n	800631a <HAL_ADC_ConfigChannel+0x212>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b12      	cmp	r3, #18
 800630c:	d105      	bne.n	800631a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <HAL_ADC_ConfigChannel+0x288>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4a1f      	ldr	r2, [pc, #124]	; (8006390 <HAL_ADC_ConfigChannel+0x288>)
 8006314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006318:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1b      	ldr	r2, [pc, #108]	; (800638c <HAL_ADC_ConfigChannel+0x284>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d125      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x268>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a17      	ldr	r2, [pc, #92]	; (8006388 <HAL_ADC_ConfigChannel+0x280>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <HAL_ADC_ConfigChannel+0x22e>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b11      	cmp	r3, #17
 8006334:	d11c      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <HAL_ADC_ConfigChannel+0x288>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	4a15      	ldr	r2, [pc, #84]	; (8006390 <HAL_ADC_ConfigChannel+0x288>)
 800633c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006340:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a10      	ldr	r2, [pc, #64]	; (8006388 <HAL_ADC_ConfigChannel+0x280>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d111      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800634c:	4b11      	ldr	r3, [pc, #68]	; (8006394 <HAL_ADC_ConfigChannel+0x28c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a11      	ldr	r2, [pc, #68]	; (8006398 <HAL_ADC_ConfigChannel+0x290>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	0c9a      	lsrs	r2, r3, #18
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006362:	e002      	b.n	800636a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b01      	subs	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f9      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	10000012 	.word	0x10000012
 800638c:	40012000 	.word	0x40012000
 8006390:	40012300 	.word	0x40012300
 8006394:	20000014 	.word	0x20000014
 8006398:	431bde83 	.word	0x431bde83

0800639c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80063a4:	4b78      	ldr	r3, [pc, #480]	; (8006588 <ADC_Init+0x1ec>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a77      	ldr	r2, [pc, #476]	; (8006588 <ADC_Init+0x1ec>)
 80063aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80063ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80063b0:	4b75      	ldr	r3, [pc, #468]	; (8006588 <ADC_Init+0x1ec>)
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4973      	ldr	r1, [pc, #460]	; (8006588 <ADC_Init+0x1ec>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	021a      	lsls	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80063f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6899      	ldr	r1, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	4a58      	ldr	r2, [pc, #352]	; (800658c <ADC_Init+0x1f0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800643e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6899      	ldr	r1, [r3, #8]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	609a      	str	r2, [r3, #8]
 8006474:	e00f      	b.n	8006496 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0202 	bic.w	r2, r2, #2
 80064a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6899      	ldr	r1, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	005a      	lsls	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01b      	beq.n	80064fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80064e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	3b01      	subs	r3, #1
 80064f0:	035a      	lsls	r2, r3, #13
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
 80064fa:	e007      	b.n	800650c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800650a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	3b01      	subs	r3, #1
 8006528:	051a      	lsls	r2, r3, #20
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6899      	ldr	r1, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800654e:	025a      	lsls	r2, r3, #9
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6899      	ldr	r1, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	029a      	lsls	r2, r3, #10
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	40012300 	.word	0x40012300
 800658c:	0f000001 	.word	0x0f000001

08006590 <__NVIC_SetPriorityGrouping>:
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <__NVIC_SetPriorityGrouping+0x40>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065ac:	4013      	ands	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80065b8:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <__NVIC_SetPriorityGrouping+0x44>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065be:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <__NVIC_SetPriorityGrouping+0x40>)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	60d3      	str	r3, [r2, #12]
}
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	e000ed00 	.word	0xe000ed00
 80065d4:	05fa0000 	.word	0x05fa0000

080065d8 <__NVIC_GetPriorityGrouping>:
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <__NVIC_GetPriorityGrouping+0x18>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	0a1b      	lsrs	r3, r3, #8
 80065e2:	f003 0307 	and.w	r3, r3, #7
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	e000ed00 	.word	0xe000ed00

080065f4 <__NVIC_EnableIRQ>:
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006602:	2b00      	cmp	r3, #0
 8006604:	db0b      	blt.n	800661e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	f003 021f 	and.w	r2, r3, #31
 800660c:	4907      	ldr	r1, [pc, #28]	; (800662c <__NVIC_EnableIRQ+0x38>)
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	2001      	movs	r0, #1
 8006616:	fa00 f202 	lsl.w	r2, r0, r2
 800661a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	e000e100 	.word	0xe000e100

08006630 <__NVIC_DisableIRQ>:
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800663a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663e:	2b00      	cmp	r3, #0
 8006640:	db12      	blt.n	8006668 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	f003 021f 	and.w	r2, r3, #31
 8006648:	490a      	ldr	r1, [pc, #40]	; (8006674 <__NVIC_DisableIRQ+0x44>)
 800664a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2001      	movs	r0, #1
 8006652:	fa00 f202 	lsl.w	r2, r0, r2
 8006656:	3320      	adds	r3, #32
 8006658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800665c:	f3bf 8f4f 	dsb	sy
}
 8006660:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006662:	f3bf 8f6f 	isb	sy
}
 8006666:	bf00      	nop
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	e000e100 	.word	0xe000e100

08006678 <__NVIC_SetPriority>:
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006688:	2b00      	cmp	r3, #0
 800668a:	db0a      	blt.n	80066a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	490c      	ldr	r1, [pc, #48]	; (80066c4 <__NVIC_SetPriority+0x4c>)
 8006692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006696:	0112      	lsls	r2, r2, #4
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	440b      	add	r3, r1
 800669c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066a0:	e00a      	b.n	80066b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	4908      	ldr	r1, [pc, #32]	; (80066c8 <__NVIC_SetPriority+0x50>)
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	3b04      	subs	r3, #4
 80066b0:	0112      	lsls	r2, r2, #4
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	440b      	add	r3, r1
 80066b6:	761a      	strb	r2, [r3, #24]
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	e000e100 	.word	0xe000e100
 80066c8:	e000ed00 	.word	0xe000ed00

080066cc <NVIC_EncodePriority>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	; 0x24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f1c3 0307 	rsb	r3, r3, #7
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	bf28      	it	cs
 80066ea:	2304      	movcs	r3, #4
 80066ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3304      	adds	r3, #4
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	d902      	bls.n	80066fc <NVIC_EncodePriority+0x30>
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	3b03      	subs	r3, #3
 80066fa:	e000      	b.n	80066fe <NVIC_EncodePriority+0x32>
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006700:	f04f 32ff 	mov.w	r2, #4294967295
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43da      	mvns	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	401a      	ands	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006714:	f04f 31ff 	mov.w	r1, #4294967295
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	fa01 f303 	lsl.w	r3, r1, r3
 800671e:	43d9      	mvns	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006724:	4313      	orrs	r3, r2
}
 8006726:	4618      	mov	r0, r3
 8006728:	3724      	adds	r7, #36	; 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ff28 	bl	8006590 <__NVIC_SetPriorityGrouping>
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800675a:	f7ff ff3d 	bl	80065d8 <__NVIC_GetPriorityGrouping>
 800675e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	6978      	ldr	r0, [r7, #20]
 8006766:	f7ff ffb1 	bl	80066cc <NVIC_EncodePriority>
 800676a:	4602      	mov	r2, r0
 800676c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff ff80 	bl	8006678 <__NVIC_SetPriority>
}
 8006778:	bf00      	nop
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800678a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff ff30 	bl	80065f4 <__NVIC_EnableIRQ>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80067a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ff40 	bl	8006630 <__NVIC_DisableIRQ>
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80067bc:	f3bf 8f5f 	dmb	sy
}
 80067c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <HAL_MPU_Disable+0x28>)
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	4a06      	ldr	r2, [pc, #24]	; (80067e0 <HAL_MPU_Disable+0x28>)
 80067c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067cc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80067ce:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <HAL_MPU_Disable+0x2c>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	e000ed00 	.word	0xe000ed00
 80067e4:	e000ed90 	.word	0xe000ed90

080067e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80067f0:	4a0b      	ldr	r2, [pc, #44]	; (8006820 <HAL_MPU_Enable+0x38>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <HAL_MPU_Enable+0x3c>)
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <HAL_MPU_Enable+0x3c>)
 8006800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006804:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006806:	f3bf 8f4f 	dsb	sy
}
 800680a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800680c:	f3bf 8f6f 	isb	sy
}
 8006810:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	e000ed90 	.word	0xe000ed90
 8006824:	e000ed00 	.word	0xe000ed00

08006828 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	785a      	ldrb	r2, [r3, #1]
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <HAL_MPU_ConfigRegion+0x84>)
 8006836:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d029      	beq.n	8006894 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006840:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <HAL_MPU_ConfigRegion+0x84>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7b1b      	ldrb	r3, [r3, #12]
 800684c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	7adb      	ldrb	r3, [r3, #11]
 8006852:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006854:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7a9b      	ldrb	r3, [r3, #10]
 800685a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800685c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	7b5b      	ldrb	r3, [r3, #13]
 8006862:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	7b9b      	ldrb	r3, [r3, #14]
 800686a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800686c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7bdb      	ldrb	r3, [r3, #15]
 8006872:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006874:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7a5b      	ldrb	r3, [r3, #9]
 800687a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800687c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	7a1b      	ldrb	r3, [r3, #8]
 8006882:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006884:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	7812      	ldrb	r2, [r2, #0]
 800688a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800688c:	4a07      	ldr	r2, [pc, #28]	; (80068ac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800688e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006890:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006892:	e005      	b.n	80068a0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <HAL_MPU_ConfigRegion+0x84>)
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800689a:	4b04      	ldr	r3, [pc, #16]	; (80068ac <HAL_MPU_ConfigRegion+0x84>)
 800689c:	2200      	movs	r2, #0
 800689e:	611a      	str	r2, [r3, #16]
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	e000ed90 	.word	0xe000ed90

080068b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e054      	b.n	800696c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7f5b      	ldrb	r3, [r3, #29]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fc fa1e 	bl	8002d14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	791b      	ldrb	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10c      	bne.n	8006900 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a22      	ldr	r2, [pc, #136]	; (8006974 <HAL_CRC_Init+0xc4>)
 80068ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0218 	bic.w	r2, r2, #24
 80068fc:	609a      	str	r2, [r3, #8]
 80068fe:	e00c      	b.n	800691a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6899      	ldr	r1, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	461a      	mov	r2, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f834 	bl	8006978 <HAL_CRCEx_Polynomial_Set>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e028      	b.n	800696c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	795b      	ldrb	r3, [r3, #5]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f04f 32ff 	mov.w	r2, #4294967295
 800692a:	611a      	str	r2, [r3, #16]
 800692c:	e004      	b.n	8006938 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6912      	ldr	r2, [r2, #16]
 8006936:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	04c11db7 	.word	0x04c11db7

08006978 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006988:	231f      	movs	r3, #31
 800698a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800698c:	bf00      	nop
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1e5a      	subs	r2, r3, #1
 8006992:	613a      	str	r2, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <HAL_CRCEx_Polynomial_Set+0x34>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_CRCEx_Polynomial_Set+0x16>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b18      	cmp	r3, #24
 80069b0:	d846      	bhi.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xc8>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	08006a47 	.word	0x08006a47
 80069bc:	08006a41 	.word	0x08006a41
 80069c0:	08006a41 	.word	0x08006a41
 80069c4:	08006a41 	.word	0x08006a41
 80069c8:	08006a41 	.word	0x08006a41
 80069cc:	08006a41 	.word	0x08006a41
 80069d0:	08006a41 	.word	0x08006a41
 80069d4:	08006a41 	.word	0x08006a41
 80069d8:	08006a35 	.word	0x08006a35
 80069dc:	08006a41 	.word	0x08006a41
 80069e0:	08006a41 	.word	0x08006a41
 80069e4:	08006a41 	.word	0x08006a41
 80069e8:	08006a41 	.word	0x08006a41
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	08006a41 	.word	0x08006a41
 80069f4:	08006a41 	.word	0x08006a41
 80069f8:	08006a29 	.word	0x08006a29
 80069fc:	08006a41 	.word	0x08006a41
 8006a00:	08006a41 	.word	0x08006a41
 8006a04:	08006a41 	.word	0x08006a41
 8006a08:	08006a41 	.word	0x08006a41
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006a41 	.word	0x08006a41
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a1d 	.word	0x08006a1d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b06      	cmp	r3, #6
 8006a20:	d913      	bls.n	8006a4a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a26:	e010      	b.n	8006a4a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	d90f      	bls.n	8006a4e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a32:	e00c      	b.n	8006a4e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d90b      	bls.n	8006a52 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a3e:	e008      	b.n	8006a52 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
      break;
 8006a44:	e006      	b.n	8006a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a46:	bf00      	nop
 8006a48:	e004      	b.n	8006a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a4a:	bf00      	nop
 8006a4c:	e002      	b.n	8006a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a4e:	bf00      	nop
 8006a50:	e000      	b.n	8006a54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006a52:	bf00      	nop
  }
  if (status == HAL_OK)
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10d      	bne.n	8006a76 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f023 0118 	bic.w	r1, r3, #24
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e069      	b.n	8006b6a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fc f956 	bl	8002d54 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	4b2a      	ldr	r3, [pc, #168]	; (8006b74 <HAL_DCMI_Init+0xf0>)
 8006aca:	400b      	ands	r3, r1
 8006acc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006ae2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006aee:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006afa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006b06:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006b12:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d112      	bne.n	8006b4a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	7f1b      	ldrb	r3, [r3, #28]
 8006b28:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7f5b      	ldrb	r3, [r3, #29]
 8006b2e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b30:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7f9b      	ldrb	r3, [r3, #30]
 8006b36:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006b38:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7fdb      	ldrb	r3, [r3, #31]
 8006b40:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006b46:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006b48:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 021e 	orr.w	r2, r2, #30
 8006b58:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	ffe0f007 	.word	0xffe0f007

08006b78 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2204      	movs	r2, #4
 8006b98:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	f043 0202 	orr.w	r2, r3, #2
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	4a35      	ldr	r2, [pc, #212]	; (8006c88 <HAL_DCMI_IRQHandler+0x110>)
 8006bb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fa2a 	bl	8007014 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01e      	beq.n	8006c08 <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	f043 0201 	orr.w	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2204      	movs	r2, #4
 8006be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bea:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <HAL_DCMI_IRQHandler+0x110>)
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fa0e 	bl	8007014 <HAL_DMA_Abort_IT>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f86a 	bl	8006cdc <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f003 0310 	and.w	r3, r3, #16
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d006      	beq.n	8006c20 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2210      	movs	r2, #16
 8006c18:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f840 	bl	8006ca0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d006      	beq.n	8006c38 <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f83e 	bl	8006cb4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01d      	beq.n	8006c7e <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d107      	bne.n	8006c60 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 021e 	bic.w	r2, r2, #30
 8006c5e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0201 	bic.w	r2, r2, #1
 8006c6e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2201      	movs	r2, #1
 8006c76:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f825 	bl	8006cc8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	08006cdd 	.word	0x08006cdd

08006c8c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d009      	beq.n	8006d08 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7ff ffbf 	bl	8006c8c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d24:	f7ff f97c 	bl	8006020 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e099      	b.n	8006e68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d54:	e00f      	b.n	8006d76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d56:	f7ff f963 	bl	8006020 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b05      	cmp	r3, #5
 8006d62:	d908      	bls.n	8006d76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e078      	b.n	8006e68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e8      	bne.n	8006d56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4b38      	ldr	r3, [pc, #224]	; (8006e70 <HAL_DMA_Init+0x158>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d107      	bne.n	8006de0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f023 0307 	bic.w	r3, r3, #7
 8006df6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d117      	bne.n	8006e3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00e      	beq.n	8006e3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fb15 	bl	800744c <DMA_CheckFifoParam>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006e36:	2301      	movs	r3, #1
 8006e38:	e016      	b.n	8006e68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 facc 	bl	80073e0 <DMA_CalcBaseAndBitshift>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e50:	223f      	movs	r2, #63	; 0x3f
 8006e52:	409a      	lsls	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	f010803f 	.word	0xf010803f

08006e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_DMA_Start_IT+0x26>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e048      	b.n	8006f2c <HAL_DMA_Start_IT+0xb8>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d137      	bne.n	8006f1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 fa5e 	bl	8007384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ecc:	223f      	movs	r2, #63	; 0x3f
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0216 	orr.w	r2, r2, #22
 8006ee2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695a      	ldr	r2, [r3, #20]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ef2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0208 	orr.w	r2, r2, #8
 8006f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	e005      	b.n	8006f2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f42:	f7ff f86d 	bl	8006020 <HAL_GetTick>
 8006f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d008      	beq.n	8006f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2280      	movs	r2, #128	; 0x80
 8006f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e052      	b.n	800700c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0216 	bic.w	r2, r2, #22
 8006f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <HAL_DMA_Abort+0x62>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0208 	bic.w	r2, r2, #8
 8006fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fb6:	e013      	b.n	8006fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fb8:	f7ff f832 	bl	8006020 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d90c      	bls.n	8006fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e015      	b.n	800700c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e4      	bne.n	8006fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	223f      	movs	r2, #63	; 0x3f
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d004      	beq.n	8007032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e00c      	b.n	800704c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2205      	movs	r2, #5
 8007036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0201 	bic.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007064:	4b92      	ldr	r3, [pc, #584]	; (80072b0 <HAL_DMA_IRQHandler+0x258>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a92      	ldr	r2, [pc, #584]	; (80072b4 <HAL_DMA_IRQHandler+0x25c>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	0a9b      	lsrs	r3, r3, #10
 8007070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007082:	2208      	movs	r2, #8
 8007084:	409a      	lsls	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01a      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d013      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b0:	2208      	movs	r2, #8
 80070b2:	409a      	lsls	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	2201      	movs	r2, #1
 80070ca:	409a      	lsls	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d012      	beq.n	80070fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e6:	2201      	movs	r2, #1
 80070e8:	409a      	lsls	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	f043 0202 	orr.w	r2, r3, #2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fe:	2204      	movs	r2, #4
 8007100:	409a      	lsls	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d012      	beq.n	8007130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711c:	2204      	movs	r2, #4
 800711e:	409a      	lsls	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007128:	f043 0204 	orr.w	r2, r3, #4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007134:	2210      	movs	r2, #16
 8007136:	409a      	lsls	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d043      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d03c      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007152:	2210      	movs	r2, #16
 8007154:	409a      	lsls	r2, r3
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d018      	beq.n	800719a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d108      	bne.n	8007188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d024      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
 8007186:	e01f      	b.n	80071c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01b      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	4798      	blx	r3
 8007198:	e016      	b.n	80071c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0208 	bic.w	r2, r2, #8
 80071b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071cc:	2220      	movs	r2, #32
 80071ce:	409a      	lsls	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 808e 	beq.w	80072f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8086 	beq.w	80072f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ee:	2220      	movs	r2, #32
 80071f0:	409a      	lsls	r2, r3
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b05      	cmp	r3, #5
 8007200:	d136      	bne.n	8007270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0216 	bic.w	r2, r2, #22
 8007210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <HAL_DMA_IRQHandler+0x1da>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0208 	bic.w	r2, r2, #8
 8007240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	223f      	movs	r2, #63	; 0x3f
 8007248:	409a      	lsls	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	2b00      	cmp	r3, #0
 8007264:	d07d      	beq.n	8007362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
        }
        return;
 800726e:	e078      	b.n	8007362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01c      	beq.n	80072b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d108      	bne.n	800729e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007290:	2b00      	cmp	r3, #0
 8007292:	d030      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
 800729c:	e02b      	b.n	80072f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d027      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
 80072ae:	e022      	b.n	80072f6 <HAL_DMA_IRQHandler+0x29e>
 80072b0:	20000014 	.word	0x20000014
 80072b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10f      	bne.n	80072e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0210 	bic.w	r2, r2, #16
 80072d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d032      	beq.n	8007364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d022      	beq.n	8007350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2205      	movs	r2, #5
 800730e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0201 	bic.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3301      	adds	r3, #1
 8007326:	60bb      	str	r3, [r7, #8]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	429a      	cmp	r2, r3
 800732c:	d307      	bcc.n	800733e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f2      	bne.n	8007322 <HAL_DMA_IRQHandler+0x2ca>
 800733c:	e000      	b.n	8007340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800733e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
 8007360:	e000      	b.n	8007364 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007362:	bf00      	nop
    }
  }
}
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop

0800736c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d108      	bne.n	80073c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073c2:	e007      	b.n	80073d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]
}
 80073d4:	bf00      	nop
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	3b10      	subs	r3, #16
 80073f0:	4a13      	ldr	r2, [pc, #76]	; (8007440 <DMA_CalcBaseAndBitshift+0x60>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80073fa:	4a12      	ldr	r2, [pc, #72]	; (8007444 <DMA_CalcBaseAndBitshift+0x64>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d908      	bls.n	8007420 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <DMA_CalcBaseAndBitshift+0x68>)
 8007416:	4013      	ands	r3, r2
 8007418:	1d1a      	adds	r2, r3, #4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	659a      	str	r2, [r3, #88]	; 0x58
 800741e:	e006      	b.n	800742e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <DMA_CalcBaseAndBitshift+0x68>)
 8007428:	4013      	ands	r3, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	aaaaaaab 	.word	0xaaaaaaab
 8007444:	0801ce78 	.word	0x0801ce78
 8007448:	fffffc00 	.word	0xfffffc00

0800744c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d11f      	bne.n	80074a6 <DMA_CheckFifoParam+0x5a>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b03      	cmp	r3, #3
 800746a:	d856      	bhi.n	800751a <DMA_CheckFifoParam+0xce>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <DMA_CheckFifoParam+0x28>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007485 	.word	0x08007485
 8007478:	08007497 	.word	0x08007497
 800747c:	08007485 	.word	0x08007485
 8007480:	0800751b 	.word	0x0800751b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d046      	beq.n	800751e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007494:	e043      	b.n	800751e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800749e:	d140      	bne.n	8007522 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074a4:	e03d      	b.n	8007522 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ae:	d121      	bne.n	80074f4 <DMA_CheckFifoParam+0xa8>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d837      	bhi.n	8007526 <DMA_CheckFifoParam+0xda>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <DMA_CheckFifoParam+0x70>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074d3 	.word	0x080074d3
 80074c4:	080074cd 	.word	0x080074cd
 80074c8:	080074e5 	.word	0x080074e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
      break;
 80074d0:	e030      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d025      	beq.n	800752a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074e2:	e022      	b.n	800752a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074ec:	d11f      	bne.n	800752e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80074f2:	e01c      	b.n	800752e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d903      	bls.n	8007502 <DMA_CheckFifoParam+0xb6>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d003      	beq.n	8007508 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007500:	e018      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]
      break;
 8007506:	e015      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	e00b      	b.n	8007532 <DMA_CheckFifoParam+0xe6>
      break;
 800751a:	bf00      	nop
 800751c:	e00a      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      break;
 800751e:	bf00      	nop
 8007520:	e008      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      break;
 8007522:	bf00      	nop
 8007524:	e006      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      break;
 8007526:	bf00      	nop
 8007528:	e004      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      break;
 800752a:	bf00      	nop
 800752c:	e002      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      break;   
 800752e:	bf00      	nop
 8007530:	e000      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
      break;
 8007532:	bf00      	nop
    }
  } 
  
  return status; 
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop

08007544 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e039      	b.n	80075ca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fb fcec 	bl	8002f48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	f023 0107 	bic.w	r1, r3, #7
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075aa:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <HAL_DMA2D_Init+0x90>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68d1      	ldr	r1, [r2, #12]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	430b      	orrs	r3, r1
 80075b8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	ffffc000 	.word	0xffffc000

080075d8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af02      	add	r7, sp, #8
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_DMA2D_Start+0x1c>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e018      	b.n	8007626 <HAL_DMA2D_Start+0x4e>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 fa98 	bl	8007b44 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0201 	orr.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d056      	beq.n	80076f8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800764a:	f7fe fce9 	bl	8006020 <HAL_GetTick>
 800764e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007650:	e04b      	b.n	80076ea <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007660:	2b00      	cmp	r3, #0
 8007662:	d023      	beq.n	80076ac <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	f043 0202 	orr.w	r2, r3, #2
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007688:	f043 0201 	orr.w	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2221      	movs	r2, #33	; 0x21
 8007696:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2204      	movs	r2, #4
 800769c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0a5      	b.n	80077f8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d01a      	beq.n	80076ea <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076b4:	f7fe fcb4 	bl	8006020 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d302      	bcc.n	80076ca <HAL_DMA2D_PollForTransfer+0x9c>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10f      	bne.n	80076ea <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2203      	movs	r2, #3
 80076da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e086      	b.n	80077f8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0ac      	beq.n	8007652 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d061      	beq.n	80077de <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800771a:	f7fe fc81 	bl	8006020 <HAL_GetTick>
 800771e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007720:	e056      	b.n	80077d0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007730:	2b00      	cmp	r3, #0
 8007732:	d02e      	beq.n	8007792 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007742:	f043 0204 	orr.w	r2, r3, #4
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007758:	f043 0202 	orr.w	r2, r3, #2
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776e:	f043 0201 	orr.w	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2229      	movs	r2, #41	; 0x29
 800777c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2204      	movs	r2, #4
 8007782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e032      	b.n	80077f8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d01a      	beq.n	80077d0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fe fc41 	bl	8006020 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <HAL_DMA2D_PollForTransfer+0x182>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10f      	bne.n	80077d0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2203      	movs	r2, #3
 80077c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e013      	b.n	80077f8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0a1      	beq.n	8007722 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2212      	movs	r2, #18
 80077e4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d026      	beq.n	8007870 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d021      	beq.n	8007870 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800783a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	f043 0201 	orr.w	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2201      	movs	r2, #1
 800784e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2204      	movs	r2, #4
 8007854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d026      	beq.n	80078c8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d021      	beq.n	80078c8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007892:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2220      	movs	r2, #32
 800789a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	f043 0202 	orr.w	r2, r3, #2
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2204      	movs	r2, #4
 80078ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d026      	beq.n	8007920 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d021      	beq.n	8007920 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2208      	movs	r2, #8
 80078f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f8:	f043 0204 	orr.w	r2, r3, #4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2204      	movs	r2, #4
 8007904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00e      	beq.n	8007952 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007942:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2204      	movs	r2, #4
 800794a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f853 	bl	80079f8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d024      	beq.n	80079a6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01f      	beq.n	80079a6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007974:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2202      	movs	r2, #2
 800797c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01f      	beq.n	80079f0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01a      	beq.n	80079f0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2210      	movs	r2, #16
 80079d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f80e 	bl	8007a0c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80079f0:	bf00      	nop
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_DMA2D_ConfigLayer+0x20>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e079      	b.n	8007b34 <HAL_DMA2D_ConfigLayer+0x114>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	3318      	adds	r3, #24
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	041b      	lsls	r3, r3, #16
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007a6a:	4b35      	ldr	r3, [pc, #212]	; (8007b40 <HAL_DMA2D_ConfigLayer+0x120>)
 8007a6c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b0a      	cmp	r3, #10
 8007a74:	d003      	beq.n	8007a7e <HAL_DMA2D_ConfigLayer+0x5e>
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b09      	cmp	r3, #9
 8007a7c:	d107      	bne.n	8007a8e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	e005      	b.n	8007a9a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	061b      	lsls	r3, r3, #24
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d120      	bne.n	8007ae2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	ea02 0103 	and.w	r1, r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b0a      	cmp	r3, #10
 8007ac8:	d003      	beq.n	8007ad2 <HAL_DMA2D_ConfigLayer+0xb2>
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b09      	cmp	r3, #9
 8007ad0:	d127      	bne.n	8007b22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ade:	629a      	str	r2, [r3, #40]	; 0x28
 8007ae0:	e01f      	b.n	8007b22 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	43db      	mvns	r3, r3
 8007aec:	ea02 0103 	and.w	r1, r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	6812      	ldr	r2, [r2, #0]
 8007b02:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	2b0a      	cmp	r3, #10
 8007b0a:	d003      	beq.n	8007b14 <HAL_DMA2D_ConfigLayer+0xf4>
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2b09      	cmp	r3, #9
 8007b12:	d106      	bne.n	8007b22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007b20:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	ff03000f 	.word	0xff03000f

08007b44 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b08b      	sub	sp, #44	; 0x2c
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b58:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	041a      	lsls	r2, r3, #16
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	431a      	orrs	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b7c:	d174      	bne.n	8007c68 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007b84:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b8c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b94:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d108      	bne.n	8007bb6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb4:	e053      	b.n	8007c5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d106      	bne.n	8007bcc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bca:	e048      	b.n	8007c5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d111      	bne.n	8007bf8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	0cdb      	lsrs	r3, r3, #19
 8007bd8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	0a9b      	lsrs	r3, r3, #10
 8007bde:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	08db      	lsrs	r3, r3, #3
 8007be4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	02db      	lsls	r3, r3, #11
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf6:	e032      	b.n	8007c5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d117      	bne.n	8007c30 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	0fdb      	lsrs	r3, r3, #31
 8007c04:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	0cdb      	lsrs	r3, r3, #19
 8007c0a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	0adb      	lsrs	r3, r3, #11
 8007c10:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	08db      	lsrs	r3, r3, #3
 8007c16:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	431a      	orrs	r2, r3
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	03db      	lsls	r3, r3, #15
 8007c26:	4313      	orrs	r3, r2
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2e:	e016      	b.n	8007c5e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	0f1b      	lsrs	r3, r3, #28
 8007c34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	0d1b      	lsrs	r3, r3, #20
 8007c3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	0b1b      	lsrs	r3, r3, #12
 8007c40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	011a      	lsls	r2, r3, #4
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	021b      	lsls	r3, r3, #8
 8007c50:	431a      	orrs	r2, r3
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	4313      	orrs	r3, r2
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c64:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007c66:	e003      	b.n	8007c70 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	60da      	str	r2, [r3, #12]
}
 8007c70:	bf00      	nop
 8007c72:	372c      	adds	r7, #44	; 0x2c
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b089      	sub	sp, #36	; 0x24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	e175      	b.n	8007f88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4013      	ands	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	f040 8164 	bne.w	8007f82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d00b      	beq.n	8007cda <HAL_GPIO_Init+0x5e>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d007      	beq.n	8007cda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cce:	2b11      	cmp	r3, #17
 8007cd0:	d003      	beq.n	8007cda <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b12      	cmp	r3, #18
 8007cd8:	d130      	bne.n	8007d3c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	43db      	mvns	r3, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d10:	2201      	movs	r2, #1
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	091b      	lsrs	r3, r3, #4
 8007d26:	f003 0201 	and.w	r2, r3, #1
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	2203      	movs	r2, #3
 8007d48:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	4013      	ands	r3, r2
 8007d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d003      	beq.n	8007d7c <HAL_GPIO_Init+0x100>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b12      	cmp	r3, #18
 8007d7a:	d123      	bne.n	8007dc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	08da      	lsrs	r2, r3, #3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3208      	adds	r2, #8
 8007d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	220f      	movs	r2, #15
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	43db      	mvns	r3, r3
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	08da      	lsrs	r2, r3, #3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3208      	adds	r2, #8
 8007dbe:	69b9      	ldr	r1, [r7, #24]
 8007dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	2203      	movs	r2, #3
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f003 0203 	and.w	r2, r3, #3
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80be 	beq.w	8007f82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e06:	4b66      	ldr	r3, [pc, #408]	; (8007fa0 <HAL_GPIO_Init+0x324>)
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	4a65      	ldr	r2, [pc, #404]	; (8007fa0 <HAL_GPIO_Init+0x324>)
 8007e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e10:	6453      	str	r3, [r2, #68]	; 0x44
 8007e12:	4b63      	ldr	r3, [pc, #396]	; (8007fa0 <HAL_GPIO_Init+0x324>)
 8007e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007e1e:	4a61      	ldr	r2, [pc, #388]	; (8007fa4 <HAL_GPIO_Init+0x328>)
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	089b      	lsrs	r3, r3, #2
 8007e24:	3302      	adds	r3, #2
 8007e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	220f      	movs	r2, #15
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a58      	ldr	r2, [pc, #352]	; (8007fa8 <HAL_GPIO_Init+0x32c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d037      	beq.n	8007eba <HAL_GPIO_Init+0x23e>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a57      	ldr	r2, [pc, #348]	; (8007fac <HAL_GPIO_Init+0x330>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d031      	beq.n	8007eb6 <HAL_GPIO_Init+0x23a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a56      	ldr	r2, [pc, #344]	; (8007fb0 <HAL_GPIO_Init+0x334>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d02b      	beq.n	8007eb2 <HAL_GPIO_Init+0x236>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a55      	ldr	r2, [pc, #340]	; (8007fb4 <HAL_GPIO_Init+0x338>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d025      	beq.n	8007eae <HAL_GPIO_Init+0x232>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a54      	ldr	r2, [pc, #336]	; (8007fb8 <HAL_GPIO_Init+0x33c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01f      	beq.n	8007eaa <HAL_GPIO_Init+0x22e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a53      	ldr	r2, [pc, #332]	; (8007fbc <HAL_GPIO_Init+0x340>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d019      	beq.n	8007ea6 <HAL_GPIO_Init+0x22a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a52      	ldr	r2, [pc, #328]	; (8007fc0 <HAL_GPIO_Init+0x344>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <HAL_GPIO_Init+0x226>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a51      	ldr	r2, [pc, #324]	; (8007fc4 <HAL_GPIO_Init+0x348>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00d      	beq.n	8007e9e <HAL_GPIO_Init+0x222>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a50      	ldr	r2, [pc, #320]	; (8007fc8 <HAL_GPIO_Init+0x34c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d007      	beq.n	8007e9a <HAL_GPIO_Init+0x21e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a4f      	ldr	r2, [pc, #316]	; (8007fcc <HAL_GPIO_Init+0x350>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <HAL_GPIO_Init+0x21a>
 8007e92:	2309      	movs	r3, #9
 8007e94:	e012      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007e96:	230a      	movs	r3, #10
 8007e98:	e010      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007e9a:	2308      	movs	r3, #8
 8007e9c:	e00e      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007e9e:	2307      	movs	r3, #7
 8007ea0:	e00c      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007ea2:	2306      	movs	r3, #6
 8007ea4:	e00a      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007ea6:	2305      	movs	r3, #5
 8007ea8:	e008      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007eaa:	2304      	movs	r3, #4
 8007eac:	e006      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e004      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	e002      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <HAL_GPIO_Init+0x240>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	f002 0203 	and.w	r2, r2, #3
 8007ec2:	0092      	lsls	r2, r2, #2
 8007ec4:	4093      	lsls	r3, r2
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007ecc:	4935      	ldr	r1, [pc, #212]	; (8007fa4 <HAL_GPIO_Init+0x328>)
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	089b      	lsrs	r3, r3, #2
 8007ed2:	3302      	adds	r3, #2
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007eda:	4b3d      	ldr	r3, [pc, #244]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	43db      	mvns	r3, r3
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007efe:	4a34      	ldr	r2, [pc, #208]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f04:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	4013      	ands	r3, r2
 8007f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f28:	4a29      	ldr	r2, [pc, #164]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f2e:	4b28      	ldr	r3, [pc, #160]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	43db      	mvns	r3, r3
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f52:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f58:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	43db      	mvns	r3, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4013      	ands	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f7c:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <HAL_GPIO_Init+0x354>)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3301      	adds	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	2b0f      	cmp	r3, #15
 8007f8c:	f67f ae86 	bls.w	8007c9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	3724      	adds	r7, #36	; 0x24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	40013800 	.word	0x40013800
 8007fa8:	40020000 	.word	0x40020000
 8007fac:	40020400 	.word	0x40020400
 8007fb0:	40020800 	.word	0x40020800
 8007fb4:	40020c00 	.word	0x40020c00
 8007fb8:	40021000 	.word	0x40021000
 8007fbc:	40021400 	.word	0x40021400
 8007fc0:	40021800 	.word	0x40021800
 8007fc4:	40021c00 	.word	0x40021c00
 8007fc8:	40022000 	.word	0x40022000
 8007fcc:	40022400 	.word	0x40022400
 8007fd0:	40013c00 	.word	0x40013c00

08007fd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007fea:	2300      	movs	r3, #0
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	e0d9      	b.n	80081a4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4013      	ands	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	429a      	cmp	r2, r3
 8008008:	f040 80c9 	bne.w	800819e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800800c:	4a6b      	ldr	r2, [pc, #428]	; (80081bc <HAL_GPIO_DeInit+0x1e8>)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	089b      	lsrs	r3, r3, #2
 8008012:	3302      	adds	r3, #2
 8008014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008018:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	220f      	movs	r2, #15
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a63      	ldr	r2, [pc, #396]	; (80081c0 <HAL_GPIO_DeInit+0x1ec>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d037      	beq.n	80080a6 <HAL_GPIO_DeInit+0xd2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a62      	ldr	r2, [pc, #392]	; (80081c4 <HAL_GPIO_DeInit+0x1f0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d031      	beq.n	80080a2 <HAL_GPIO_DeInit+0xce>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a61      	ldr	r2, [pc, #388]	; (80081c8 <HAL_GPIO_DeInit+0x1f4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d02b      	beq.n	800809e <HAL_GPIO_DeInit+0xca>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a60      	ldr	r2, [pc, #384]	; (80081cc <HAL_GPIO_DeInit+0x1f8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d025      	beq.n	800809a <HAL_GPIO_DeInit+0xc6>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a5f      	ldr	r2, [pc, #380]	; (80081d0 <HAL_GPIO_DeInit+0x1fc>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d01f      	beq.n	8008096 <HAL_GPIO_DeInit+0xc2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a5e      	ldr	r2, [pc, #376]	; (80081d4 <HAL_GPIO_DeInit+0x200>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d019      	beq.n	8008092 <HAL_GPIO_DeInit+0xbe>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a5d      	ldr	r2, [pc, #372]	; (80081d8 <HAL_GPIO_DeInit+0x204>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d013      	beq.n	800808e <HAL_GPIO_DeInit+0xba>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a5c      	ldr	r2, [pc, #368]	; (80081dc <HAL_GPIO_DeInit+0x208>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00d      	beq.n	800808a <HAL_GPIO_DeInit+0xb6>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a5b      	ldr	r2, [pc, #364]	; (80081e0 <HAL_GPIO_DeInit+0x20c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d007      	beq.n	8008086 <HAL_GPIO_DeInit+0xb2>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a5a      	ldr	r2, [pc, #360]	; (80081e4 <HAL_GPIO_DeInit+0x210>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d101      	bne.n	8008082 <HAL_GPIO_DeInit+0xae>
 800807e:	2309      	movs	r3, #9
 8008080:	e012      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 8008082:	230a      	movs	r3, #10
 8008084:	e010      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 8008086:	2308      	movs	r3, #8
 8008088:	e00e      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 800808a:	2307      	movs	r3, #7
 800808c:	e00c      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 800808e:	2306      	movs	r3, #6
 8008090:	e00a      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 8008092:	2305      	movs	r3, #5
 8008094:	e008      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 8008096:	2304      	movs	r3, #4
 8008098:	e006      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 800809a:	2303      	movs	r3, #3
 800809c:	e004      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 800809e:	2302      	movs	r3, #2
 80080a0:	e002      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <HAL_GPIO_DeInit+0xd4>
 80080a6:	2300      	movs	r3, #0
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	f002 0203 	and.w	r2, r2, #3
 80080ae:	0092      	lsls	r2, r2, #2
 80080b0:	4093      	lsls	r3, r2
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d132      	bne.n	800811e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80080b8:	4b4b      	ldr	r3, [pc, #300]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	43db      	mvns	r3, r3
 80080c0:	4949      	ldr	r1, [pc, #292]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080c2:	4013      	ands	r3, r2
 80080c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80080c6:	4b48      	ldr	r3, [pc, #288]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	4946      	ldr	r1, [pc, #280]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80080d4:	4b44      	ldr	r3, [pc, #272]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	43db      	mvns	r3, r3
 80080dc:	4942      	ldr	r1, [pc, #264]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080de:	4013      	ands	r3, r2
 80080e0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80080e2:	4b41      	ldr	r3, [pc, #260]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	43db      	mvns	r3, r3
 80080ea:	493f      	ldr	r1, [pc, #252]	; (80081e8 <HAL_GPIO_DeInit+0x214>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	220f      	movs	r2, #15
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008100:	4a2e      	ldr	r2, [pc, #184]	; (80081bc <HAL_GPIO_DeInit+0x1e8>)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	089b      	lsrs	r3, r3, #2
 8008106:	3302      	adds	r3, #2
 8008108:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	43da      	mvns	r2, r3
 8008110:	482a      	ldr	r0, [pc, #168]	; (80081bc <HAL_GPIO_DeInit+0x1e8>)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	089b      	lsrs	r3, r3, #2
 8008116:	400a      	ands	r2, r1
 8008118:	3302      	adds	r3, #2
 800811a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	2103      	movs	r1, #3
 8008128:	fa01 f303 	lsl.w	r3, r1, r3
 800812c:	43db      	mvns	r3, r3
 800812e:	401a      	ands	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	08da      	lsrs	r2, r3, #3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3208      	adds	r2, #8
 800813c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	220f      	movs	r2, #15
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	43db      	mvns	r3, r3
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	08d2      	lsrs	r2, r2, #3
 8008154:	4019      	ands	r1, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3208      	adds	r2, #8
 800815a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	2103      	movs	r1, #3
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	43db      	mvns	r3, r3
 800816e:	401a      	ands	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	2101      	movs	r1, #1
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	fa01 f303 	lsl.w	r3, r1, r3
 8008180:	43db      	mvns	r3, r3
 8008182:	401a      	ands	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	2103      	movs	r1, #3
 8008192:	fa01 f303 	lsl.w	r3, r1, r3
 8008196:	43db      	mvns	r3, r3
 8008198:	401a      	ands	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3301      	adds	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b0f      	cmp	r3, #15
 80081a8:	f67f af22 	bls.w	8007ff0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	40013800 	.word	0x40013800
 80081c0:	40020000 	.word	0x40020000
 80081c4:	40020400 	.word	0x40020400
 80081c8:	40020800 	.word	0x40020800
 80081cc:	40020c00 	.word	0x40020c00
 80081d0:	40021000 	.word	0x40021000
 80081d4:	40021400 	.word	0x40021400
 80081d8:	40021800 	.word	0x40021800
 80081dc:	40021c00 	.word	0x40021c00
 80081e0:	40022000 	.word	0x40022000
 80081e4:	40022400 	.word	0x40022400
 80081e8:	40013c00 	.word	0x40013c00

080081ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	887b      	ldrh	r3, [r7, #2]
 80081fe:	4013      	ands	r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008204:	2301      	movs	r3, #1
 8008206:	73fb      	strb	r3, [r7, #15]
 8008208:	e001      	b.n	800820e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	807b      	strh	r3, [r7, #2]
 8008228:	4613      	mov	r3, r2
 800822a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800822c:	787b      	ldrb	r3, [r7, #1]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008232:	887a      	ldrh	r2, [r7, #2]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008238:	e003      	b.n	8008242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800823a:	887b      	ldrh	r3, [r7, #2]
 800823c:	041a      	lsls	r2, r3, #16
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	619a      	str	r2, [r3, #24]
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800824e:	b480      	push	{r7}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008260:	887a      	ldrh	r2, [r7, #2]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4013      	ands	r3, r2
 8008266:	041a      	lsls	r2, r3, #16
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	43d9      	mvns	r1, r3
 800826c:	887b      	ldrh	r3, [r7, #2]
 800826e:	400b      	ands	r3, r1
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	619a      	str	r2, [r3, #24]
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800828e:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008290:	695a      	ldr	r2, [r3, #20]
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	4013      	ands	r3, r2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d006      	beq.n	80082a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800829a:	4a05      	ldr	r2, [pc, #20]	; (80082b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800829c:	88fb      	ldrh	r3, [r7, #6]
 800829e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082a0:	88fb      	ldrh	r3, [r7, #6]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f806 	bl	80082b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40013c00 	.word	0x40013c00

080082b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80082ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082cc:	b08f      	sub	sp, #60	; 0x3c
 80082ce:	af0a      	add	r7, sp, #40	; 0x28
 80082d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e054      	b.n	8008386 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f00f fe6a 	bl	8017fd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830c:	2b00      	cmp	r3, #0
 800830e:	d102      	bne.n	8008316 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f009 fd7d 	bl	8011e1a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	687e      	ldr	r6, [r7, #4]
 8008328:	466d      	mov	r5, sp
 800832a:	f106 0410 	add.w	r4, r6, #16
 800832e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008336:	e894 0003 	ldmia.w	r4, {r0, r1}
 800833a:	e885 0003 	stmia.w	r5, {r0, r1}
 800833e:	1d33      	adds	r3, r6, #4
 8008340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008342:	6838      	ldr	r0, [r7, #0]
 8008344:	f009 fd00 	bl	8011d48 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2101      	movs	r1, #1
 800834e:	4618      	mov	r0, r3
 8008350:	f009 fd74 	bl	8011e3c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	603b      	str	r3, [r7, #0]
 800835a:	687e      	ldr	r6, [r7, #4]
 800835c:	466d      	mov	r5, sp
 800835e:	f106 0410 	add.w	r4, r6, #16
 8008362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800836a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800836e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008372:	1d33      	adds	r3, r6, #4
 8008374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008376:	6838      	ldr	r0, [r7, #0]
 8008378:	f009 fe86 	bl	8012088 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800838e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800838e:	b590      	push	{r4, r7, lr}
 8008390:	b089      	sub	sp, #36	; 0x24
 8008392:	af04      	add	r7, sp, #16
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	461a      	mov	r2, r3
 800839c:	4603      	mov	r3, r0
 800839e:	70fb      	strb	r3, [r7, #3]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70bb      	strb	r3, [r7, #2]
 80083a4:	4613      	mov	r3, r2
 80083a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_HCD_HC_Init+0x28>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e076      	b.n	80084a4 <HAL_HCD_HC_Init+0x116>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	212c      	movs	r1, #44	; 0x2c
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	4413      	add	r3, r2
 80083ca:	333d      	adds	r3, #61	; 0x3d
 80083cc:	2200      	movs	r2, #0
 80083ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	212c      	movs	r1, #44	; 0x2c
 80083d6:	fb01 f303 	mul.w	r3, r1, r3
 80083da:	4413      	add	r3, r2
 80083dc:	3338      	adds	r3, #56	; 0x38
 80083de:	787a      	ldrb	r2, [r7, #1]
 80083e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	212c      	movs	r1, #44	; 0x2c
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	4413      	add	r3, r2
 80083ee:	3340      	adds	r3, #64	; 0x40
 80083f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80083f2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	212c      	movs	r1, #44	; 0x2c
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	4413      	add	r3, r2
 8008400:	3339      	adds	r3, #57	; 0x39
 8008402:	78fa      	ldrb	r2, [r7, #3]
 8008404:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	212c      	movs	r1, #44	; 0x2c
 800840c:	fb01 f303 	mul.w	r3, r1, r3
 8008410:	4413      	add	r3, r2
 8008412:	333f      	adds	r3, #63	; 0x3f
 8008414:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008418:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	78ba      	ldrb	r2, [r7, #2]
 800841e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008422:	b2d0      	uxtb	r0, r2
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	212c      	movs	r1, #44	; 0x2c
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	4413      	add	r3, r2
 800842e:	333a      	adds	r3, #58	; 0x3a
 8008430:	4602      	mov	r2, r0
 8008432:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8008434:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008438:	2b00      	cmp	r3, #0
 800843a:	da09      	bge.n	8008450 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	212c      	movs	r1, #44	; 0x2c
 8008442:	fb01 f303 	mul.w	r3, r1, r3
 8008446:	4413      	add	r3, r2
 8008448:	333b      	adds	r3, #59	; 0x3b
 800844a:	2201      	movs	r2, #1
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e008      	b.n	8008462 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	212c      	movs	r1, #44	; 0x2c
 8008456:	fb01 f303 	mul.w	r3, r1, r3
 800845a:	4413      	add	r3, r2
 800845c:	333b      	adds	r3, #59	; 0x3b
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	212c      	movs	r1, #44	; 0x2c
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	4413      	add	r3, r2
 800846e:	333c      	adds	r3, #60	; 0x3c
 8008470:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008474:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	787c      	ldrb	r4, [r7, #1]
 800847c:	78ba      	ldrb	r2, [r7, #2]
 800847e:	78f9      	ldrb	r1, [r7, #3]
 8008480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008482:	9302      	str	r3, [sp, #8]
 8008484:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	4623      	mov	r3, r4
 8008492:	f009 ff6f 	bl	8012374 <USB_HC_Init>
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd90      	pop	{r4, r7, pc}

080084ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_HCD_HC_Halt+0x1e>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e00f      	b.n	80084ea <HAL_HCD_HC_Halt+0x3e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	78fa      	ldrb	r2, [r7, #3]
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f00a f9ab 	bl	8012836 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	4608      	mov	r0, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	461a      	mov	r2, r3
 8008502:	4603      	mov	r3, r0
 8008504:	70fb      	strb	r3, [r7, #3]
 8008506:	460b      	mov	r3, r1
 8008508:	70bb      	strb	r3, [r7, #2]
 800850a:	4613      	mov	r3, r2
 800850c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	212c      	movs	r1, #44	; 0x2c
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	4413      	add	r3, r2
 800851a:	333b      	adds	r3, #59	; 0x3b
 800851c:	78ba      	ldrb	r2, [r7, #2]
 800851e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8008520:	78fb      	ldrb	r3, [r7, #3]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	212c      	movs	r1, #44	; 0x2c
 8008526:	fb01 f303 	mul.w	r3, r1, r3
 800852a:	4413      	add	r3, r2
 800852c:	333f      	adds	r3, #63	; 0x3f
 800852e:	787a      	ldrb	r2, [r7, #1]
 8008530:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8008532:	7c3b      	ldrb	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d112      	bne.n	800855e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	212c      	movs	r1, #44	; 0x2c
 800853e:	fb01 f303 	mul.w	r3, r1, r3
 8008542:	4413      	add	r3, r2
 8008544:	3342      	adds	r3, #66	; 0x42
 8008546:	2203      	movs	r2, #3
 8008548:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	212c      	movs	r1, #44	; 0x2c
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	4413      	add	r3, r2
 8008556:	333d      	adds	r3, #61	; 0x3d
 8008558:	7f3a      	ldrb	r2, [r7, #28]
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e008      	b.n	8008570 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	212c      	movs	r1, #44	; 0x2c
 8008564:	fb01 f303 	mul.w	r3, r1, r3
 8008568:	4413      	add	r3, r2
 800856a:	3342      	adds	r3, #66	; 0x42
 800856c:	2202      	movs	r2, #2
 800856e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008570:	787b      	ldrb	r3, [r7, #1]
 8008572:	2b03      	cmp	r3, #3
 8008574:	f200 80c6 	bhi.w	8008704 <HAL_HCD_HC_SubmitRequest+0x210>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	08008591 	.word	0x08008591
 8008584:	080086f1 	.word	0x080086f1
 8008588:	080085f5 	.word	0x080085f5
 800858c:	08008673 	.word	0x08008673
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008590:	7c3b      	ldrb	r3, [r7, #16]
 8008592:	2b01      	cmp	r3, #1
 8008594:	f040 80b8 	bne.w	8008708 <HAL_HCD_HC_SubmitRequest+0x214>
 8008598:	78bb      	ldrb	r3, [r7, #2]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f040 80b4 	bne.w	8008708 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80085a0:	8b3b      	ldrh	r3, [r7, #24]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d108      	bne.n	80085b8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	212c      	movs	r1, #44	; 0x2c
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	4413      	add	r3, r2
 80085b2:	3355      	adds	r3, #85	; 0x55
 80085b4:	2201      	movs	r2, #1
 80085b6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	212c      	movs	r1, #44	; 0x2c
 80085be:	fb01 f303 	mul.w	r3, r1, r3
 80085c2:	4413      	add	r3, r2
 80085c4:	3355      	adds	r3, #85	; 0x55
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d109      	bne.n	80085e0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	212c      	movs	r1, #44	; 0x2c
 80085d2:	fb01 f303 	mul.w	r3, r1, r3
 80085d6:	4413      	add	r3, r2
 80085d8:	3342      	adds	r3, #66	; 0x42
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80085de:	e093      	b.n	8008708 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	212c      	movs	r1, #44	; 0x2c
 80085e6:	fb01 f303 	mul.w	r3, r1, r3
 80085ea:	4413      	add	r3, r2
 80085ec:	3342      	adds	r3, #66	; 0x42
 80085ee:	2202      	movs	r2, #2
 80085f0:	701a      	strb	r2, [r3, #0]
      break;
 80085f2:	e089      	b.n	8008708 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80085f4:	78bb      	ldrb	r3, [r7, #2]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d11d      	bne.n	8008636 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	212c      	movs	r1, #44	; 0x2c
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	4413      	add	r3, r2
 8008606:	3355      	adds	r3, #85	; 0x55
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	212c      	movs	r1, #44	; 0x2c
 8008614:	fb01 f303 	mul.w	r3, r1, r3
 8008618:	4413      	add	r3, r2
 800861a:	3342      	adds	r3, #66	; 0x42
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8008620:	e073      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	212c      	movs	r1, #44	; 0x2c
 8008628:	fb01 f303 	mul.w	r3, r1, r3
 800862c:	4413      	add	r3, r2
 800862e:	3342      	adds	r3, #66	; 0x42
 8008630:	2202      	movs	r2, #2
 8008632:	701a      	strb	r2, [r3, #0]
      break;
 8008634:	e069      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	212c      	movs	r1, #44	; 0x2c
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	4413      	add	r3, r2
 8008642:	3354      	adds	r3, #84	; 0x54
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d109      	bne.n	800865e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	212c      	movs	r1, #44	; 0x2c
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	4413      	add	r3, r2
 8008656:	3342      	adds	r3, #66	; 0x42
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
      break;
 800865c:	e055      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	212c      	movs	r1, #44	; 0x2c
 8008664:	fb01 f303 	mul.w	r3, r1, r3
 8008668:	4413      	add	r3, r2
 800866a:	3342      	adds	r3, #66	; 0x42
 800866c:	2202      	movs	r2, #2
 800866e:	701a      	strb	r2, [r3, #0]
      break;
 8008670:	e04b      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008672:	78bb      	ldrb	r3, [r7, #2]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11d      	bne.n	80086b4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	212c      	movs	r1, #44	; 0x2c
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	3355      	adds	r3, #85	; 0x55
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d109      	bne.n	80086a0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	212c      	movs	r1, #44	; 0x2c
 8008692:	fb01 f303 	mul.w	r3, r1, r3
 8008696:	4413      	add	r3, r2
 8008698:	3342      	adds	r3, #66	; 0x42
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800869e:	e034      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	212c      	movs	r1, #44	; 0x2c
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	3342      	adds	r3, #66	; 0x42
 80086ae:	2202      	movs	r2, #2
 80086b0:	701a      	strb	r2, [r3, #0]
      break;
 80086b2:	e02a      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	212c      	movs	r1, #44	; 0x2c
 80086ba:	fb01 f303 	mul.w	r3, r1, r3
 80086be:	4413      	add	r3, r2
 80086c0:	3354      	adds	r3, #84	; 0x54
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d109      	bne.n	80086dc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	212c      	movs	r1, #44	; 0x2c
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	3342      	adds	r3, #66	; 0x42
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
      break;
 80086da:	e016      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	212c      	movs	r1, #44	; 0x2c
 80086e2:	fb01 f303 	mul.w	r3, r1, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	3342      	adds	r3, #66	; 0x42
 80086ea:	2202      	movs	r2, #2
 80086ec:	701a      	strb	r2, [r3, #0]
      break;
 80086ee:	e00c      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	212c      	movs	r1, #44	; 0x2c
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	3342      	adds	r3, #66	; 0x42
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
      break;
 8008702:	e002      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8008708:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	212c      	movs	r1, #44	; 0x2c
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	4413      	add	r3, r2
 8008716:	3344      	adds	r3, #68	; 0x44
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	8b3a      	ldrh	r2, [r7, #24]
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	202c      	movs	r0, #44	; 0x2c
 8008724:	fb00 f303 	mul.w	r3, r0, r3
 8008728:	440b      	add	r3, r1
 800872a:	334c      	adds	r3, #76	; 0x4c
 800872c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	212c      	movs	r1, #44	; 0x2c
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	4413      	add	r3, r2
 800873a:	3360      	adds	r3, #96	; 0x60
 800873c:	2200      	movs	r2, #0
 800873e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	212c      	movs	r1, #44	; 0x2c
 8008746:	fb01 f303 	mul.w	r3, r1, r3
 800874a:	4413      	add	r3, r2
 800874c:	3350      	adds	r3, #80	; 0x50
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	212c      	movs	r1, #44	; 0x2c
 8008758:	fb01 f303 	mul.w	r3, r1, r3
 800875c:	4413      	add	r3, r2
 800875e:	3339      	adds	r3, #57	; 0x39
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	212c      	movs	r1, #44	; 0x2c
 800876a:	fb01 f303 	mul.w	r3, r1, r3
 800876e:	4413      	add	r3, r2
 8008770:	3361      	adds	r3, #97	; 0x61
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	222c      	movs	r2, #44	; 0x2c
 800877e:	fb02 f303 	mul.w	r3, r2, r3
 8008782:	3338      	adds	r3, #56	; 0x38
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	18d1      	adds	r1, r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	461a      	mov	r2, r3
 8008790:	f009 fefe 	bl	8012590 <USB_HC_StartXfer>
 8008794:	4603      	mov	r3, r0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop

080087a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f009 fc23 	bl	8012002 <USB_GetMode>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b01      	cmp	r3, #1
 80087c0:	f040 80ef 	bne.w	80089a2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f009 fc07 	bl	8011fdc <USB_ReadInterrupts>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80e5 	beq.w	80089a0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f009 fbfe 	bl	8011fdc <USB_ReadInterrupts>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ea:	d104      	bne.n	80087f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80087f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f009 fbee 	bl	8011fdc <USB_ReadInterrupts>
 8008800:	4603      	mov	r3, r0
 8008802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800880a:	d104      	bne.n	8008816 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008814:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f009 fbde 	bl	8011fdc <USB_ReadInterrupts>
 8008820:	4603      	mov	r3, r0
 8008822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800882a:	d104      	bne.n	8008836 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008834:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f009 fbce 	bl	8011fdc <USB_ReadInterrupts>
 8008840:	4603      	mov	r3, r0
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b02      	cmp	r3, #2
 8008848:	d103      	bne.n	8008852 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2202      	movs	r2, #2
 8008850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4618      	mov	r0, r3
 8008858:	f009 fbc0 	bl	8011fdc <USB_ReadInterrupts>
 800885c:	4603      	mov	r3, r0
 800885e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008866:	d115      	bne.n	8008894 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008870:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	d108      	bne.n	8008894 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f00f fc16 	bl	80180b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2101      	movs	r1, #1
 800888e:	4618      	mov	r0, r3
 8008890:	f009 fcaa 	bl	80121e8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f009 fb9f 	bl	8011fdc <USB_ReadInterrupts>
 800889e:	4603      	mov	r3, r0
 80088a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088a8:	d102      	bne.n	80088b0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 f9ff 	bl	8009cae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f009 fb91 	bl	8011fdc <USB_ReadInterrupts>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d106      	bne.n	80088d2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f00f fbd9 	bl	801807c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2208      	movs	r2, #8
 80088d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f009 fb80 	bl	8011fdc <USB_ReadInterrupts>
 80088dc:	4603      	mov	r3, r0
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d101      	bne.n	80088ea <HAL_HCD_IRQHandler+0x14a>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <HAL_HCD_IRQHandler+0x14c>
 80088ea:	2300      	movs	r3, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d012      	beq.n	8008916 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0210 	bic.w	r2, r2, #16
 80088fe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f902 	bl	8009b0a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699a      	ldr	r2, [r3, #24]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0210 	orr.w	r2, r2, #16
 8008914:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f009 fb5e 	bl	8011fdc <USB_ReadInterrupts>
 8008920:	4603      	mov	r3, r0
 8008922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800892a:	d13a      	bne.n	80089a2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f009 ff6f 	bl	8012814 <USB_HC_ReadInterrupt>
 8008936:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008938:	2300      	movs	r3, #0
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e025      	b.n	800898a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f003 030f 	and.w	r3, r3, #15
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	fa22 f303 	lsr.w	r3, r2, r3
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d018      	beq.n	8008984 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4413      	add	r3, r2
 800895a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008968:	d106      	bne.n	8008978 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8ab 	bl	8008acc <HCD_HC_IN_IRQHandler>
 8008976:	e005      	b.n	8008984 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fcc6 	bl	8009310 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	3301      	adds	r3, #1
 8008988:	617b      	str	r3, [r7, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	429a      	cmp	r2, r3
 8008992:	d3d4      	bcc.n	800893e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800899c:	615a      	str	r2, [r3, #20]
 800899e:	e000      	b.n	80089a2 <HAL_HCD_IRQHandler+0x202>
      return;
 80089a0:	bf00      	nop
    }
  }
}
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d101      	bne.n	80089be <HAL_HCD_Start+0x16>
 80089ba:	2302      	movs	r3, #2
 80089bc:	e013      	b.n	80089e6 <HAL_HCD_Start+0x3e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f009 fa14 	bl	8011df8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2101      	movs	r1, #1
 80089d6:	4618      	mov	r0, r3
 80089d8:	f009 fc6a 	bl	80122b0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d101      	bne.n	8008a04 <HAL_HCD_Stop+0x16>
 8008a00:	2302      	movs	r3, #2
 8008a02:	e00d      	b.n	8008a20 <HAL_HCD_Stop+0x32>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f00a f869 	bl	8012ae8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f009 fc11 	bl	801225c <USB_ResetPort>
 8008a3a:	4603      	mov	r3, r0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	212c      	movs	r1, #44	; 0x2c
 8008a56:	fb01 f303 	mul.w	r3, r1, r3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	3360      	adds	r3, #96	; 0x60
 8008a5e:	781b      	ldrb	r3, [r3, #0]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	212c      	movs	r1, #44	; 0x2c
 8008a7e:	fb01 f303 	mul.w	r3, r1, r3
 8008a82:	4413      	add	r3, r2
 8008a84:	3350      	adds	r3, #80	; 0x50
 8008a86:	681b      	ldr	r3, [r3, #0]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f009 fc55 	bl	8012350 <USB_GetCurrentFrame>
 8008aa6:	4603      	mov	r3, r0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f009 fc30 	bl	8012322 <USB_GetHostSpeed>
 8008ac2:	4603      	mov	r3, r0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	d119      	bne.n	8008b30 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2304      	movs	r3, #4
 8008b0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b28:	f043 0302 	orr.w	r3, r3, #2
 8008b2c:	60d3      	str	r3, [r2, #12]
 8008b2e:	e101      	b.n	8008d34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b46:	d12b      	bne.n	8008ba0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b54:	461a      	mov	r2, r3
 8008b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	212c      	movs	r1, #44	; 0x2c
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	4413      	add	r3, r2
 8008b68:	3361      	adds	r3, #97	; 0x61
 8008b6a:	2207      	movs	r2, #7
 8008b6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b88:	f043 0302 	orr.w	r3, r3, #2
 8008b8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	b2d2      	uxtb	r2, r2
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f009 fe4c 	bl	8012836 <USB_HC_Halt>
 8008b9e:	e0c9      	b.n	8008d34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d109      	bne.n	8008bca <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	6093      	str	r3, [r2, #8]
 8008bc8:	e0b4      	b.n	8008d34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d133      	bne.n	8008c48 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bfa:	f043 0302 	orr.w	r3, r3, #2
 8008bfe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	212c      	movs	r1, #44	; 0x2c
 8008c06:	fb01 f303 	mul.w	r3, r1, r3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	3361      	adds	r3, #97	; 0x61
 8008c0e:	2205      	movs	r2, #5
 8008c10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1e:	461a      	mov	r2, r3
 8008c20:	2310      	movs	r3, #16
 8008c22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c30:	461a      	mov	r2, r3
 8008c32:	2308      	movs	r3, #8
 8008c34:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	b2d2      	uxtb	r2, r2
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f009 fdf8 	bl	8012836 <USB_HC_Halt>
 8008c46:	e075      	b.n	8008d34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c5e:	d134      	bne.n	8008cca <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c7a:	f043 0302 	orr.w	r3, r3, #2
 8008c7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	212c      	movs	r1, #44	; 0x2c
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3361      	adds	r3, #97	; 0x61
 8008c8e:	2208      	movs	r2, #8
 8008c90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f009 fdb7 	bl	8012836 <USB_HC_Halt>
 8008cc8:	e034      	b.n	8008d34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cdc:	2b80      	cmp	r3, #128	; 0x80
 8008cde:	d129      	bne.n	8008d34 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	0151      	lsls	r1, r2, #5
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	440a      	add	r2, r1
 8008cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cfa:	f043 0302 	orr.w	r3, r3, #2
 8008cfe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	212c      	movs	r1, #44	; 0x2c
 8008d06:	fb01 f303 	mul.w	r3, r1, r3
 8008d0a:	4413      	add	r3, r2
 8008d0c:	3361      	adds	r3, #97	; 0x61
 8008d0e:	2206      	movs	r2, #6
 8008d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f009 fd8a 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d4a:	d122      	bne.n	8008d92 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d66:	f043 0302 	orr.w	r3, r3, #2
 8008d6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	4611      	mov	r1, r2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f009 fd5d 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d8e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8008d90:	e2ba      	b.n	8009308 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	f040 811b 	bne.w	8008fe0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d019      	beq.n	8008de6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	212c      	movs	r1, #44	; 0x2c
 8008db8:	fb01 f303 	mul.w	r3, r1, r3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3348      	adds	r3, #72	; 0x48
 8008dc0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	0159      	lsls	r1, r3, #5
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	440b      	add	r3, r1
 8008dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	202c      	movs	r0, #44	; 0x2c
 8008ddc:	fb00 f303 	mul.w	r3, r0, r3
 8008de0:	440b      	add	r3, r1
 8008de2:	3350      	adds	r3, #80	; 0x50
 8008de4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	212c      	movs	r1, #44	; 0x2c
 8008dec:	fb01 f303 	mul.w	r3, r1, r3
 8008df0:	4413      	add	r3, r2
 8008df2:	3361      	adds	r3, #97	; 0x61
 8008df4:	2201      	movs	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	212c      	movs	r1, #44	; 0x2c
 8008dfe:	fb01 f303 	mul.w	r3, r1, r3
 8008e02:	4413      	add	r3, r2
 8008e04:	335c      	adds	r3, #92	; 0x5c
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e16:	461a      	mov	r2, r3
 8008e18:	2301      	movs	r3, #1
 8008e1a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	212c      	movs	r1, #44	; 0x2c
 8008e22:	fb01 f303 	mul.w	r3, r1, r3
 8008e26:	4413      	add	r3, r2
 8008e28:	333f      	adds	r3, #63	; 0x3f
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	212c      	movs	r1, #44	; 0x2c
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	333f      	adds	r3, #63	; 0x3f
 8008e3e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d121      	bne.n	8008e88 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e5e:	f043 0302 	orr.w	r3, r3, #2
 8008e62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f009 fce1 	bl	8012836 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e80:	461a      	mov	r2, r3
 8008e82:	2310      	movs	r3, #16
 8008e84:	6093      	str	r3, [r2, #8]
 8008e86:	e066      	b.n	8008f56 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	212c      	movs	r1, #44	; 0x2c
 8008e8e:	fb01 f303 	mul.w	r3, r1, r3
 8008e92:	4413      	add	r3, r2
 8008e94:	333f      	adds	r3, #63	; 0x3f
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d127      	bne.n	8008eec <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	0151      	lsls	r1, r2, #5
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	440a      	add	r2, r1
 8008eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	212c      	movs	r1, #44	; 0x2c
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3360      	adds	r3, #96	; 0x60
 8008eca:	2201      	movs	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	b2d9      	uxtb	r1, r3
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	202c      	movs	r0, #44	; 0x2c
 8008ed8:	fb00 f303 	mul.w	r3, r0, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	3360      	adds	r3, #96	; 0x60
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f00f f8f3 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008eea:	e034      	b.n	8008f56 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	212c      	movs	r1, #44	; 0x2c
 8008ef2:	fb01 f303 	mul.w	r3, r1, r3
 8008ef6:	4413      	add	r3, r2
 8008ef8:	333f      	adds	r3, #63	; 0x3f
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d12a      	bne.n	8008f56 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	212c      	movs	r1, #44	; 0x2c
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	3360      	adds	r3, #96	; 0x60
 8008f0e:	2201      	movs	r2, #1
 8008f10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	212c      	movs	r1, #44	; 0x2c
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3354      	adds	r3, #84	; 0x54
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f083 0301 	eor.w	r3, r3, #1
 8008f26:	b2d8      	uxtb	r0, r3
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	212c      	movs	r1, #44	; 0x2c
 8008f2e:	fb01 f303 	mul.w	r3, r1, r3
 8008f32:	4413      	add	r3, r2
 8008f34:	3354      	adds	r3, #84	; 0x54
 8008f36:	4602      	mov	r2, r0
 8008f38:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	b2d9      	uxtb	r1, r3
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	202c      	movs	r0, #44	; 0x2c
 8008f44:	fb00 f303 	mul.w	r3, r0, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	3360      	adds	r3, #96	; 0x60
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f00f f8bd 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d12b      	bne.n	8008fb6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	212c      	movs	r1, #44	; 0x2c
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	4413      	add	r3, r2
 8008f6a:	3348      	adds	r3, #72	; 0x48
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	202c      	movs	r0, #44	; 0x2c
 8008f74:	fb00 f202 	mul.w	r2, r0, r2
 8008f78:	440a      	add	r2, r1
 8008f7a:	3240      	adds	r2, #64	; 0x40
 8008f7c:	8812      	ldrh	r2, [r2, #0]
 8008f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 81be 	beq.w	8009308 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	212c      	movs	r1, #44	; 0x2c
 8008f92:	fb01 f303 	mul.w	r3, r1, r3
 8008f96:	4413      	add	r3, r2
 8008f98:	3354      	adds	r3, #84	; 0x54
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f083 0301 	eor.w	r3, r3, #1
 8008fa0:	b2d8      	uxtb	r0, r3
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	212c      	movs	r1, #44	; 0x2c
 8008fa8:	fb01 f303 	mul.w	r3, r1, r3
 8008fac:	4413      	add	r3, r2
 8008fae:	3354      	adds	r3, #84	; 0x54
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	701a      	strb	r2, [r3, #0]
}
 8008fb4:	e1a8      	b.n	8009308 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	212c      	movs	r1, #44	; 0x2c
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	3354      	adds	r3, #84	; 0x54
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f083 0301 	eor.w	r3, r3, #1
 8008fca:	b2d8      	uxtb	r0, r3
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	212c      	movs	r1, #44	; 0x2c
 8008fd2:	fb01 f303 	mul.w	r3, r1, r3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3354      	adds	r3, #84	; 0x54
 8008fda:	4602      	mov	r2, r0
 8008fdc:	701a      	strb	r2, [r3, #0]
}
 8008fde:	e193      	b.n	8009308 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	f040 8106 	bne.w	8009204 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	440a      	add	r2, r1
 800900e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009012:	f023 0302 	bic.w	r3, r3, #2
 8009016:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	212c      	movs	r1, #44	; 0x2c
 800901e:	fb01 f303 	mul.w	r3, r1, r3
 8009022:	4413      	add	r3, r2
 8009024:	3361      	adds	r3, #97	; 0x61
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d109      	bne.n	8009040 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	212c      	movs	r1, #44	; 0x2c
 8009032:	fb01 f303 	mul.w	r3, r1, r3
 8009036:	4413      	add	r3, r2
 8009038:	3360      	adds	r3, #96	; 0x60
 800903a:	2201      	movs	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]
 800903e:	e0c9      	b.n	80091d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	212c      	movs	r1, #44	; 0x2c
 8009046:	fb01 f303 	mul.w	r3, r1, r3
 800904a:	4413      	add	r3, r2
 800904c:	3361      	adds	r3, #97	; 0x61
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b05      	cmp	r3, #5
 8009052:	d109      	bne.n	8009068 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	212c      	movs	r1, #44	; 0x2c
 800905a:	fb01 f303 	mul.w	r3, r1, r3
 800905e:	4413      	add	r3, r2
 8009060:	3360      	adds	r3, #96	; 0x60
 8009062:	2205      	movs	r2, #5
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	e0b5      	b.n	80091d4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	212c      	movs	r1, #44	; 0x2c
 800906e:	fb01 f303 	mul.w	r3, r1, r3
 8009072:	4413      	add	r3, r2
 8009074:	3361      	adds	r3, #97	; 0x61
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b06      	cmp	r3, #6
 800907a:	d009      	beq.n	8009090 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	212c      	movs	r1, #44	; 0x2c
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	4413      	add	r3, r2
 8009088:	3361      	adds	r3, #97	; 0x61
 800908a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800908c:	2b08      	cmp	r3, #8
 800908e:	d150      	bne.n	8009132 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	212c      	movs	r1, #44	; 0x2c
 8009096:	fb01 f303 	mul.w	r3, r1, r3
 800909a:	4413      	add	r3, r2
 800909c:	335c      	adds	r3, #92	; 0x5c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	202c      	movs	r0, #44	; 0x2c
 80090a8:	fb00 f303 	mul.w	r3, r0, r3
 80090ac:	440b      	add	r3, r1
 80090ae:	335c      	adds	r3, #92	; 0x5c
 80090b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	212c      	movs	r1, #44	; 0x2c
 80090b8:	fb01 f303 	mul.w	r3, r1, r3
 80090bc:	4413      	add	r3, r2
 80090be:	335c      	adds	r3, #92	; 0x5c
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d912      	bls.n	80090ec <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	212c      	movs	r1, #44	; 0x2c
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	4413      	add	r3, r2
 80090d2:	335c      	adds	r3, #92	; 0x5c
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	212c      	movs	r1, #44	; 0x2c
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	3360      	adds	r3, #96	; 0x60
 80090e6:	2204      	movs	r2, #4
 80090e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80090ea:	e073      	b.n	80091d4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	212c      	movs	r1, #44	; 0x2c
 80090f2:	fb01 f303 	mul.w	r3, r1, r3
 80090f6:	4413      	add	r3, r2
 80090f8:	3360      	adds	r3, #96	; 0x60
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	4413      	add	r3, r2
 8009106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009114:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800911c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	4413      	add	r3, r2
 8009126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800912a:	461a      	mov	r2, r3
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009130:	e050      	b.n	80091d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	212c      	movs	r1, #44	; 0x2c
 8009138:	fb01 f303 	mul.w	r3, r1, r3
 800913c:	4413      	add	r3, r2
 800913e:	3361      	adds	r3, #97	; 0x61
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b03      	cmp	r3, #3
 8009144:	d122      	bne.n	800918c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	212c      	movs	r1, #44	; 0x2c
 800914c:	fb01 f303 	mul.w	r3, r1, r3
 8009150:	4413      	add	r3, r2
 8009152:	3360      	adds	r3, #96	; 0x60
 8009154:	2202      	movs	r2, #2
 8009156:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	4413      	add	r3, r2
 8009160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800916e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009176:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	4413      	add	r3, r2
 8009180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009184:	461a      	mov	r2, r3
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e023      	b.n	80091d4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	212c      	movs	r1, #44	; 0x2c
 8009192:	fb01 f303 	mul.w	r3, r1, r3
 8009196:	4413      	add	r3, r2
 8009198:	3361      	adds	r3, #97	; 0x61
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b07      	cmp	r3, #7
 800919e:	d119      	bne.n	80091d4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	212c      	movs	r1, #44	; 0x2c
 80091a6:	fb01 f303 	mul.w	r3, r1, r3
 80091aa:	4413      	add	r3, r2
 80091ac:	335c      	adds	r3, #92	; 0x5c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	202c      	movs	r0, #44	; 0x2c
 80091b8:	fb00 f303 	mul.w	r3, r0, r3
 80091bc:	440b      	add	r3, r1
 80091be:	335c      	adds	r3, #92	; 0x5c
 80091c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	212c      	movs	r1, #44	; 0x2c
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	4413      	add	r3, r2
 80091ce:	3360      	adds	r3, #96	; 0x60
 80091d0:	2204      	movs	r2, #4
 80091d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e0:	461a      	mov	r2, r3
 80091e2:	2302      	movs	r3, #2
 80091e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	b2d9      	uxtb	r1, r3
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	202c      	movs	r0, #44	; 0x2c
 80091f0:	fb00 f303 	mul.w	r3, r0, r3
 80091f4:	4413      	add	r3, r2
 80091f6:	3360      	adds	r3, #96	; 0x60
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f00e ff67 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009202:	e081      	b.n	8009308 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	4413      	add	r3, r2
 800920c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 0310 	and.w	r3, r3, #16
 8009216:	2b10      	cmp	r3, #16
 8009218:	d176      	bne.n	8009308 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	212c      	movs	r1, #44	; 0x2c
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	4413      	add	r3, r2
 8009226:	333f      	adds	r3, #63	; 0x3f
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b03      	cmp	r3, #3
 800922c:	d121      	bne.n	8009272 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	212c      	movs	r1, #44	; 0x2c
 8009234:	fb01 f303 	mul.w	r3, r1, r3
 8009238:	4413      	add	r3, r2
 800923a:	335c      	adds	r3, #92	; 0x5c
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	4413      	add	r3, r2
 8009248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	440a      	add	r2, r1
 8009256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800925a:	f043 0302 	orr.w	r3, r3, #2
 800925e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f009 fae3 	bl	8012836 <USB_HC_Halt>
 8009270:	e041      	b.n	80092f6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	212c      	movs	r1, #44	; 0x2c
 8009278:	fb01 f303 	mul.w	r3, r1, r3
 800927c:	4413      	add	r3, r2
 800927e:	333f      	adds	r3, #63	; 0x3f
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	212c      	movs	r1, #44	; 0x2c
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	4413      	add	r3, r2
 8009292:	333f      	adds	r3, #63	; 0x3f
 8009294:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009296:	2b02      	cmp	r3, #2
 8009298:	d12d      	bne.n	80092f6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	212c      	movs	r1, #44	; 0x2c
 80092a0:	fb01 f303 	mul.w	r3, r1, r3
 80092a4:	4413      	add	r3, r2
 80092a6:	335c      	adds	r3, #92	; 0x5c
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d120      	bne.n	80092f6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	212c      	movs	r1, #44	; 0x2c
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	4413      	add	r3, r2
 80092c0:	3361      	adds	r3, #97	; 0x61
 80092c2:	2203      	movs	r2, #3
 80092c4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092e0:	f043 0302 	orr.w	r3, r3, #2
 80092e4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f009 faa0 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009302:	461a      	mov	r2, r3
 8009304:	2310      	movs	r3, #16
 8009306:	6093      	str	r3, [r2, #8]
}
 8009308:	bf00      	nop
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	4413      	add	r3, r2
 8009332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b04      	cmp	r3, #4
 800933e:	d119      	bne.n	8009374 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	4413      	add	r3, r2
 8009348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800934c:	461a      	mov	r2, r3
 800934e:	2304      	movs	r3, #4
 8009350:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	4413      	add	r3, r2
 800935a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	440a      	add	r2, r1
 8009368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8009372:	e3c6      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	4413      	add	r3, r2
 800937c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b20      	cmp	r3, #32
 8009388:	d13e      	bne.n	8009408 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009396:	461a      	mov	r2, r3
 8009398:	2320      	movs	r3, #32
 800939a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	212c      	movs	r1, #44	; 0x2c
 80093a2:	fb01 f303 	mul.w	r3, r1, r3
 80093a6:	4413      	add	r3, r2
 80093a8:	333d      	adds	r3, #61	; 0x3d
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	f040 83a8 	bne.w	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	212c      	movs	r1, #44	; 0x2c
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	4413      	add	r3, r2
 80093be:	333d      	adds	r3, #61	; 0x3d
 80093c0:	2200      	movs	r2, #0
 80093c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	212c      	movs	r1, #44	; 0x2c
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	3360      	adds	r3, #96	; 0x60
 80093d2:	2202      	movs	r2, #2
 80093d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093f0:	f043 0302 	orr.w	r3, r3, #2
 80093f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	b2d2      	uxtb	r2, r2
 80093fe:	4611      	mov	r1, r2
 8009400:	4618      	mov	r0, r3
 8009402:	f009 fa18 	bl	8012836 <USB_HC_Halt>
}
 8009406:	e37c      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800941a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800941e:	d122      	bne.n	8009466 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	4413      	add	r3, r2
 8009428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	0151      	lsls	r1, r2, #5
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	440a      	add	r2, r1
 8009436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800943a:	f043 0302 	orr.w	r3, r3, #2
 800943e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f009 f9f3 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	461a      	mov	r2, r3
 800945e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009462:	6093      	str	r3, [r2, #8]
}
 8009464:	e34d      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	4413      	add	r3, r2
 800946e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b01      	cmp	r3, #1
 800947a:	d150      	bne.n	800951e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	212c      	movs	r1, #44	; 0x2c
 8009482:	fb01 f303 	mul.w	r3, r1, r3
 8009486:	4413      	add	r3, r2
 8009488:	335c      	adds	r3, #92	; 0x5c
 800948a:	2200      	movs	r2, #0
 800948c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	4413      	add	r3, r2
 8009496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d111      	bne.n	80094c8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	212c      	movs	r1, #44	; 0x2c
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	333d      	adds	r3, #61	; 0x3d
 80094b2:	2201      	movs	r2, #1
 80094b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c2:	461a      	mov	r2, r3
 80094c4:	2340      	movs	r3, #64	; 0x40
 80094c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	0151      	lsls	r1, r2, #5
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	440a      	add	r2, r1
 80094de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094e2:	f043 0302 	orr.w	r3, r3, #2
 80094e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f009 f99f 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009504:	461a      	mov	r2, r3
 8009506:	2301      	movs	r3, #1
 8009508:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	212c      	movs	r1, #44	; 0x2c
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	4413      	add	r3, r2
 8009516:	3361      	adds	r3, #97	; 0x61
 8009518:	2201      	movs	r2, #1
 800951a:	701a      	strb	r2, [r3, #0]
}
 800951c:	e2f1      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	4413      	add	r3, r2
 8009526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009530:	2b40      	cmp	r3, #64	; 0x40
 8009532:	d13c      	bne.n	80095ae <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	212c      	movs	r1, #44	; 0x2c
 800953a:	fb01 f303 	mul.w	r3, r1, r3
 800953e:	4413      	add	r3, r2
 8009540:	3361      	adds	r3, #97	; 0x61
 8009542:	2204      	movs	r2, #4
 8009544:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	212c      	movs	r1, #44	; 0x2c
 800954c:	fb01 f303 	mul.w	r3, r1, r3
 8009550:	4413      	add	r3, r2
 8009552:	333d      	adds	r3, #61	; 0x3d
 8009554:	2201      	movs	r2, #1
 8009556:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	212c      	movs	r1, #44	; 0x2c
 800955e:	fb01 f303 	mul.w	r3, r1, r3
 8009562:	4413      	add	r3, r2
 8009564:	335c      	adds	r3, #92	; 0x5c
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	4413      	add	r3, r2
 8009572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	440a      	add	r2, r1
 8009580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009584:	f043 0302 	orr.w	r3, r3, #2
 8009588:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f009 f94e 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a6:	461a      	mov	r2, r3
 80095a8:	2340      	movs	r3, #64	; 0x40
 80095aa:	6093      	str	r3, [r2, #8]
}
 80095ac:	e2a9      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	d12a      	bne.n	800961a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095d0:	461a      	mov	r2, r3
 80095d2:	2308      	movs	r3, #8
 80095d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095f0:	f043 0302 	orr.w	r3, r3, #2
 80095f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	b2d2      	uxtb	r2, r2
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f009 f918 	bl	8012836 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	212c      	movs	r1, #44	; 0x2c
 800960c:	fb01 f303 	mul.w	r3, r1, r3
 8009610:	4413      	add	r3, r2
 8009612:	3361      	adds	r3, #97	; 0x61
 8009614:	2205      	movs	r2, #5
 8009616:	701a      	strb	r2, [r3, #0]
}
 8009618:	e273      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	4413      	add	r3, r2
 8009622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b10      	cmp	r3, #16
 800962e:	d150      	bne.n	80096d2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	212c      	movs	r1, #44	; 0x2c
 8009636:	fb01 f303 	mul.w	r3, r1, r3
 800963a:	4413      	add	r3, r2
 800963c:	335c      	adds	r3, #92	; 0x5c
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	212c      	movs	r1, #44	; 0x2c
 8009648:	fb01 f303 	mul.w	r3, r1, r3
 800964c:	4413      	add	r3, r2
 800964e:	3361      	adds	r3, #97	; 0x61
 8009650:	2203      	movs	r2, #3
 8009652:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	212c      	movs	r1, #44	; 0x2c
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	4413      	add	r3, r2
 8009660:	333d      	adds	r3, #61	; 0x3d
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d112      	bne.n	800968e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	212c      	movs	r1, #44	; 0x2c
 800966e:	fb01 f303 	mul.w	r3, r1, r3
 8009672:	4413      	add	r3, r2
 8009674:	333c      	adds	r3, #60	; 0x3c
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d108      	bne.n	800968e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	212c      	movs	r1, #44	; 0x2c
 8009682:	fb01 f303 	mul.w	r3, r1, r3
 8009686:	4413      	add	r3, r2
 8009688:	333d      	adds	r3, #61	; 0x3d
 800968a:	2201      	movs	r2, #1
 800968c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	4413      	add	r3, r2
 8009696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096a8:	f043 0302 	orr.w	r3, r3, #2
 80096ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f009 f8bc 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ca:	461a      	mov	r2, r3
 80096cc:	2310      	movs	r3, #16
 80096ce:	6093      	str	r3, [r2, #8]
}
 80096d0:	e217      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e4:	2b80      	cmp	r3, #128	; 0x80
 80096e6:	d174      	bne.n	80097d2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d121      	bne.n	8009734 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	212c      	movs	r1, #44	; 0x2c
 80096f6:	fb01 f303 	mul.w	r3, r1, r3
 80096fa:	4413      	add	r3, r2
 80096fc:	3361      	adds	r3, #97	; 0x61
 80096fe:	2206      	movs	r2, #6
 8009700:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	4413      	add	r3, r2
 800970a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	0151      	lsls	r1, r2, #5
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	440a      	add	r2, r1
 8009718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800971c:	f043 0302 	orr.w	r3, r3, #2
 8009720:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	b2d2      	uxtb	r2, r2
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f009 f882 	bl	8012836 <USB_HC_Halt>
 8009732:	e044      	b.n	80097be <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	212c      	movs	r1, #44	; 0x2c
 800973a:	fb01 f303 	mul.w	r3, r1, r3
 800973e:	4413      	add	r3, r2
 8009740:	335c      	adds	r3, #92	; 0x5c
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	202c      	movs	r0, #44	; 0x2c
 800974c:	fb00 f303 	mul.w	r3, r0, r3
 8009750:	440b      	add	r3, r1
 8009752:	335c      	adds	r3, #92	; 0x5c
 8009754:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	212c      	movs	r1, #44	; 0x2c
 800975c:	fb01 f303 	mul.w	r3, r1, r3
 8009760:	4413      	add	r3, r2
 8009762:	335c      	adds	r3, #92	; 0x5c
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b02      	cmp	r3, #2
 8009768:	d920      	bls.n	80097ac <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	212c      	movs	r1, #44	; 0x2c
 8009770:	fb01 f303 	mul.w	r3, r1, r3
 8009774:	4413      	add	r3, r2
 8009776:	335c      	adds	r3, #92	; 0x5c
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	212c      	movs	r1, #44	; 0x2c
 8009782:	fb01 f303 	mul.w	r3, r1, r3
 8009786:	4413      	add	r3, r2
 8009788:	3360      	adds	r3, #96	; 0x60
 800978a:	2204      	movs	r2, #4
 800978c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	b2d9      	uxtb	r1, r3
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	202c      	movs	r0, #44	; 0x2c
 8009798:	fb00 f303 	mul.w	r3, r0, r3
 800979c:	4413      	add	r3, r2
 800979e:	3360      	adds	r3, #96	; 0x60
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f00e fc93 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80097aa:	e008      	b.n	80097be <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	212c      	movs	r1, #44	; 0x2c
 80097b2:	fb01 f303 	mul.w	r3, r1, r3
 80097b6:	4413      	add	r3, r2
 80097b8:	3360      	adds	r3, #96	; 0x60
 80097ba:	2202      	movs	r2, #2
 80097bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ca:	461a      	mov	r2, r3
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	6093      	str	r3, [r2, #8]
}
 80097d0:	e197      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e8:	d134      	bne.n	8009854 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009804:	f043 0302 	orr.w	r3, r3, #2
 8009808:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	b2d2      	uxtb	r2, r2
 8009812:	4611      	mov	r1, r2
 8009814:	4618      	mov	r0, r3
 8009816:	f009 f80e 	bl	8012836 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	4413      	add	r3, r2
 8009822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009826:	461a      	mov	r2, r3
 8009828:	2310      	movs	r3, #16
 800982a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	4413      	add	r3, r2
 8009834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009838:	461a      	mov	r2, r3
 800983a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800983e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	212c      	movs	r1, #44	; 0x2c
 8009846:	fb01 f303 	mul.w	r3, r1, r3
 800984a:	4413      	add	r3, r2
 800984c:	3361      	adds	r3, #97	; 0x61
 800984e:	2208      	movs	r2, #8
 8009850:	701a      	strb	r2, [r3, #0]
}
 8009852:	e156      	b.n	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	4413      	add	r3, r2
 800985c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b02      	cmp	r3, #2
 8009868:	f040 814b 	bne.w	8009b02 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	4413      	add	r3, r2
 8009874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	440a      	add	r2, r1
 8009882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009886:	f023 0302 	bic.w	r3, r3, #2
 800988a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	212c      	movs	r1, #44	; 0x2c
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	4413      	add	r3, r2
 8009898:	3361      	adds	r3, #97	; 0x61
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d179      	bne.n	8009994 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	212c      	movs	r1, #44	; 0x2c
 80098a6:	fb01 f303 	mul.w	r3, r1, r3
 80098aa:	4413      	add	r3, r2
 80098ac:	3360      	adds	r3, #96	; 0x60
 80098ae:	2201      	movs	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	212c      	movs	r1, #44	; 0x2c
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	333f      	adds	r3, #63	; 0x3f
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d00a      	beq.n	80098dc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	212c      	movs	r1, #44	; 0x2c
 80098cc:	fb01 f303 	mul.w	r3, r1, r3
 80098d0:	4413      	add	r3, r2
 80098d2:	333f      	adds	r3, #63	; 0x3f
 80098d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	f040 80fc 	bne.w	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d142      	bne.n	800996a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	212c      	movs	r1, #44	; 0x2c
 80098ea:	fb01 f303 	mul.w	r3, r1, r3
 80098ee:	4413      	add	r3, r2
 80098f0:	334c      	adds	r3, #76	; 0x4c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 80ed 	beq.w	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	212c      	movs	r1, #44	; 0x2c
 8009900:	fb01 f303 	mul.w	r3, r1, r3
 8009904:	4413      	add	r3, r2
 8009906:	334c      	adds	r3, #76	; 0x4c
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	202c      	movs	r0, #44	; 0x2c
 8009910:	fb00 f202 	mul.w	r2, r0, r2
 8009914:	440a      	add	r2, r1
 8009916:	3240      	adds	r2, #64	; 0x40
 8009918:	8812      	ldrh	r2, [r2, #0]
 800991a:	4413      	add	r3, r2
 800991c:	3b01      	subs	r3, #1
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	202c      	movs	r0, #44	; 0x2c
 8009924:	fb00 f202 	mul.w	r2, r0, r2
 8009928:	440a      	add	r2, r1
 800992a:	3240      	adds	r2, #64	; 0x40
 800992c:	8812      	ldrh	r2, [r2, #0]
 800992e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80ca 	beq.w	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	212c      	movs	r1, #44	; 0x2c
 8009946:	fb01 f303 	mul.w	r3, r1, r3
 800994a:	4413      	add	r3, r2
 800994c:	3355      	adds	r3, #85	; 0x55
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	f083 0301 	eor.w	r3, r3, #1
 8009954:	b2d8      	uxtb	r0, r3
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	212c      	movs	r1, #44	; 0x2c
 800995c:	fb01 f303 	mul.w	r3, r1, r3
 8009960:	4413      	add	r3, r2
 8009962:	3355      	adds	r3, #85	; 0x55
 8009964:	4602      	mov	r2, r0
 8009966:	701a      	strb	r2, [r3, #0]
 8009968:	e0b4      	b.n	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	212c      	movs	r1, #44	; 0x2c
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	4413      	add	r3, r2
 8009976:	3355      	adds	r3, #85	; 0x55
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	f083 0301 	eor.w	r3, r3, #1
 800997e:	b2d8      	uxtb	r0, r3
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	212c      	movs	r1, #44	; 0x2c
 8009986:	fb01 f303 	mul.w	r3, r1, r3
 800998a:	4413      	add	r3, r2
 800998c:	3355      	adds	r3, #85	; 0x55
 800998e:	4602      	mov	r2, r0
 8009990:	701a      	strb	r2, [r3, #0]
 8009992:	e09f      	b.n	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	212c      	movs	r1, #44	; 0x2c
 800999a:	fb01 f303 	mul.w	r3, r1, r3
 800999e:	4413      	add	r3, r2
 80099a0:	3361      	adds	r3, #97	; 0x61
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d109      	bne.n	80099bc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	212c      	movs	r1, #44	; 0x2c
 80099ae:	fb01 f303 	mul.w	r3, r1, r3
 80099b2:	4413      	add	r3, r2
 80099b4:	3360      	adds	r3, #96	; 0x60
 80099b6:	2202      	movs	r2, #2
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	e08b      	b.n	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	212c      	movs	r1, #44	; 0x2c
 80099c2:	fb01 f303 	mul.w	r3, r1, r3
 80099c6:	4413      	add	r3, r2
 80099c8:	3361      	adds	r3, #97	; 0x61
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d109      	bne.n	80099e4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	212c      	movs	r1, #44	; 0x2c
 80099d6:	fb01 f303 	mul.w	r3, r1, r3
 80099da:	4413      	add	r3, r2
 80099dc:	3360      	adds	r3, #96	; 0x60
 80099de:	2202      	movs	r2, #2
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	e077      	b.n	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	212c      	movs	r1, #44	; 0x2c
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	3361      	adds	r3, #97	; 0x61
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b05      	cmp	r3, #5
 80099f6:	d109      	bne.n	8009a0c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	212c      	movs	r1, #44	; 0x2c
 80099fe:	fb01 f303 	mul.w	r3, r1, r3
 8009a02:	4413      	add	r3, r2
 8009a04:	3360      	adds	r3, #96	; 0x60
 8009a06:	2205      	movs	r2, #5
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	e063      	b.n	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	212c      	movs	r1, #44	; 0x2c
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	4413      	add	r3, r2
 8009a18:	3361      	adds	r3, #97	; 0x61
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b06      	cmp	r3, #6
 8009a1e:	d009      	beq.n	8009a34 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	212c      	movs	r1, #44	; 0x2c
 8009a26:	fb01 f303 	mul.w	r3, r1, r3
 8009a2a:	4413      	add	r3, r2
 8009a2c:	3361      	adds	r3, #97	; 0x61
 8009a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d14f      	bne.n	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	212c      	movs	r1, #44	; 0x2c
 8009a3a:	fb01 f303 	mul.w	r3, r1, r3
 8009a3e:	4413      	add	r3, r2
 8009a40:	335c      	adds	r3, #92	; 0x5c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	1c5a      	adds	r2, r3, #1
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	202c      	movs	r0, #44	; 0x2c
 8009a4c:	fb00 f303 	mul.w	r3, r0, r3
 8009a50:	440b      	add	r3, r1
 8009a52:	335c      	adds	r3, #92	; 0x5c
 8009a54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	212c      	movs	r1, #44	; 0x2c
 8009a5c:	fb01 f303 	mul.w	r3, r1, r3
 8009a60:	4413      	add	r3, r2
 8009a62:	335c      	adds	r3, #92	; 0x5c
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d912      	bls.n	8009a90 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	212c      	movs	r1, #44	; 0x2c
 8009a70:	fb01 f303 	mul.w	r3, r1, r3
 8009a74:	4413      	add	r3, r2
 8009a76:	335c      	adds	r3, #92	; 0x5c
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	212c      	movs	r1, #44	; 0x2c
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	3360      	adds	r3, #96	; 0x60
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	701a      	strb	r2, [r3, #0]
 8009a8e:	e021      	b.n	8009ad4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	212c      	movs	r1, #44	; 0x2c
 8009a96:	fb01 f303 	mul.w	r3, r1, r3
 8009a9a:	4413      	add	r3, r2
 8009a9c:	3360      	adds	r3, #96	; 0x60
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ab8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ac0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ace:	461a      	mov	r2, r3
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	b2d9      	uxtb	r1, r3
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	202c      	movs	r0, #44	; 0x2c
 8009af0:	fb00 f303 	mul.w	r3, r0, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	3360      	adds	r3, #96	; 0x60
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f00e fae7 	bl	80180d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8009b02:	bf00      	nop
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b08a      	sub	sp, #40	; 0x28
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f003 030f 	and.w	r3, r3, #15
 8009b2a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	0c5b      	lsrs	r3, r3, #17
 8009b30:	f003 030f 	and.w	r3, r3, #15
 8009b34:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	091b      	lsrs	r3, r3, #4
 8009b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b3e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d004      	beq.n	8009b50 <HCD_RXQLVL_IRQHandler+0x46>
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	f000 80a9 	beq.w	8009ca0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009b4e:	e0aa      	b.n	8009ca6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 80a6 	beq.w	8009ca4 <HCD_RXQLVL_IRQHandler+0x19a>
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	212c      	movs	r1, #44	; 0x2c
 8009b5e:	fb01 f303 	mul.w	r3, r1, r3
 8009b62:	4413      	add	r3, r2
 8009b64:	3344      	adds	r3, #68	; 0x44
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 809b 	beq.w	8009ca4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	212c      	movs	r1, #44	; 0x2c
 8009b74:	fb01 f303 	mul.w	r3, r1, r3
 8009b78:	4413      	add	r3, r2
 8009b7a:	3350      	adds	r3, #80	; 0x50
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	441a      	add	r2, r3
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	202c      	movs	r0, #44	; 0x2c
 8009b88:	fb00 f303 	mul.w	r3, r0, r3
 8009b8c:	440b      	add	r3, r1
 8009b8e:	334c      	adds	r3, #76	; 0x4c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d87a      	bhi.n	8009c8c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	212c      	movs	r1, #44	; 0x2c
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3344      	adds	r3, #68	; 0x44
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	b292      	uxth	r2, r2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f008 f9eb 	bl	8011f8a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	212c      	movs	r1, #44	; 0x2c
 8009bba:	fb01 f303 	mul.w	r3, r1, r3
 8009bbe:	4413      	add	r3, r2
 8009bc0:	3344      	adds	r3, #68	; 0x44
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	441a      	add	r2, r3
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	202c      	movs	r0, #44	; 0x2c
 8009bce:	fb00 f303 	mul.w	r3, r0, r3
 8009bd2:	440b      	add	r3, r1
 8009bd4:	3344      	adds	r3, #68	; 0x44
 8009bd6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	212c      	movs	r1, #44	; 0x2c
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	4413      	add	r3, r2
 8009be4:	3350      	adds	r3, #80	; 0x50
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	441a      	add	r2, r3
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	202c      	movs	r0, #44	; 0x2c
 8009bf2:	fb00 f303 	mul.w	r3, r0, r3
 8009bf6:	440b      	add	r3, r1
 8009bf8:	3350      	adds	r3, #80	; 0x50
 8009bfa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	0cdb      	lsrs	r3, r3, #19
 8009c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c10:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	212c      	movs	r1, #44	; 0x2c
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	3340      	adds	r3, #64	; 0x40
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d13c      	bne.n	8009ca4 <HCD_RXQLVL_IRQHandler+0x19a>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d039      	beq.n	8009ca4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c46:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c4e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	212c      	movs	r1, #44	; 0x2c
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	3354      	adds	r3, #84	; 0x54
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	f083 0301 	eor.w	r3, r3, #1
 8009c76:	b2d8      	uxtb	r0, r3
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	212c      	movs	r1, #44	; 0x2c
 8009c7e:	fb01 f303 	mul.w	r3, r1, r3
 8009c82:	4413      	add	r3, r2
 8009c84:	3354      	adds	r3, #84	; 0x54
 8009c86:	4602      	mov	r2, r0
 8009c88:	701a      	strb	r2, [r3, #0]
      break;
 8009c8a:	e00b      	b.n	8009ca4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	212c      	movs	r1, #44	; 0x2c
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	3360      	adds	r3, #96	; 0x60
 8009c9a:	2204      	movs	r2, #4
 8009c9c:	701a      	strb	r2, [r3, #0]
      break;
 8009c9e:	e001      	b.n	8009ca4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e000      	b.n	8009ca6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009ca4:	bf00      	nop
  }
}
 8009ca6:	bf00      	nop
 8009ca8:	3728      	adds	r7, #40	; 0x28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b086      	sub	sp, #24
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009cda:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d10b      	bne.n	8009cfe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d102      	bne.n	8009cf6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f00e f9d1 	bl	8018098 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	f043 0302 	orr.w	r3, r3, #2
 8009cfc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d132      	bne.n	8009d6e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f043 0308 	orr.w	r3, r3, #8
 8009d0e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f003 0304 	and.w	r3, r3, #4
 8009d16:	2b04      	cmp	r3, #4
 8009d18:	d126      	bne.n	8009d68 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d113      	bne.n	8009d4a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d2c:	d106      	bne.n	8009d3c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2102      	movs	r1, #2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f008 fa57 	bl	80121e8 <USB_InitFSLSPClkSel>
 8009d3a:	e011      	b.n	8009d60 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2101      	movs	r1, #1
 8009d42:	4618      	mov	r0, r3
 8009d44:	f008 fa50 	bl	80121e8 <USB_InitFSLSPClkSel>
 8009d48:	e00a      	b.n	8009d60 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d106      	bne.n	8009d60 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d58:	461a      	mov	r2, r3
 8009d5a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009d5e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f00e f9c7 	bl	80180f4 <HAL_HCD_PortEnabled_Callback>
 8009d66:	e002      	b.n	8009d6e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f00e f9d1 	bl	8018110 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f003 0320 	and.w	r3, r3, #32
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d103      	bne.n	8009d80 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f043 0320 	orr.w	r3, r3, #32
 8009d7e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009d86:	461a      	mov	r2, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	6013      	str	r3, [r2, #0]
}
 8009d8c:	bf00      	nop
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e07f      	b.n	8009ea6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f9 f8ea 	bl	8002f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2224      	movs	r2, #36	; 0x24
 8009dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 0201 	bic.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009de4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009df4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d107      	bne.n	8009e0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e0a:	609a      	str	r2, [r3, #8]
 8009e0c:	e006      	b.n	8009e1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009e1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d104      	bne.n	8009e2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6859      	ldr	r1, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	4b1d      	ldr	r3, [pc, #116]	; (8009eb0 <HAL_I2C_Init+0x11c>)
 8009e3a:	430b      	orrs	r3, r1
 8009e3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691a      	ldr	r2, [r3, #16]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	ea42 0103 	orr.w	r1, r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	021a      	lsls	r2, r3, #8
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	69d9      	ldr	r1, [r3, #28]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1a      	ldr	r2, [r3, #32]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0201 	orr.w	r2, r2, #1
 8009e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	02008000 	.word	0x02008000

08009eb4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e021      	b.n	8009f0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2224      	movs	r2, #36	; 0x24
 8009eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0201 	bic.w	r2, r2, #1
 8009edc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7f9 f8d0 	bl	8003084 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af02      	add	r7, sp, #8
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	4611      	mov	r1, r2
 8009f20:	461a      	mov	r2, r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	817b      	strh	r3, [r7, #10]
 8009f26:	460b      	mov	r3, r1
 8009f28:	813b      	strh	r3, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	f040 80f9 	bne.w	800a12e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_I2C_Mem_Write+0x34>
 8009f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d105      	bne.n	8009f54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e0ed      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_I2C_Mem_Write+0x4e>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e0e6      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009f6a:	f7fc f859 	bl	8006020 <HAL_GetTick>
 8009f6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	2319      	movs	r3, #25
 8009f76:	2201      	movs	r2, #1
 8009f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fac3 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e0d1      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2221      	movs	r2, #33	; 0x21
 8009f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2240      	movs	r2, #64	; 0x40
 8009f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a3a      	ldr	r2, [r7, #32]
 8009fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fb4:	88f8      	ldrh	r0, [r7, #6]
 8009fb6:	893a      	ldrh	r2, [r7, #8]
 8009fb8:	8979      	ldrh	r1, [r7, #10]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f9d3 	bl	800a370 <I2C_RequestMemoryWrite>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e0a9      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2bff      	cmp	r3, #255	; 0xff
 8009fe4:	d90e      	bls.n	800a004 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	22ff      	movs	r2, #255	; 0xff
 8009fea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	8979      	ldrh	r1, [r7, #10]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 fba5 	bl	800a74c <I2C_TransferConfig>
 800a002:	e00f      	b.n	800a024 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a008:	b29a      	uxth	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a012:	b2da      	uxtb	r2, r3
 800a014:	8979      	ldrh	r1, [r7, #10]
 800a016:	2300      	movs	r3, #0
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 fb94 	bl	800a74c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 faad 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e07b      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	781a      	ldrb	r2, [r3, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a052:	b29b      	uxth	r3, r3
 800a054:	3b01      	subs	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a060:	3b01      	subs	r3, #1
 800a062:	b29a      	uxth	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d034      	beq.n	800a0dc <HAL_I2C_Mem_Write+0x1c8>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a076:	2b00      	cmp	r3, #0
 800a078:	d130      	bne.n	800a0dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	2200      	movs	r2, #0
 800a082:	2180      	movs	r1, #128	; 0x80
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 fa3f 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e04d      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a098:	b29b      	uxth	r3, r3
 800a09a:	2bff      	cmp	r3, #255	; 0xff
 800a09c:	d90e      	bls.n	800a0bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	22ff      	movs	r2, #255	; 0xff
 800a0a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	8979      	ldrh	r1, [r7, #10]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 fb49 	bl	800a74c <I2C_TransferConfig>
 800a0ba:	e00f      	b.n	800a0dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	8979      	ldrh	r1, [r7, #10]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fb38 	bl	800a74c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d19e      	bne.n	800a024 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fa8c 	bl	800a608 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e01a      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2220      	movs	r2, #32
 800a100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6859      	ldr	r1, [r3, #4]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	4b0a      	ldr	r3, [pc, #40]	; (800a138 <HAL_I2C_Mem_Write+0x224>)
 800a10e:	400b      	ands	r3, r1
 800a110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e000      	b.n	800a130 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a12e:	2302      	movs	r3, #2
  }
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	fe00e800 	.word	0xfe00e800

0800a13c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af02      	add	r7, sp, #8
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	461a      	mov	r2, r3
 800a14a:	4603      	mov	r3, r0
 800a14c:	817b      	strh	r3, [r7, #10]
 800a14e:	460b      	mov	r3, r1
 800a150:	813b      	strh	r3, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b20      	cmp	r3, #32
 800a160:	f040 80fd 	bne.w	800a35e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <HAL_I2C_Mem_Read+0x34>
 800a16a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d105      	bne.n	800a17c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a176:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e0f1      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_I2C_Mem_Read+0x4e>
 800a186:	2302      	movs	r3, #2
 800a188:	e0ea      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a192:	f7fb ff45 	bl	8006020 <HAL_GetTick>
 800a196:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	2319      	movs	r3, #25
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f9af 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e0d5      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2222      	movs	r2, #34	; 0x22
 800a1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2240      	movs	r2, #64	; 0x40
 800a1c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a3a      	ldr	r2, [r7, #32]
 800a1ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1dc:	88f8      	ldrh	r0, [r7, #6]
 800a1de:	893a      	ldrh	r2, [r7, #8]
 800a1e0:	8979      	ldrh	r1, [r7, #10]
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 f913 	bl	800a418 <I2C_RequestMemoryRead>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e0ad      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2bff      	cmp	r3, #255	; 0xff
 800a20c:	d90e      	bls.n	800a22c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	22ff      	movs	r2, #255	; 0xff
 800a212:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	8979      	ldrh	r1, [r7, #10]
 800a21c:	4b52      	ldr	r3, [pc, #328]	; (800a368 <HAL_I2C_Mem_Read+0x22c>)
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 fa91 	bl	800a74c <I2C_TransferConfig>
 800a22a:	e00f      	b.n	800a24c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a230:	b29a      	uxth	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	8979      	ldrh	r1, [r7, #10]
 800a23e:	4b4a      	ldr	r3, [pc, #296]	; (800a368 <HAL_I2C_Mem_Read+0x22c>)
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 fa80 	bl	800a74c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	2200      	movs	r2, #0
 800a254:	2104      	movs	r1, #4
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 f956 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e07c      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a282:	3b01      	subs	r3, #1
 800a284:	b29a      	uxth	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a28e:	b29b      	uxth	r3, r3
 800a290:	3b01      	subs	r3, #1
 800a292:	b29a      	uxth	r2, r3
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d034      	beq.n	800a30c <HAL_I2C_Mem_Read+0x1d0>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d130      	bne.n	800a30c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2180      	movs	r1, #128	; 0x80
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 f927 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e04d      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2bff      	cmp	r3, #255	; 0xff
 800a2cc:	d90e      	bls.n	800a2ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	22ff      	movs	r2, #255	; 0xff
 800a2d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	8979      	ldrh	r1, [r7, #10]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 fa31 	bl	800a74c <I2C_TransferConfig>
 800a2ea:	e00f      	b.n	800a30c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	8979      	ldrh	r1, [r7, #10]
 800a2fe:	2300      	movs	r3, #0
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 fa20 	bl	800a74c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d19a      	bne.n	800a24c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 f974 	bl	800a608 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e01a      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2220      	movs	r2, #32
 800a330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6859      	ldr	r1, [r3, #4]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <HAL_I2C_Mem_Read+0x230>)
 800a33e:	400b      	ands	r3, r1
 800a340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	e000      	b.n	800a360 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a35e:	2302      	movs	r3, #2
  }
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	80002400 	.word	0x80002400
 800a36c:	fe00e800 	.word	0xfe00e800

0800a370 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	4608      	mov	r0, r1
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	4603      	mov	r3, r0
 800a380:	817b      	strh	r3, [r7, #10]
 800a382:	460b      	mov	r3, r1
 800a384:	813b      	strh	r3, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	8979      	ldrh	r1, [r7, #10]
 800a390:	4b20      	ldr	r3, [pc, #128]	; (800a414 <I2C_RequestMemoryWrite+0xa4>)
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f9d7 	bl	800a74c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a39e:	69fa      	ldr	r2, [r7, #28]
 800a3a0:	69b9      	ldr	r1, [r7, #24]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 f8f0 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e02c      	b.n	800a40c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d105      	bne.n	800a3c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3b8:	893b      	ldrh	r3, [r7, #8]
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	629a      	str	r2, [r3, #40]	; 0x28
 800a3c2:	e015      	b.n	800a3f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a3c4:	893b      	ldrh	r3, [r7, #8]
 800a3c6:	0a1b      	lsrs	r3, r3, #8
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	69b9      	ldr	r1, [r7, #24]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f8d6 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e012      	b.n	800a40c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a3e6:	893b      	ldrh	r3, [r7, #8]
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2180      	movs	r1, #128	; 0x80
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 f884 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	80002000 	.word	0x80002000

0800a418 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af02      	add	r7, sp, #8
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	461a      	mov	r2, r3
 800a426:	4603      	mov	r3, r0
 800a428:	817b      	strh	r3, [r7, #10]
 800a42a:	460b      	mov	r3, r1
 800a42c:	813b      	strh	r3, [r7, #8]
 800a42e:	4613      	mov	r3, r2
 800a430:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	b2da      	uxtb	r2, r3
 800a436:	8979      	ldrh	r1, [r7, #10]
 800a438:	4b20      	ldr	r3, [pc, #128]	; (800a4bc <I2C_RequestMemoryRead+0xa4>)
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	2300      	movs	r3, #0
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f984 	bl	800a74c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	69b9      	ldr	r1, [r7, #24]
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 f89d 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e02c      	b.n	800a4b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d105      	bne.n	800a46a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a45e:	893b      	ldrh	r3, [r7, #8]
 800a460:	b2da      	uxtb	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	629a      	str	r2, [r3, #40]	; 0x28
 800a468:	e015      	b.n	800a496 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a46a:	893b      	ldrh	r3, [r7, #8]
 800a46c:	0a1b      	lsrs	r3, r3, #8
 800a46e:	b29b      	uxth	r3, r3
 800a470:	b2da      	uxtb	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	69b9      	ldr	r1, [r7, #24]
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 f883 	bl	800a588 <I2C_WaitOnTXISFlagUntilTimeout>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e012      	b.n	800a4b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a48c:	893b      	ldrh	r3, [r7, #8]
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	2200      	movs	r2, #0
 800a49e:	2140      	movs	r1, #64	; 0x40
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f831 	bl	800a508 <I2C_WaitOnFlagUntilTimeout>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e000      	b.n	800a4b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	80002000 	.word	0x80002000

0800a4c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d103      	bne.n	800a4de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d007      	beq.n	800a4fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f042 0201 	orr.w	r2, r2, #1
 800a4fa:	619a      	str	r2, [r3, #24]
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	4613      	mov	r3, r2
 800a516:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a518:	e022      	b.n	800a560 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a520:	d01e      	beq.n	800a560 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a522:	f7fb fd7d 	bl	8006020 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d113      	bne.n	800a560 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53c:	f043 0220 	orr.w	r2, r3, #32
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2220      	movs	r2, #32
 800a548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e00f      	b.n	800a580 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699a      	ldr	r2, [r3, #24]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	4013      	ands	r3, r2
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	bf0c      	ite	eq
 800a570:	2301      	moveq	r3, #1
 800a572:	2300      	movne	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	461a      	mov	r2, r3
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d0cd      	beq.n	800a51a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a594:	e02c      	b.n	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f870 	bl	800a680 <I2C_IsAcknowledgeFailed>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e02a      	b.n	800a600 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b0:	d01e      	beq.n	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b2:	f7fb fd35 	bl	8006020 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d302      	bcc.n	800a5c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d113      	bne.n	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5cc:	f043 0220 	orr.w	r2, r3, #32
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e007      	b.n	800a600 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d1cb      	bne.n	800a596 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a614:	e028      	b.n	800a668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	68b9      	ldr	r1, [r7, #8]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f830 	bl	800a680 <I2C_IsAcknowledgeFailed>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e026      	b.n	800a678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62a:	f7fb fcf9 	bl	8006020 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d113      	bne.n	800a668 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a644:	f043 0220 	orr.w	r2, r3, #32
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e007      	b.n	800a678 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b20      	cmp	r3, #32
 800a674:	d1cf      	bne.n	800a616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	f003 0310 	and.w	r3, r3, #16
 800a696:	2b10      	cmp	r3, #16
 800a698:	d151      	bne.n	800a73e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a69a:	e022      	b.n	800a6e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a2:	d01e      	beq.n	800a6e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6a4:	f7fb fcbc 	bl	8006020 <HAL_GetTick>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d302      	bcc.n	800a6ba <I2C_IsAcknowledgeFailed+0x3a>
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d113      	bne.n	800a6e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6be:	f043 0220 	orr.w	r2, r3, #32
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e02e      	b.n	800a740 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	d1d5      	bne.n	800a69c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2210      	movs	r2, #16
 800a6f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7ff fedd 	bl	800a4c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6859      	ldr	r1, [r3, #4]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <I2C_IsAcknowledgeFailed+0xc8>)
 800a712:	400b      	ands	r3, r1
 800a714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71a:	f043 0204 	orr.w	r2, r3, #4
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2220      	movs	r2, #32
 800a726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	fe00e800 	.word	0xfe00e800

0800a74c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	607b      	str	r3, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	817b      	strh	r3, [r7, #10]
 800a75a:	4613      	mov	r3, r2
 800a75c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	0d5b      	lsrs	r3, r3, #21
 800a768:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <I2C_TransferConfig+0x58>)
 800a76e:	430b      	orrs	r3, r1
 800a770:	43db      	mvns	r3, r3
 800a772:	ea02 0103 	and.w	r1, r2, r3
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a77c:	7a7b      	ldrb	r3, [r7, #9]
 800a77e:	041b      	lsls	r3, r3, #16
 800a780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	431a      	orrs	r2, r3
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	431a      	orrs	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a796:	bf00      	nop
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	03ff63ff 	.word	0x03ff63ff

0800a7a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b20      	cmp	r3, #32
 800a7bc:	d138      	bne.n	800a830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e032      	b.n	800a832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2224      	movs	r2, #36	; 0x24
 800a7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 0201 	bic.w	r2, r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a7fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6819      	ldr	r1, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f042 0201 	orr.w	r2, r2, #1
 800a81a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2220      	movs	r2, #32
 800a820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	e000      	b.n	800a832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a830:	2302      	movs	r3, #2
  }
}
 800a832:	4618      	mov	r0, r3
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b20      	cmp	r3, #32
 800a852:	d139      	bne.n	800a8c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a85e:	2302      	movs	r3, #2
 800a860:	e033      	b.n	800a8ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2224      	movs	r2, #36	; 0x24
 800a86e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a890:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	021b      	lsls	r3, r3, #8
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4313      	orrs	r3, r2
 800a89a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0201 	orr.w	r2, r2, #1
 800a8b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e000      	b.n	800a8ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a8c8:	2302      	movs	r3, #2
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
	...

0800a8d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e0bf      	b.n	800aa6a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7f8 fbfc 	bl	80030fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2202      	movs	r2, #2
 800a908:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699a      	ldr	r2, [r3, #24]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a91a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6999      	ldr	r1, [r3, #24]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a930:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	430a      	orrs	r2, r1
 800a93e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6899      	ldr	r1, [r3, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	4b4a      	ldr	r3, [pc, #296]	; (800aa74 <HAL_LTDC_Init+0x19c>)
 800a94c:	400b      	ands	r3, r1
 800a94e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	041b      	lsls	r3, r3, #16
 800a956:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6899      	ldr	r1, [r3, #8]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	431a      	orrs	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68d9      	ldr	r1, [r3, #12]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	4b3e      	ldr	r3, [pc, #248]	; (800aa74 <HAL_LTDC_Init+0x19c>)
 800a97a:	400b      	ands	r3, r1
 800a97c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	041b      	lsls	r3, r3, #16
 800a984:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68d9      	ldr	r1, [r3, #12]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1a      	ldr	r2, [r3, #32]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	431a      	orrs	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6919      	ldr	r1, [r3, #16]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	4b33      	ldr	r3, [pc, #204]	; (800aa74 <HAL_LTDC_Init+0x19c>)
 800a9a8:	400b      	ands	r3, r1
 800a9aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	041b      	lsls	r3, r3, #16
 800a9b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6919      	ldr	r1, [r3, #16]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6959      	ldr	r1, [r3, #20]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	4b27      	ldr	r3, [pc, #156]	; (800aa74 <HAL_LTDC_Init+0x19c>)
 800a9d6:	400b      	ands	r3, r1
 800a9d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6959      	ldr	r1, [r3, #20]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	430a      	orrs	r2, r1
 800a9f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa08:	041b      	lsls	r3, r3, #16
 800aa0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aa1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f042 0206 	orr.w	r2, r2, #6
 800aa46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f042 0201 	orr.w	r2, r2, #1
 800aa56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	f000f800 	.word	0xf000f800

0800aa78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800aa78:	b5b0      	push	{r4, r5, r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d101      	bne.n	800aa92 <HAL_LTDC_ConfigLayer+0x1a>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	e02c      	b.n	800aaec <HAL_LTDC_ConfigLayer+0x74>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2134      	movs	r1, #52	; 0x34
 800aaa8:	fb01 f303 	mul.w	r3, r1, r3
 800aaac:	4413      	add	r3, r2
 800aaae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	4614      	mov	r4, r2
 800aab6:	461d      	mov	r5, r3
 800aab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aabc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aabe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 f847 	bl	800ab60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2201      	movs	r2, #1
 800aad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bdb0      	pop	{r4, r5, r7, pc}

0800aaf4 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d101      	bne.n	800ab0e <HAL_LTDC_SetAddress+0x1a>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e024      	b.n	800ab58 <HAL_LTDC_SetAddress+0x64>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2202      	movs	r2, #2
 800ab1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2234      	movs	r2, #52	; 0x34
 800ab22:	fb02 f303 	mul.w	r3, r2, r3
 800ab26:	3338      	adds	r3, #56	; 0x38
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	6979      	ldr	r1, [r7, #20]
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 f811 	bl	800ab60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2201      	movs	r2, #1
 800ab44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b089      	sub	sp, #36	; 0x24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	0c1b      	lsrs	r3, r3, #16
 800ab78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab7c:	4413      	add	r3, r2
 800ab7e:	041b      	lsls	r3, r3, #16
 800ab80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	01db      	lsls	r3, r3, #7
 800ab8c:	4413      	add	r3, r2
 800ab8e:	3384      	adds	r3, #132	; 0x84
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	4611      	mov	r1, r2
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	01d2      	lsls	r2, r2, #7
 800ab9c:	440a      	add	r2, r1
 800ab9e:	3284      	adds	r2, #132	; 0x84
 800aba0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800aba4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	0c1b      	lsrs	r3, r3, #16
 800abb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abb6:	4413      	add	r3, r2
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4619      	mov	r1, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	01db      	lsls	r3, r3, #7
 800abc4:	440b      	add	r3, r1
 800abc6:	3384      	adds	r3, #132	; 0x84
 800abc8:	4619      	mov	r1, r3
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	4313      	orrs	r3, r2
 800abce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abde:	4413      	add	r3, r2
 800abe0:	041b      	lsls	r3, r3, #16
 800abe2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	461a      	mov	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	01db      	lsls	r3, r3, #7
 800abee:	4413      	add	r3, r2
 800abf0:	3384      	adds	r3, #132	; 0x84
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	6812      	ldr	r2, [r2, #0]
 800abf8:	4611      	mov	r1, r2
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	01d2      	lsls	r2, r2, #7
 800abfe:	440a      	add	r2, r1
 800ac00:	3284      	adds	r2, #132	; 0x84
 800ac02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ac06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac16:	4413      	add	r3, r2
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	01db      	lsls	r3, r3, #7
 800ac24:	440b      	add	r3, r1
 800ac26:	3384      	adds	r3, #132	; 0x84
 800ac28:	4619      	mov	r1, r3
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	01db      	lsls	r3, r3, #7
 800ac3a:	4413      	add	r3, r2
 800ac3c:	3384      	adds	r3, #132	; 0x84
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	6812      	ldr	r2, [r2, #0]
 800ac44:	4611      	mov	r1, r2
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	01d2      	lsls	r2, r2, #7
 800ac4a:	440a      	add	r2, r1
 800ac4c:	3284      	adds	r2, #132	; 0x84
 800ac4e:	f023 0307 	bic.w	r3, r3, #7
 800ac52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	01db      	lsls	r3, r3, #7
 800ac5e:	4413      	add	r3, r2
 800ac60:	3384      	adds	r3, #132	; 0x84
 800ac62:	461a      	mov	r2, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ac7a:	041b      	lsls	r3, r3, #16
 800ac7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	061b      	lsls	r3, r3, #24
 800ac84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	01db      	lsls	r3, r3, #7
 800ac90:	4413      	add	r3, r2
 800ac92:	3384      	adds	r3, #132	; 0x84
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	01db      	lsls	r3, r3, #7
 800aca0:	4413      	add	r3, r2
 800aca2:	3384      	adds	r3, #132	; 0x84
 800aca4:	461a      	mov	r2, r3
 800aca6:	2300      	movs	r3, #0
 800aca8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acb0:	461a      	mov	r2, r3
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	431a      	orrs	r2, r3
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	431a      	orrs	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4619      	mov	r1, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	01db      	lsls	r3, r3, #7
 800acc4:	440b      	add	r3, r1
 800acc6:	3384      	adds	r3, #132	; 0x84
 800acc8:	4619      	mov	r1, r3
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	4313      	orrs	r3, r2
 800acce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	461a      	mov	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	01db      	lsls	r3, r3, #7
 800acda:	4413      	add	r3, r2
 800acdc:	3384      	adds	r3, #132	; 0x84
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	6812      	ldr	r2, [r2, #0]
 800ace4:	4611      	mov	r1, r2
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	01d2      	lsls	r2, r2, #7
 800acea:	440a      	add	r2, r1
 800acec:	3284      	adds	r2, #132	; 0x84
 800acee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800acf2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	461a      	mov	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	01db      	lsls	r3, r3, #7
 800acfe:	4413      	add	r3, r2
 800ad00:	3384      	adds	r3, #132	; 0x84
 800ad02:	461a      	mov	r2, r3
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	01db      	lsls	r3, r3, #7
 800ad14:	4413      	add	r3, r2
 800ad16:	3384      	adds	r3, #132	; 0x84
 800ad18:	69da      	ldr	r2, [r3, #28]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	01db      	lsls	r3, r3, #7
 800ad24:	440b      	add	r3, r1
 800ad26:	3384      	adds	r3, #132	; 0x84
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4b58      	ldr	r3, [pc, #352]	; (800ae8c <LTDC_SetConfig+0x32c>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	69da      	ldr	r2, [r3, #28]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	68f9      	ldr	r1, [r7, #12]
 800ad3a:	6809      	ldr	r1, [r1, #0]
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	6879      	ldr	r1, [r7, #4]
 800ad40:	01c9      	lsls	r1, r1, #7
 800ad42:	4401      	add	r1, r0
 800ad44:	3184      	adds	r1, #132	; 0x84
 800ad46:	4313      	orrs	r3, r2
 800ad48:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	01db      	lsls	r3, r3, #7
 800ad54:	4413      	add	r3, r2
 800ad56:	3384      	adds	r3, #132	; 0x84
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	01db      	lsls	r3, r3, #7
 800ad64:	4413      	add	r3, r2
 800ad66:	3384      	adds	r3, #132	; 0x84
 800ad68:	461a      	mov	r2, r3
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	01db      	lsls	r3, r3, #7
 800ad78:	4413      	add	r3, r2
 800ad7a:	3384      	adds	r3, #132	; 0x84
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ad8c:	2304      	movs	r3, #4
 800ad8e:	61fb      	str	r3, [r7, #28]
 800ad90:	e01b      	b.n	800adca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d102      	bne.n	800ada0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	61fb      	str	r3, [r7, #28]
 800ad9e:	e014      	b.n	800adca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d00b      	beq.n	800adc0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800adac:	2b02      	cmp	r3, #2
 800adae:	d007      	beq.n	800adc0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d003      	beq.n	800adc0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800adbc:	2b07      	cmp	r3, #7
 800adbe:	d102      	bne.n	800adc6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800adc0:	2302      	movs	r3, #2
 800adc2:	61fb      	str	r3, [r7, #28]
 800adc4:	e001      	b.n	800adca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800adc6:	2301      	movs	r3, #1
 800adc8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	01db      	lsls	r3, r3, #7
 800add4:	4413      	add	r3, r2
 800add6:	3384      	adds	r3, #132	; 0x84
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	6812      	ldr	r2, [r2, #0]
 800adde:	4611      	mov	r1, r2
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	01d2      	lsls	r2, r2, #7
 800ade4:	440a      	add	r2, r1
 800ade6:	3284      	adds	r2, #132	; 0x84
 800ade8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800adec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	fb02 f303 	mul.w	r3, r2, r3
 800adf8:	041a      	lsls	r2, r3, #16
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	6859      	ldr	r1, [r3, #4]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	1acb      	subs	r3, r1, r3
 800ae04:	69f9      	ldr	r1, [r7, #28]
 800ae06:	fb01 f303 	mul.w	r3, r1, r3
 800ae0a:	3303      	adds	r3, #3
 800ae0c:	68f9      	ldr	r1, [r7, #12]
 800ae0e:	6809      	ldr	r1, [r1, #0]
 800ae10:	4608      	mov	r0, r1
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	01c9      	lsls	r1, r1, #7
 800ae16:	4401      	add	r1, r0
 800ae18:	3184      	adds	r1, #132	; 0x84
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	01db      	lsls	r3, r3, #7
 800ae28:	4413      	add	r3, r2
 800ae2a:	3384      	adds	r3, #132	; 0x84
 800ae2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4619      	mov	r1, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	01db      	lsls	r3, r3, #7
 800ae38:	440b      	add	r3, r1
 800ae3a:	3384      	adds	r3, #132	; 0x84
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4b14      	ldr	r3, [pc, #80]	; (800ae90 <LTDC_SetConfig+0x330>)
 800ae40:	4013      	ands	r3, r2
 800ae42:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	01db      	lsls	r3, r3, #7
 800ae4e:	4413      	add	r3, r2
 800ae50:	3384      	adds	r3, #132	; 0x84
 800ae52:	461a      	mov	r2, r3
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae58:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	01db      	lsls	r3, r3, #7
 800ae64:	4413      	add	r3, r2
 800ae66:	3384      	adds	r3, #132	; 0x84
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	6812      	ldr	r2, [r2, #0]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	01d2      	lsls	r2, r2, #7
 800ae74:	440a      	add	r2, r1
 800ae76:	3284      	adds	r2, #132	; 0x84
 800ae78:	f043 0301 	orr.w	r3, r3, #1
 800ae7c:	6013      	str	r3, [r2, #0]
}
 800ae7e:	bf00      	nop
 800ae80:	3724      	adds	r7, #36	; 0x24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	fffff8f8 	.word	0xfffff8f8
 800ae90:	fffff800 	.word	0xfffff800

0800ae94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ae94:	b480      	push	{r7}
 800ae96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae98:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a04      	ldr	r2, [pc, #16]	; (800aeb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ae9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aea2:	6013      	str	r3, [r2, #0]
}
 800aea4:	bf00      	nop
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	40007000 	.word	0x40007000

0800aeb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aebe:	4b23      	ldr	r3, [pc, #140]	; (800af4c <HAL_PWREx_EnableOverDrive+0x98>)
 800aec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec2:	4a22      	ldr	r2, [pc, #136]	; (800af4c <HAL_PWREx_EnableOverDrive+0x98>)
 800aec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aec8:	6413      	str	r3, [r2, #64]	; 0x40
 800aeca:	4b20      	ldr	r3, [pc, #128]	; (800af4c <HAL_PWREx_EnableOverDrive+0x98>)
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aed6:	4b1e      	ldr	r3, [pc, #120]	; (800af50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a1d      	ldr	r2, [pc, #116]	; (800af50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aedc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aee2:	f7fb f89d 	bl	8006020 <HAL_GetTick>
 800aee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aee8:	e009      	b.n	800aefe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aeea:	f7fb f899 	bl	8006020 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aef8:	d901      	bls.n	800aefe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e022      	b.n	800af44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aefe:	4b14      	ldr	r3, [pc, #80]	; (800af50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af0a:	d1ee      	bne.n	800aeea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800af0c:	4b10      	ldr	r3, [pc, #64]	; (800af50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a0f      	ldr	r2, [pc, #60]	; (800af50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800af18:	f7fb f882 	bl	8006020 <HAL_GetTick>
 800af1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af1e:	e009      	b.n	800af34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800af20:	f7fb f87e 	bl	8006020 <HAL_GetTick>
 800af24:	4602      	mov	r2, r0
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af2e:	d901      	bls.n	800af34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e007      	b.n	800af44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800af34:	4b06      	ldr	r3, [pc, #24]	; (800af50 <HAL_PWREx_EnableOverDrive+0x9c>)
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af40:	d1ee      	bne.n	800af20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	40023800 	.word	0x40023800
 800af50:	40007000 	.word	0x40007000

0800af54 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af02      	add	r7, sp, #8
 800af5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800af5c:	f7fb f860 	bl	8006020 <HAL_GetTick>
 800af60:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e067      	b.n	800b03c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10b      	bne.n	800af90 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7f8 f97b 	bl	800327c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800af86:	f241 3188 	movw	r1, #5000	; 0x1388
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fda8 	bl	800bae0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	3b01      	subs	r3, #1
 800afa0:	021a      	lsls	r2, r3, #8
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	2120      	movs	r1, #32
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fdd3 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800afbc:	4603      	mov	r3, r0
 800afbe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800afc0:	7afb      	ldrb	r3, [r7, #11]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d135      	bne.n	800b032 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <HAL_QSPI_Init+0xf0>)
 800afce:	4013      	ands	r3, r2
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6852      	ldr	r2, [r2, #4]
 800afd4:	0611      	lsls	r1, r2, #24
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	68d2      	ldr	r2, [r2, #12]
 800afda:	4311      	orrs	r1, r2
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	69d2      	ldr	r2, [r2, #28]
 800afe0:	4311      	orrs	r1, r2
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6a12      	ldr	r2, [r2, #32]
 800afe6:	4311      	orrs	r1, r2
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	6812      	ldr	r2, [r2, #0]
 800afec:	430b      	orrs	r3, r1
 800afee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	4b14      	ldr	r3, [pc, #80]	; (800b048 <HAL_QSPI_Init+0xf4>)
 800aff8:	4013      	ands	r3, r2
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	6912      	ldr	r2, [r2, #16]
 800affe:	0411      	lsls	r1, r2, #16
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	6952      	ldr	r2, [r2, #20]
 800b004:	4311      	orrs	r1, r2
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6992      	ldr	r2, [r2, #24]
 800b00a:	4311      	orrs	r1, r2
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	6812      	ldr	r2, [r2, #0]
 800b010:	430b      	orrs	r3, r1
 800b012:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b03a:	7afb      	ldrb	r3, [r7, #11]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	00ffff2f 	.word	0x00ffff2f
 800b048:	ffe0f8fe 	.word	0xffe0f8fe

0800b04c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f003 0304 	and.w	r3, r3, #4
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d064      	beq.n	800b138 <HAL_QSPI_IRQHandler+0xec>
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d05f      	beq.n	800b138 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3320      	adds	r3, #32
 800b07e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b12      	cmp	r3, #18
 800b08a:	d125      	bne.n	800b0d8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b08c:	e01c      	b.n	800b0c8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00f      	beq.n	800b0b6 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	781a      	ldrb	r2, [r3, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ae:	1e5a      	subs	r2, r3, #1
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	62da      	str	r2, [r3, #44]	; 0x2c
 800b0b4:	e008      	b.n	800b0c8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b0c4:	601a      	str	r2, [r3, #0]
          break;
 800b0c6:	e033      	b.n	800b130 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1db      	bne.n	800b08e <HAL_QSPI_IRQHandler+0x42>
 800b0d6:	e02b      	b.n	800b130 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b22      	cmp	r3, #34	; 0x22
 800b0e2:	d125      	bne.n	800b130 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b0e4:	e01d      	b.n	800b122 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	7812      	ldrb	r2, [r2, #0]
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
 800b10e:	e008      	b.n	800b122 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b11e:	601a      	str	r2, [r3, #0]
          break;
 800b120:	e006      	b.n	800b130 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f003 0304 	and.w	r3, r3, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1da      	bne.n	800b0e6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fbed 	bl	800b910 <HAL_QSPI_FifoThresholdCallback>
 800b136:	e142      	b.n	800b3be <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 80b6 	beq.w	800b2b0 <HAL_QSPI_IRQHandler+0x264>
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 80b0 	beq.w	800b2b0 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2202      	movs	r2, #2
 800b156:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b166:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b12      	cmp	r3, #18
 800b172:	d123      	bne.n	800b1bc <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0304 	and.w	r3, r3, #4
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d011      	beq.n	800b1a6 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f022 0204 	bic.w	r2, r2, #4
 800b190:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f022 0201 	bic.w	r2, r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fc3e 	bl	800ba28 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fba1 	bl	800b8fc <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b1ba:	e0fd      	b.n	800b3b8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b22      	cmp	r3, #34	; 0x22
 800b1c6:	d146      	bne.n	800b256 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0304 	and.w	r3, r3, #4
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d012      	beq.n	800b1fc <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0204 	bic.w	r2, r2, #4
 800b1e4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f022 0201 	bic.w	r2, r2, #1
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	e021      	b.n	800b240 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3320      	adds	r3, #32
 800b202:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b204:	e013      	b.n	800b22e <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d017      	beq.n	800b23e <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	7812      	ldrb	r2, [r2, #0]
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	1e5a      	subs	r2, r3, #1
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e4      	bne.n	800b206 <HAL_QSPI_IRQHandler+0x1ba>
 800b23c:	e000      	b.n	800b240 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800b23e:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fbf1 	bl	800ba28 <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fb4a 	bl	800b8e8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b254:	e0b0      	b.n	800b3b8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d107      	bne.n	800b272 <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fb32 	bl	800b8d4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b270:	e0a2      	b.n	800b3b8 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b08      	cmp	r3, #8
 800b27c:	f040 809c 	bne.w	800b3b8 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	695a      	ldr	r2, [r3, #20]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b28e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fb0d 	bl	800b8c0 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b2a6:	e087      	b.n	800b3b8 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 faff 	bl	800b8ac <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b2ae:	e083      	b.n	800b3b8 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	f003 0308 	and.w	r3, r3, #8
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d01f      	beq.n	800b2fa <HAL_QSPI_IRQHandler+0x2ae>
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01a      	beq.n	800b2fa <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2208      	movs	r2, #8
 800b2ca:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00b      	beq.n	800b2f2 <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b2e8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 fb16 	bl	800b924 <HAL_QSPI_StatusMatchCallback>
 800b2f8:	e061      	b.n	800b3be <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	2b00      	cmp	r3, #0
 800b302:	d047      	beq.n	800b394 <HAL_QSPI_IRQHandler+0x348>
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d042      	beq.n	800b394 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2201      	movs	r2, #1
 800b314:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800b324:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b32a:	f043 0202 	orr.w	r2, r3, #2
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d021      	beq.n	800b384 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f022 0204 	bic.w	r2, r2, #4
 800b34e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b354:	4a1c      	ldr	r2, [pc, #112]	; (800b3c8 <HAL_QSPI_IRQHandler+0x37c>)
 800b356:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fb fe59 	bl	8007014 <HAL_DMA_Abort_IT>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d029      	beq.n	800b3bc <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b36c:	f043 0204 	orr.w	r2, r3, #4
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fa95 	bl	800b8ac <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b382:	e01b      	b.n	800b3bc <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fa8d 	bl	800b8ac <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b392:	e013      	b.n	800b3bc <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f003 0310 	and.w	r3, r3, #16
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00f      	beq.n	800b3be <HAL_QSPI_IRQHandler+0x372>
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00a      	beq.n	800b3be <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2210      	movs	r2, #16
 800b3ae:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fac1 	bl	800b938 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800b3b6:	e002      	b.n	800b3be <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b3b8:	bf00      	nop
 800b3ba:	e000      	b.n	800b3be <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b3bc:	bf00      	nop
}
 800b3be:	bf00      	nop
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0800bafd 	.word	0x0800bafd

0800b3cc <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af02      	add	r7, sp, #8
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b3d8:	f7fa fe22 	bl	8006020 <HAL_GetTick>
 800b3dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d101      	bne.n	800b3ee <HAL_QSPI_Command+0x22>
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	e048      	b.n	800b480 <HAL_QSPI_Command+0xb4>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d137      	bne.n	800b472 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2202      	movs	r2, #2
 800b40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2200      	movs	r2, #0
 800b418:	2120      	movs	r1, #32
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 fba1 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b420:	4603      	mov	r3, r0
 800b422:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b424:	7dfb      	ldrb	r3, [r7, #23]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d125      	bne.n	800b476 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b42a:	2200      	movs	r2, #0
 800b42c:	68b9      	ldr	r1, [r7, #8]
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 fbce 	bl	800bbd0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d115      	bne.n	800b468 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	2201      	movs	r2, #1
 800b444:	2102      	movs	r1, #2
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 fb8b 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b44c:	4603      	mov	r3, r0
 800b44e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10f      	bne.n	800b476 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2202      	movs	r2, #2
 800b45c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b466:	e006      	b.n	800b476 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b470:	e001      	b.n	800b476 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b472:	2302      	movs	r3, #2
 800b474:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	; 0x28
 800b48c:	af02      	add	r7, sp, #8
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b498:	f7fa fdc2 	bl	8006020 <HAL_GetTick>
 800b49c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3320      	adds	r3, #32
 800b4a4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d101      	bne.n	800b4b6 <HAL_QSPI_Transmit+0x2e>
 800b4b2:	2302      	movs	r3, #2
 800b4b4:	e07b      	b.n	800b5ae <HAL_QSPI_Transmit+0x126>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d16a      	bne.n	800b5a0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d05b      	beq.n	800b58e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2212      	movs	r2, #18
 800b4da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	695a      	ldr	r2, [r3, #20]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b50a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b50c:	e01b      	b.n	800b546 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	2201      	movs	r2, #1
 800b516:	2104      	movs	r1, #4
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 fb22 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b51e:	4603      	mov	r3, r0
 800b520:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b522:	7ffb      	ldrb	r3, [r7, #31]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d113      	bne.n	800b550 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	781a      	ldrb	r2, [r3, #0]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	1e5a      	subs	r2, r3, #1
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1df      	bne.n	800b50e <HAL_QSPI_Transmit+0x86>
 800b54e:	e000      	b.n	800b552 <HAL_QSPI_Transmit+0xca>
          break;
 800b550:	bf00      	nop
      }

      if (status == HAL_OK)
 800b552:	7ffb      	ldrb	r3, [r7, #31]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d115      	bne.n	800b584 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2201      	movs	r2, #1
 800b560:	2102      	movs	r1, #2
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 fafd 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b568:	4603      	mov	r3, r0
 800b56a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b56c:	7ffb      	ldrb	r3, [r7, #31]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d108      	bne.n	800b584 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2202      	movs	r2, #2
 800b578:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f000 f9e6 	bl	800b94c <HAL_QSPI_Abort>
 800b580:	4603      	mov	r3, r0
 800b582:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b58c:	e00a      	b.n	800b5a4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	f043 0208 	orr.w	r2, r3, #8
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	77fb      	strb	r3, [r7, #31]
 800b59e:	e001      	b.n	800b5a4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b5ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b08a      	sub	sp, #40	; 0x28
 800b5ba:	af02      	add	r7, sp, #8
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	60b9      	str	r1, [r7, #8]
 800b5c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b5c6:	f7fa fd2b 	bl	8006020 <HAL_GetTick>
 800b5ca:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3320      	adds	r3, #32
 800b5da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d101      	bne.n	800b5ec <HAL_QSPI_Receive+0x36>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	e082      	b.n	800b6f2 <HAL_QSPI_Receive+0x13c>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d171      	bne.n	800b6e4 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d062      	beq.n	800b6d2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2222      	movs	r2, #34	; 0x22
 800b610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b644:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b64e:	e01c      	b.n	800b68a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	2201      	movs	r2, #1
 800b658:	2106      	movs	r1, #6
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 fa81 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b664:	7ffb      	ldrb	r3, [r7, #31]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d114      	bne.n	800b694 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	7812      	ldrb	r2, [r2, #0]
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b684:	1e5a      	subs	r2, r3, #1
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1de      	bne.n	800b650 <HAL_QSPI_Receive+0x9a>
 800b692:	e000      	b.n	800b696 <HAL_QSPI_Receive+0xe0>
          break;
 800b694:	bf00      	nop
      }

      if (status == HAL_OK)
 800b696:	7ffb      	ldrb	r3, [r7, #31]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d115      	bne.n	800b6c8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	2102      	movs	r1, #2
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f000 fa5b 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b6b0:	7ffb      	ldrb	r3, [r7, #31]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d108      	bne.n	800b6c8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 f944 	bl	800b94c <HAL_QSPI_Abort>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6d0:	e00a      	b.n	800b6e8 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d6:	f043 0208 	orr.w	r2, r3, #8
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	77fb      	strb	r3, [r7, #31]
 800b6e2:	e001      	b.n	800b6e8 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b6f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b088      	sub	sp, #32
 800b6fe:	af02      	add	r7, sp, #8
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	607a      	str	r2, [r7, #4]
 800b706:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b708:	f7fa fc8a 	bl	8006020 <HAL_GetTick>
 800b70c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b01      	cmp	r3, #1
 800b718:	d101      	bne.n	800b71e <HAL_QSPI_AutoPolling+0x24>
 800b71a:	2302      	movs	r3, #2
 800b71c:	e060      	b.n	800b7e0 <HAL_QSPI_AutoPolling+0xe6>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d14f      	bne.n	800b7d2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2242      	movs	r2, #66	; 0x42
 800b73c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2200      	movs	r2, #0
 800b748:	2120      	movs	r1, #32
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f000 fa09 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d13d      	bne.n	800b7d6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	6812      	ldr	r2, [r2, #0]
 800b762:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	6852      	ldr	r2, [r2, #4]
 800b76c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	6892      	ldr	r2, [r2, #8]
 800b776:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	431a      	orrs	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b790:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b79a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 fa15 	bl	800bbd0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	2108      	movs	r1, #8
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 f9d6 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10a      	bne.n	800b7d6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2208      	movs	r2, #8
 800b7c6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7d0:	e001      	b.n	800b7d6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af02      	add	r7, sp, #8
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b7f4:	f7fa fc14 	bl	8006020 <HAL_GetTick>
 800b7f8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b01      	cmp	r3, #1
 800b804:	d101      	bne.n	800b80a <HAL_QSPI_MemoryMapped+0x22>
 800b806:	2302      	movs	r3, #2
 800b808:	e04c      	b.n	800b8a4 <HAL_QSPI_MemoryMapped+0xbc>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d13b      	bne.n	800b896 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2282      	movs	r2, #130	; 0x82
 800b828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2200      	movs	r2, #0
 800b836:	2120      	movs	r1, #32
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 f992 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b83e:	4603      	mov	r3, r0
 800b840:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d128      	bne.n	800b89a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f023 0108 	bic.w	r1, r3, #8
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	2b08      	cmp	r3, #8
 800b864:	d110      	bne.n	800b888 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	6812      	ldr	r2, [r2, #0]
 800b86e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2210      	movs	r2, #16
 800b876:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b886:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800b888:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800b88c:	68b9      	ldr	r1, [r7, #8]
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f000 f99e 	bl	800bbd0 <QSPI_Config>
 800b894:	e001      	b.n	800b89a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b896:	2302      	movs	r3, #2
 800b898:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af02      	add	r7, sp, #8
 800b952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b958:	f7fa fb62 	bl	8006020 <HAL_GetTick>
 800b95c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b964:	b2db      	uxtb	r3, r3
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d056      	beq.n	800ba1c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b00      	cmp	r3, #0
 800b982:	d017      	beq.n	800b9b4 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f022 0204 	bic.w	r2, r2, #4
 800b992:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fb facb 	bl	8006f34 <HAL_DMA_Abort>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d005      	beq.n	800b9b4 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ac:	f043 0204 	orr.w	r2, r3, #4
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f042 0202 	orr.w	r2, r2, #2
 800b9c2:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	2102      	movs	r1, #2
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f8c6 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10e      	bne.n	800b9fe <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2120      	movs	r1, #32
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f8b4 	bl	800bb62 <QSPI_WaitFlagStateUntilTimeout>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10b      	bne.n	800ba1c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ba12:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d046      	beq.n	800bad2 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2208      	movs	r2, #8
 800ba50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800ba62:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d01b      	beq.n	800baaa <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0204 	bic.w	r2, r2, #4
 800ba80:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba86:	4a15      	ldr	r2, [pc, #84]	; (800badc <HAL_QSPI_Abort_IT+0xb4>)
 800ba88:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fb fac0 	bl	8007014 <HAL_DMA_Abort_IT>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d01b      	beq.n	800bad2 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff ff0c 	bl	800b8c0 <HAL_QSPI_AbortCpltCallback>
 800baa8:	e013      	b.n	800bad2 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2202      	movs	r2, #2
 800bab0:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bac0:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0202 	orr.w	r2, r2, #2
 800bad0:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	0800bafd 	.word	0x0800bafd

0800bae0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	649a      	str	r2, [r3, #72]	; 0x48
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b08      	cmp	r3, #8
 800bb20:	d114      	bne.n	800bb4c <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2202      	movs	r2, #2
 800bb28:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bb38:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f042 0202 	orr.w	r2, r2, #2
 800bb48:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800bb4a:	e006      	b.n	800bb5a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff fea9 	bl	800b8ac <HAL_QSPI_ErrorCallback>
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	603b      	str	r3, [r7, #0]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bb72:	e01a      	b.n	800bbaa <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7a:	d016      	beq.n	800bbaa <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb7c:	f7fa fa50 	bl	8006020 <HAL_GetTick>
 800bb80:	4602      	mov	r2, r0
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	69ba      	ldr	r2, [r7, #24]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d302      	bcc.n	800bb92 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2204      	movs	r2, #4
 800bb96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9e:	f043 0201 	orr.w	r2, r3, #1
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e00e      	b.n	800bbc8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	bf14      	ite	ne
 800bbb8:	2301      	movne	r3, #1
 800bbba:	2300      	moveq	r3, #0
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d1d6      	bne.n	800bb74 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d009      	beq.n	800bbf8 <QSPI_Config+0x28>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bbea:	d005      	beq.n	800bbf8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3a01      	subs	r2, #1
 800bbf6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 80b9 	beq.w	800bd74 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d05f      	beq.n	800bcca <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	6892      	ldr	r2, [r2, #8]
 800bc12:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	69db      	ldr	r3, [r3, #28]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d031      	beq.n	800bc80 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc24:	431a      	orrs	r2, r3
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	431a      	orrs	r2, r3
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	049b      	lsls	r3, r3, #18
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	431a      	orrs	r2, r3
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	69db      	ldr	r3, [r3, #28]
 800bc50:	431a      	orrs	r2, r3
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	431a      	orrs	r2, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	ea42 0103 	orr.w	r1, r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bc70:	f000 812e 	beq.w	800bed0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	6852      	ldr	r2, [r2, #4]
 800bc7c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800bc7e:	e127      	b.n	800bed0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc88:	431a      	orrs	r2, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	431a      	orrs	r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	049b      	lsls	r3, r3, #18
 800bc9c:	431a      	orrs	r2, r3
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	431a      	orrs	r2, r3
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	6a1b      	ldr	r3, [r3, #32]
 800bca8:	431a      	orrs	r2, r3
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	431a      	orrs	r2, r3
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	ea42 0103 	orr.w	r1, r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	430a      	orrs	r2, r1
 800bcc6:	615a      	str	r2, [r3, #20]
}
 800bcc8:	e102      	b.n	800bed0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d02e      	beq.n	800bd30 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	431a      	orrs	r2, r3
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce0:	431a      	orrs	r2, r3
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	431a      	orrs	r2, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	049b      	lsls	r3, r3, #18
 800bcee:	431a      	orrs	r2, r3
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	431a      	orrs	r2, r3
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	431a      	orrs	r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	ea42 0103 	orr.w	r1, r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bd20:	f000 80d6 	beq.w	800bed0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	6852      	ldr	r2, [r2, #4]
 800bd2c:	619a      	str	r2, [r3, #24]
}
 800bd2e:	e0cf      	b.n	800bed0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd38:	431a      	orrs	r2, r3
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	431a      	orrs	r2, r3
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	049b      	lsls	r3, r3, #18
 800bd4c:	431a      	orrs	r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	431a      	orrs	r2, r3
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	ea42 0103 	orr.w	r1, r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	615a      	str	r2, [r3, #20]
}
 800bd72:	e0ad      	b.n	800bed0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d058      	beq.n	800be2e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	6892      	ldr	r2, [r2, #8]
 800bd84:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	69db      	ldr	r3, [r3, #28]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d02d      	beq.n	800bdea <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd96:	431a      	orrs	r2, r3
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	431a      	orrs	r2, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	049b      	lsls	r3, r3, #18
 800bdaa:	431a      	orrs	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	431a      	orrs	r2, r3
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	431a      	orrs	r2, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	431a      	orrs	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	ea42 0103 	orr.w	r1, r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bddc:	d078      	beq.n	800bed0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	6852      	ldr	r2, [r2, #4]
 800bde6:	619a      	str	r2, [r3, #24]
}
 800bde8:	e072      	b.n	800bed0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	431a      	orrs	r2, r3
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	049b      	lsls	r3, r3, #18
 800be06:	431a      	orrs	r2, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	431a      	orrs	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	431a      	orrs	r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	431a      	orrs	r2, r3
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	ea42 0103 	orr.w	r1, r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	430a      	orrs	r2, r1
 800be2a:	615a      	str	r2, [r3, #20]
}
 800be2c:	e050      	b.n	800bed0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	69db      	ldr	r3, [r3, #28]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d02a      	beq.n	800be8c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3e:	431a      	orrs	r2, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be44:	431a      	orrs	r2, r3
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4a:	431a      	orrs	r2, r3
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	049b      	lsls	r3, r3, #18
 800be52:	431a      	orrs	r2, r3
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	431a      	orrs	r2, r3
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	431a      	orrs	r2, r3
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	69db      	ldr	r3, [r3, #28]
 800be64:	431a      	orrs	r2, r3
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	ea42 0103 	orr.w	r1, r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	430a      	orrs	r2, r1
 800be76:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be7e:	d027      	beq.n	800bed0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	6852      	ldr	r2, [r2, #4]
 800be88:	619a      	str	r2, [r3, #24]
}
 800be8a:	e021      	b.n	800bed0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be90:	2b00      	cmp	r3, #0
 800be92:	d01d      	beq.n	800bed0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9c:	431a      	orrs	r2, r3
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea2:	431a      	orrs	r2, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	431a      	orrs	r2, r3
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	049b      	lsls	r3, r3, #18
 800beb0:	431a      	orrs	r2, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	431a      	orrs	r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	431a      	orrs	r2, r3
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	699b      	ldr	r3, [r3, #24]
 800bec2:	ea42 0103 	orr.w	r1, r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	430a      	orrs	r2, r1
 800bece:	615a      	str	r2, [r3, #20]
}
 800bed0:	bf00      	nop
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b086      	sub	sp, #24
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800bee4:	2300      	movs	r3, #0
 800bee6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	e291      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 8087 	beq.w	800c00e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bf00:	4b96      	ldr	r3, [pc, #600]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f003 030c 	and.w	r3, r3, #12
 800bf08:	2b04      	cmp	r3, #4
 800bf0a:	d00c      	beq.n	800bf26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bf0c:	4b93      	ldr	r3, [pc, #588]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	f003 030c 	and.w	r3, r3, #12
 800bf14:	2b08      	cmp	r3, #8
 800bf16:	d112      	bne.n	800bf3e <HAL_RCC_OscConfig+0x62>
 800bf18:	4b90      	ldr	r3, [pc, #576]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf24:	d10b      	bne.n	800bf3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf26:	4b8d      	ldr	r3, [pc, #564]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d06c      	beq.n	800c00c <HAL_RCC_OscConfig+0x130>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d168      	bne.n	800c00c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e26b      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf46:	d106      	bne.n	800bf56 <HAL_RCC_OscConfig+0x7a>
 800bf48:	4b84      	ldr	r3, [pc, #528]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a83      	ldr	r2, [pc, #524]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	e02e      	b.n	800bfb4 <HAL_RCC_OscConfig+0xd8>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10c      	bne.n	800bf78 <HAL_RCC_OscConfig+0x9c>
 800bf5e:	4b7f      	ldr	r3, [pc, #508]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a7e      	ldr	r2, [pc, #504]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	4b7c      	ldr	r3, [pc, #496]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a7b      	ldr	r2, [pc, #492]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf74:	6013      	str	r3, [r2, #0]
 800bf76:	e01d      	b.n	800bfb4 <HAL_RCC_OscConfig+0xd8>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf80:	d10c      	bne.n	800bf9c <HAL_RCC_OscConfig+0xc0>
 800bf82:	4b76      	ldr	r3, [pc, #472]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a75      	ldr	r2, [pc, #468]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	4b73      	ldr	r3, [pc, #460]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a72      	ldr	r2, [pc, #456]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf98:	6013      	str	r3, [r2, #0]
 800bf9a:	e00b      	b.n	800bfb4 <HAL_RCC_OscConfig+0xd8>
 800bf9c:	4b6f      	ldr	r3, [pc, #444]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a6e      	ldr	r2, [pc, #440]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bfa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	4b6c      	ldr	r3, [pc, #432]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a6b      	ldr	r2, [pc, #428]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bfae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d013      	beq.n	800bfe4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfbc:	f7fa f830 	bl	8006020 <HAL_GetTick>
 800bfc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfc2:	e008      	b.n	800bfd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfc4:	f7fa f82c 	bl	8006020 <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	2b64      	cmp	r3, #100	; 0x64
 800bfd0:	d901      	bls.n	800bfd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e21f      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfd6:	4b61      	ldr	r3, [pc, #388]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0f0      	beq.n	800bfc4 <HAL_RCC_OscConfig+0xe8>
 800bfe2:	e014      	b.n	800c00e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfe4:	f7fa f81c 	bl	8006020 <HAL_GetTick>
 800bfe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfea:	e008      	b.n	800bffe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfec:	f7fa f818 	bl	8006020 <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	2b64      	cmp	r3, #100	; 0x64
 800bff8:	d901      	bls.n	800bffe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e20b      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bffe:	4b57      	ldr	r3, [pc, #348]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f0      	bne.n	800bfec <HAL_RCC_OscConfig+0x110>
 800c00a:	e000      	b.n	800c00e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c00c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0302 	and.w	r3, r3, #2
 800c016:	2b00      	cmp	r3, #0
 800c018:	d069      	beq.n	800c0ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c01a:	4b50      	ldr	r3, [pc, #320]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f003 030c 	and.w	r3, r3, #12
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00b      	beq.n	800c03e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c026:	4b4d      	ldr	r3, [pc, #308]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	f003 030c 	and.w	r3, r3, #12
 800c02e:	2b08      	cmp	r3, #8
 800c030:	d11c      	bne.n	800c06c <HAL_RCC_OscConfig+0x190>
 800c032:	4b4a      	ldr	r3, [pc, #296]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d116      	bne.n	800c06c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c03e:	4b47      	ldr	r3, [pc, #284]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0302 	and.w	r3, r3, #2
 800c046:	2b00      	cmp	r3, #0
 800c048:	d005      	beq.n	800c056 <HAL_RCC_OscConfig+0x17a>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d001      	beq.n	800c056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e1df      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c056:	4b41      	ldr	r3, [pc, #260]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	493d      	ldr	r1, [pc, #244]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c066:	4313      	orrs	r3, r2
 800c068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c06a:	e040      	b.n	800c0ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d023      	beq.n	800c0bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c074:	4b39      	ldr	r3, [pc, #228]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a38      	ldr	r2, [pc, #224]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c07a:	f043 0301 	orr.w	r3, r3, #1
 800c07e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c080:	f7f9 ffce 	bl	8006020 <HAL_GetTick>
 800c084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c086:	e008      	b.n	800c09a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c088:	f7f9 ffca 	bl	8006020 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b02      	cmp	r3, #2
 800c094:	d901      	bls.n	800c09a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	e1bd      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c09a:	4b30      	ldr	r3, [pc, #192]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0302 	and.w	r3, r3, #2
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d0f0      	beq.n	800c088 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0a6:	4b2d      	ldr	r3, [pc, #180]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	4929      	ldr	r1, [pc, #164]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	600b      	str	r3, [r1, #0]
 800c0ba:	e018      	b.n	800c0ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0bc:	4b27      	ldr	r3, [pc, #156]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a26      	ldr	r2, [pc, #152]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c0c2:	f023 0301 	bic.w	r3, r3, #1
 800c0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0c8:	f7f9 ffaa 	bl	8006020 <HAL_GetTick>
 800c0cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0ce:	e008      	b.n	800c0e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0d0:	f7f9 ffa6 	bl	8006020 <HAL_GetTick>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d901      	bls.n	800c0e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e199      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0e2:	4b1e      	ldr	r3, [pc, #120]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1f0      	bne.n	800c0d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0308 	and.w	r3, r3, #8
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d038      	beq.n	800c16c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d019      	beq.n	800c136 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c102:	4b16      	ldr	r3, [pc, #88]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c106:	4a15      	ldr	r2, [pc, #84]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c108:	f043 0301 	orr.w	r3, r3, #1
 800c10c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c10e:	f7f9 ff87 	bl	8006020 <HAL_GetTick>
 800c112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c114:	e008      	b.n	800c128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c116:	f7f9 ff83 	bl	8006020 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	2b02      	cmp	r3, #2
 800c122:	d901      	bls.n	800c128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c124:	2303      	movs	r3, #3
 800c126:	e176      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c128:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c12a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0f0      	beq.n	800c116 <HAL_RCC_OscConfig+0x23a>
 800c134:	e01a      	b.n	800c16c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c13a:	4a08      	ldr	r2, [pc, #32]	; (800c15c <HAL_RCC_OscConfig+0x280>)
 800c13c:	f023 0301 	bic.w	r3, r3, #1
 800c140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c142:	f7f9 ff6d 	bl	8006020 <HAL_GetTick>
 800c146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c148:	e00a      	b.n	800c160 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c14a:	f7f9 ff69 	bl	8006020 <HAL_GetTick>
 800c14e:	4602      	mov	r2, r0
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	2b02      	cmp	r3, #2
 800c156:	d903      	bls.n	800c160 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c158:	2303      	movs	r3, #3
 800c15a:	e15c      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
 800c15c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c160:	4b91      	ldr	r3, [pc, #580]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c164:	f003 0302 	and.w	r3, r3, #2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1ee      	bne.n	800c14a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 0304 	and.w	r3, r3, #4
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 80a4 	beq.w	800c2c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c17a:	4b8b      	ldr	r3, [pc, #556]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10d      	bne.n	800c1a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c186:	4b88      	ldr	r3, [pc, #544]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	4a87      	ldr	r2, [pc, #540]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c18c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c190:	6413      	str	r3, [r2, #64]	; 0x40
 800c192:	4b85      	ldr	r3, [pc, #532]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c19a:	60bb      	str	r3, [r7, #8]
 800c19c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1a2:	4b82      	ldr	r3, [pc, #520]	; (800c3ac <HAL_RCC_OscConfig+0x4d0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d118      	bne.n	800c1e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c1ae:	4b7f      	ldr	r3, [pc, #508]	; (800c3ac <HAL_RCC_OscConfig+0x4d0>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a7e      	ldr	r2, [pc, #504]	; (800c3ac <HAL_RCC_OscConfig+0x4d0>)
 800c1b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1ba:	f7f9 ff31 	bl	8006020 <HAL_GetTick>
 800c1be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1c0:	e008      	b.n	800c1d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1c2:	f7f9 ff2d 	bl	8006020 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	2b64      	cmp	r3, #100	; 0x64
 800c1ce:	d901      	bls.n	800c1d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e120      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1d4:	4b75      	ldr	r3, [pc, #468]	; (800c3ac <HAL_RCC_OscConfig+0x4d0>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0f0      	beq.n	800c1c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d106      	bne.n	800c1f6 <HAL_RCC_OscConfig+0x31a>
 800c1e8:	4b6f      	ldr	r3, [pc, #444]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ec:	4a6e      	ldr	r2, [pc, #440]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c1ee:	f043 0301 	orr.w	r3, r3, #1
 800c1f2:	6713      	str	r3, [r2, #112]	; 0x70
 800c1f4:	e02d      	b.n	800c252 <HAL_RCC_OscConfig+0x376>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10c      	bne.n	800c218 <HAL_RCC_OscConfig+0x33c>
 800c1fe:	4b6a      	ldr	r3, [pc, #424]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c202:	4a69      	ldr	r2, [pc, #420]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c204:	f023 0301 	bic.w	r3, r3, #1
 800c208:	6713      	str	r3, [r2, #112]	; 0x70
 800c20a:	4b67      	ldr	r3, [pc, #412]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c20e:	4a66      	ldr	r2, [pc, #408]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c210:	f023 0304 	bic.w	r3, r3, #4
 800c214:	6713      	str	r3, [r2, #112]	; 0x70
 800c216:	e01c      	b.n	800c252 <HAL_RCC_OscConfig+0x376>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	2b05      	cmp	r3, #5
 800c21e:	d10c      	bne.n	800c23a <HAL_RCC_OscConfig+0x35e>
 800c220:	4b61      	ldr	r3, [pc, #388]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c224:	4a60      	ldr	r2, [pc, #384]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c226:	f043 0304 	orr.w	r3, r3, #4
 800c22a:	6713      	str	r3, [r2, #112]	; 0x70
 800c22c:	4b5e      	ldr	r3, [pc, #376]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c230:	4a5d      	ldr	r2, [pc, #372]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	6713      	str	r3, [r2, #112]	; 0x70
 800c238:	e00b      	b.n	800c252 <HAL_RCC_OscConfig+0x376>
 800c23a:	4b5b      	ldr	r3, [pc, #364]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c23e:	4a5a      	ldr	r2, [pc, #360]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c240:	f023 0301 	bic.w	r3, r3, #1
 800c244:	6713      	str	r3, [r2, #112]	; 0x70
 800c246:	4b58      	ldr	r3, [pc, #352]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c24a:	4a57      	ldr	r2, [pc, #348]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c24c:	f023 0304 	bic.w	r3, r3, #4
 800c250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d015      	beq.n	800c286 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c25a:	f7f9 fee1 	bl	8006020 <HAL_GetTick>
 800c25e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c260:	e00a      	b.n	800c278 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c262:	f7f9 fedd 	bl	8006020 <HAL_GetTick>
 800c266:	4602      	mov	r2, r0
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c270:	4293      	cmp	r3, r2
 800c272:	d901      	bls.n	800c278 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e0ce      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c278:	4b4b      	ldr	r3, [pc, #300]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c27c:	f003 0302 	and.w	r3, r3, #2
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0ee      	beq.n	800c262 <HAL_RCC_OscConfig+0x386>
 800c284:	e014      	b.n	800c2b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c286:	f7f9 fecb 	bl	8006020 <HAL_GetTick>
 800c28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c28c:	e00a      	b.n	800c2a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c28e:	f7f9 fec7 	bl	8006020 <HAL_GetTick>
 800c292:	4602      	mov	r2, r0
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	f241 3288 	movw	r2, #5000	; 0x1388
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d901      	bls.n	800c2a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e0b8      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2a4:	4b40      	ldr	r3, [pc, #256]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a8:	f003 0302 	and.w	r3, r3, #2
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1ee      	bne.n	800c28e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d105      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2b6:	4b3c      	ldr	r3, [pc, #240]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ba:	4a3b      	ldr	r2, [pc, #236]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c2bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f000 80a4 	beq.w	800c414 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c2cc:	4b36      	ldr	r3, [pc, #216]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f003 030c 	and.w	r3, r3, #12
 800c2d4:	2b08      	cmp	r3, #8
 800c2d6:	d06b      	beq.n	800c3b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d149      	bne.n	800c374 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2e0:	4b31      	ldr	r3, [pc, #196]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a30      	ldr	r2, [pc, #192]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c2e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c2ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ec:	f7f9 fe98 	bl	8006020 <HAL_GetTick>
 800c2f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c2f2:	e008      	b.n	800c306 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2f4:	f7f9 fe94 	bl	8006020 <HAL_GetTick>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d901      	bls.n	800c306 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e087      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c306:	4b28      	ldr	r3, [pc, #160]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1f0      	bne.n	800c2f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	69da      	ldr	r2, [r3, #28]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	431a      	orrs	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	019b      	lsls	r3, r3, #6
 800c322:	431a      	orrs	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	3b01      	subs	r3, #1
 800c32c:	041b      	lsls	r3, r3, #16
 800c32e:	431a      	orrs	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c334:	061b      	lsls	r3, r3, #24
 800c336:	4313      	orrs	r3, r2
 800c338:	4a1b      	ldr	r2, [pc, #108]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c33a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c33e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c340:	4b19      	ldr	r3, [pc, #100]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a18      	ldr	r2, [pc, #96]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c34a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c34c:	f7f9 fe68 	bl	8006020 <HAL_GetTick>
 800c350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c352:	e008      	b.n	800c366 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c354:	f7f9 fe64 	bl	8006020 <HAL_GetTick>
 800c358:	4602      	mov	r2, r0
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d901      	bls.n	800c366 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c362:	2303      	movs	r3, #3
 800c364:	e057      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c366:	4b10      	ldr	r3, [pc, #64]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0f0      	beq.n	800c354 <HAL_RCC_OscConfig+0x478>
 800c372:	e04f      	b.n	800c414 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c374:	4b0c      	ldr	r3, [pc, #48]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a0b      	ldr	r2, [pc, #44]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c37a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c37e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c380:	f7f9 fe4e 	bl	8006020 <HAL_GetTick>
 800c384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c386:	e008      	b.n	800c39a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c388:	f7f9 fe4a 	bl	8006020 <HAL_GetTick>
 800c38c:	4602      	mov	r2, r0
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	2b02      	cmp	r3, #2
 800c394:	d901      	bls.n	800c39a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c396:	2303      	movs	r3, #3
 800c398:	e03d      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c39a:	4b03      	ldr	r3, [pc, #12]	; (800c3a8 <HAL_RCC_OscConfig+0x4cc>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1f0      	bne.n	800c388 <HAL_RCC_OscConfig+0x4ac>
 800c3a6:	e035      	b.n	800c414 <HAL_RCC_OscConfig+0x538>
 800c3a8:	40023800 	.word	0x40023800
 800c3ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c3b0:	4b1b      	ldr	r3, [pc, #108]	; (800c420 <HAL_RCC_OscConfig+0x544>)
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d028      	beq.n	800c410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d121      	bne.n	800c410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d11a      	bne.n	800c410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c3e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d111      	bne.n	800c410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f6:	085b      	lsrs	r3, r3, #1
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d107      	bne.n	800c410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d001      	beq.n	800c414 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	e000      	b.n	800c416 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	40023800 	.word	0x40023800

0800c424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d101      	bne.n	800c43c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e0d0      	b.n	800c5de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c43c:	4b6a      	ldr	r3, [pc, #424]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 030f 	and.w	r3, r3, #15
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	429a      	cmp	r2, r3
 800c448:	d910      	bls.n	800c46c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c44a:	4b67      	ldr	r3, [pc, #412]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f023 020f 	bic.w	r2, r3, #15
 800c452:	4965      	ldr	r1, [pc, #404]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	4313      	orrs	r3, r2
 800c458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c45a:	4b63      	ldr	r3, [pc, #396]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 030f 	and.w	r3, r3, #15
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d001      	beq.n	800c46c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e0b8      	b.n	800c5de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d020      	beq.n	800c4ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0304 	and.w	r3, r3, #4
 800c480:	2b00      	cmp	r3, #0
 800c482:	d005      	beq.n	800c490 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c484:	4b59      	ldr	r3, [pc, #356]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	4a58      	ldr	r2, [pc, #352]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c48a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c48e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0308 	and.w	r3, r3, #8
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d005      	beq.n	800c4a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c49c:	4b53      	ldr	r3, [pc, #332]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	4a52      	ldr	r2, [pc, #328]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c4a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c4a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4a8:	4b50      	ldr	r3, [pc, #320]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	494d      	ldr	r1, [pc, #308]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d040      	beq.n	800c548 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d107      	bne.n	800c4de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4ce:	4b47      	ldr	r3, [pc, #284]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d115      	bne.n	800c506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e07f      	b.n	800c5de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d107      	bne.n	800c4f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4e6:	4b41      	ldr	r3, [pc, #260]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d109      	bne.n	800c506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e073      	b.n	800c5de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4f6:	4b3d      	ldr	r3, [pc, #244]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 0302 	and.w	r3, r3, #2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	e06b      	b.n	800c5de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c506:	4b39      	ldr	r3, [pc, #228]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f023 0203 	bic.w	r2, r3, #3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	4936      	ldr	r1, [pc, #216]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c514:	4313      	orrs	r3, r2
 800c516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c518:	f7f9 fd82 	bl	8006020 <HAL_GetTick>
 800c51c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c51e:	e00a      	b.n	800c536 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c520:	f7f9 fd7e 	bl	8006020 <HAL_GetTick>
 800c524:	4602      	mov	r2, r0
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c52e:	4293      	cmp	r3, r2
 800c530:	d901      	bls.n	800c536 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c532:	2303      	movs	r3, #3
 800c534:	e053      	b.n	800c5de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c536:	4b2d      	ldr	r3, [pc, #180]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f003 020c 	and.w	r2, r3, #12
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	429a      	cmp	r2, r3
 800c546:	d1eb      	bne.n	800c520 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c548:	4b27      	ldr	r3, [pc, #156]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 030f 	and.w	r3, r3, #15
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	429a      	cmp	r2, r3
 800c554:	d210      	bcs.n	800c578 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c556:	4b24      	ldr	r3, [pc, #144]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f023 020f 	bic.w	r2, r3, #15
 800c55e:	4922      	ldr	r1, [pc, #136]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	4313      	orrs	r3, r2
 800c564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c566:	4b20      	ldr	r3, [pc, #128]	; (800c5e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 030f 	and.w	r3, r3, #15
 800c56e:	683a      	ldr	r2, [r7, #0]
 800c570:	429a      	cmp	r2, r3
 800c572:	d001      	beq.n	800c578 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e032      	b.n	800c5de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f003 0304 	and.w	r3, r3, #4
 800c580:	2b00      	cmp	r3, #0
 800c582:	d008      	beq.n	800c596 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c584:	4b19      	ldr	r3, [pc, #100]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	4916      	ldr	r1, [pc, #88]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c592:	4313      	orrs	r3, r2
 800c594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 0308 	and.w	r3, r3, #8
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d009      	beq.n	800c5b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c5a2:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	00db      	lsls	r3, r3, #3
 800c5b0:	490e      	ldr	r1, [pc, #56]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c5b6:	f000 f821 	bl	800c5fc <HAL_RCC_GetSysClockFreq>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <HAL_RCC_ClockConfig+0x1c8>)
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	091b      	lsrs	r3, r3, #4
 800c5c2:	f003 030f 	and.w	r3, r3, #15
 800c5c6:	490a      	ldr	r1, [pc, #40]	; (800c5f0 <HAL_RCC_ClockConfig+0x1cc>)
 800c5c8:	5ccb      	ldrb	r3, [r1, r3]
 800c5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ce:	4a09      	ldr	r2, [pc, #36]	; (800c5f4 <HAL_RCC_ClockConfig+0x1d0>)
 800c5d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c5d2:	4b09      	ldr	r3, [pc, #36]	; (800c5f8 <HAL_RCC_ClockConfig+0x1d4>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7f7 fb34 	bl	8003c44 <HAL_InitTick>

  return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	40023c00 	.word	0x40023c00
 800c5ec:	40023800 	.word	0x40023800
 800c5f0:	0801af34 	.word	0x0801af34
 800c5f4:	20000014 	.word	0x20000014
 800c5f8:	20000034 	.word	0x20000034

0800c5fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5fc:	b5b0      	push	{r4, r5, r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c602:	2100      	movs	r1, #0
 800c604:	6079      	str	r1, [r7, #4]
 800c606:	2100      	movs	r1, #0
 800c608:	60f9      	str	r1, [r7, #12]
 800c60a:	2100      	movs	r1, #0
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800c60e:	2100      	movs	r1, #0
 800c610:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c612:	4952      	ldr	r1, [pc, #328]	; (800c75c <HAL_RCC_GetSysClockFreq+0x160>)
 800c614:	6889      	ldr	r1, [r1, #8]
 800c616:	f001 010c 	and.w	r1, r1, #12
 800c61a:	2908      	cmp	r1, #8
 800c61c:	d00d      	beq.n	800c63a <HAL_RCC_GetSysClockFreq+0x3e>
 800c61e:	2908      	cmp	r1, #8
 800c620:	f200 8094 	bhi.w	800c74c <HAL_RCC_GetSysClockFreq+0x150>
 800c624:	2900      	cmp	r1, #0
 800c626:	d002      	beq.n	800c62e <HAL_RCC_GetSysClockFreq+0x32>
 800c628:	2904      	cmp	r1, #4
 800c62a:	d003      	beq.n	800c634 <HAL_RCC_GetSysClockFreq+0x38>
 800c62c:	e08e      	b.n	800c74c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c62e:	4b4c      	ldr	r3, [pc, #304]	; (800c760 <HAL_RCC_GetSysClockFreq+0x164>)
 800c630:	60bb      	str	r3, [r7, #8]
      break;
 800c632:	e08e      	b.n	800c752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c634:	4b4b      	ldr	r3, [pc, #300]	; (800c764 <HAL_RCC_GetSysClockFreq+0x168>)
 800c636:	60bb      	str	r3, [r7, #8]
      break;
 800c638:	e08b      	b.n	800c752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c63a:	4948      	ldr	r1, [pc, #288]	; (800c75c <HAL_RCC_GetSysClockFreq+0x160>)
 800c63c:	6849      	ldr	r1, [r1, #4]
 800c63e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800c642:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c644:	4945      	ldr	r1, [pc, #276]	; (800c75c <HAL_RCC_GetSysClockFreq+0x160>)
 800c646:	6849      	ldr	r1, [r1, #4]
 800c648:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c64c:	2900      	cmp	r1, #0
 800c64e:	d024      	beq.n	800c69a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c650:	4942      	ldr	r1, [pc, #264]	; (800c75c <HAL_RCC_GetSysClockFreq+0x160>)
 800c652:	6849      	ldr	r1, [r1, #4]
 800c654:	0989      	lsrs	r1, r1, #6
 800c656:	4608      	mov	r0, r1
 800c658:	f04f 0100 	mov.w	r1, #0
 800c65c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c660:	f04f 0500 	mov.w	r5, #0
 800c664:	ea00 0204 	and.w	r2, r0, r4
 800c668:	ea01 0305 	and.w	r3, r1, r5
 800c66c:	493d      	ldr	r1, [pc, #244]	; (800c764 <HAL_RCC_GetSysClockFreq+0x168>)
 800c66e:	fb01 f003 	mul.w	r0, r1, r3
 800c672:	2100      	movs	r1, #0
 800c674:	fb01 f102 	mul.w	r1, r1, r2
 800c678:	1844      	adds	r4, r0, r1
 800c67a:	493a      	ldr	r1, [pc, #232]	; (800c764 <HAL_RCC_GetSysClockFreq+0x168>)
 800c67c:	fba2 0101 	umull	r0, r1, r2, r1
 800c680:	1863      	adds	r3, r4, r1
 800c682:	4619      	mov	r1, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	461a      	mov	r2, r3
 800c688:	f04f 0300 	mov.w	r3, #0
 800c68c:	f7f4 fb4c 	bl	8000d28 <__aeabi_uldivmod>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	4613      	mov	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	e04a      	b.n	800c730 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c69a:	4b30      	ldr	r3, [pc, #192]	; (800c75c <HAL_RCC_GetSysClockFreq+0x160>)
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	099b      	lsrs	r3, r3, #6
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	f04f 0300 	mov.w	r3, #0
 800c6a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c6aa:	f04f 0100 	mov.w	r1, #0
 800c6ae:	ea02 0400 	and.w	r4, r2, r0
 800c6b2:	ea03 0501 	and.w	r5, r3, r1
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f04f 0200 	mov.w	r2, #0
 800c6be:	f04f 0300 	mov.w	r3, #0
 800c6c2:	014b      	lsls	r3, r1, #5
 800c6c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c6c8:	0142      	lsls	r2, r0, #5
 800c6ca:	4610      	mov	r0, r2
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	1b00      	subs	r0, r0, r4
 800c6d0:	eb61 0105 	sbc.w	r1, r1, r5
 800c6d4:	f04f 0200 	mov.w	r2, #0
 800c6d8:	f04f 0300 	mov.w	r3, #0
 800c6dc:	018b      	lsls	r3, r1, #6
 800c6de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c6e2:	0182      	lsls	r2, r0, #6
 800c6e4:	1a12      	subs	r2, r2, r0
 800c6e6:	eb63 0301 	sbc.w	r3, r3, r1
 800c6ea:	f04f 0000 	mov.w	r0, #0
 800c6ee:	f04f 0100 	mov.w	r1, #0
 800c6f2:	00d9      	lsls	r1, r3, #3
 800c6f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c6f8:	00d0      	lsls	r0, r2, #3
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	1912      	adds	r2, r2, r4
 800c700:	eb45 0303 	adc.w	r3, r5, r3
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	f04f 0100 	mov.w	r1, #0
 800c70c:	0299      	lsls	r1, r3, #10
 800c70e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c712:	0290      	lsls	r0, r2, #10
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	4610      	mov	r0, r2
 800c71a:	4619      	mov	r1, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	461a      	mov	r2, r3
 800c720:	f04f 0300 	mov.w	r3, #0
 800c724:	f7f4 fb00 	bl	8000d28 <__aeabi_uldivmod>
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4613      	mov	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c730:	4b0a      	ldr	r3, [pc, #40]	; (800c75c <HAL_RCC_GetSysClockFreq+0x160>)
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	0c1b      	lsrs	r3, r3, #16
 800c736:	f003 0303 	and.w	r3, r3, #3
 800c73a:	3301      	adds	r3, #1
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	fbb2 f3f3 	udiv	r3, r2, r3
 800c748:	60bb      	str	r3, [r7, #8]
      break;
 800c74a:	e002      	b.n	800c752 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c74c:	4b04      	ldr	r3, [pc, #16]	; (800c760 <HAL_RCC_GetSysClockFreq+0x164>)
 800c74e:	60bb      	str	r3, [r7, #8]
      break;
 800c750:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c752:	68bb      	ldr	r3, [r7, #8]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bdb0      	pop	{r4, r5, r7, pc}
 800c75c:	40023800 	.word	0x40023800
 800c760:	00f42400 	.word	0x00f42400
 800c764:	017d7840 	.word	0x017d7840

0800c768 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c768:	b480      	push	{r7}
 800c76a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c76c:	4b03      	ldr	r3, [pc, #12]	; (800c77c <HAL_RCC_GetHCLKFreq+0x14>)
 800c76e:	681b      	ldr	r3, [r3, #0]
}
 800c770:	4618      	mov	r0, r3
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	20000014 	.word	0x20000014

0800c780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c784:	f7ff fff0 	bl	800c768 <HAL_RCC_GetHCLKFreq>
 800c788:	4602      	mov	r2, r0
 800c78a:	4b05      	ldr	r3, [pc, #20]	; (800c7a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	0a9b      	lsrs	r3, r3, #10
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	4903      	ldr	r1, [pc, #12]	; (800c7a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c796:	5ccb      	ldrb	r3, [r1, r3]
 800c798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	40023800 	.word	0x40023800
 800c7a4:	0801af44 	.word	0x0801af44

0800c7a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c7ac:	f7ff ffdc 	bl	800c768 <HAL_RCC_GetHCLKFreq>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	0b5b      	lsrs	r3, r3, #13
 800c7b8:	f003 0307 	and.w	r3, r3, #7
 800c7bc:	4903      	ldr	r1, [pc, #12]	; (800c7cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7be:	5ccb      	ldrb	r3, [r1, r3]
 800c7c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	40023800 	.word	0x40023800
 800c7cc:	0801af44 	.word	0x0801af44

0800c7d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	220f      	movs	r2, #15
 800c7de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c7e0:	4b12      	ldr	r3, [pc, #72]	; (800c82c <HAL_RCC_GetClockConfig+0x5c>)
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f003 0203 	and.w	r2, r3, #3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c7ec:	4b0f      	ldr	r3, [pc, #60]	; (800c82c <HAL_RCC_GetClockConfig+0x5c>)
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c7f8:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <HAL_RCC_GetClockConfig+0x5c>)
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c804:	4b09      	ldr	r3, [pc, #36]	; (800c82c <HAL_RCC_GetClockConfig+0x5c>)
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	08db      	lsrs	r3, r3, #3
 800c80a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c812:	4b07      	ldr	r3, [pc, #28]	; (800c830 <HAL_RCC_GetClockConfig+0x60>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 020f 	and.w	r2, r3, #15
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	601a      	str	r2, [r3, #0]
}
 800c81e:	bf00      	nop
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	40023800 	.word	0x40023800
 800c830:	40023c00 	.word	0x40023c00

0800c834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d012      	beq.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c85c:	4b69      	ldr	r3, [pc, #420]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	4a68      	ldr	r2, [pc, #416]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c862:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c866:	6093      	str	r3, [r2, #8]
 800c868:	4b66      	ldr	r3, [pc, #408]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c86a:	689a      	ldr	r2, [r3, #8]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c870:	4964      	ldr	r1, [pc, #400]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c872:	4313      	orrs	r3, r2
 800c874:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c87e:	2301      	movs	r3, #1
 800c880:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d017      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c88e:	4b5d      	ldr	r3, [pc, #372]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89c:	4959      	ldr	r1, [pc, #356]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8ac:	d101      	bne.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d101      	bne.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d017      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c8ca:	4b4e      	ldr	r3, [pc, #312]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	494a      	ldr	r1, [pc, #296]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8e8:	d101      	bne.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c906:	2301      	movs	r3, #1
 800c908:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 0320 	and.w	r3, r3, #32
 800c912:	2b00      	cmp	r3, #0
 800c914:	f000 808b 	beq.w	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c918:	4b3a      	ldr	r3, [pc, #232]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	4a39      	ldr	r2, [pc, #228]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c91e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c922:	6413      	str	r3, [r2, #64]	; 0x40
 800c924:	4b37      	ldr	r3, [pc, #220]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c92c:	60bb      	str	r3, [r7, #8]
 800c92e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c930:	4b35      	ldr	r3, [pc, #212]	; (800ca08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a34      	ldr	r2, [pc, #208]	; (800ca08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c93a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c93c:	f7f9 fb70 	bl	8006020 <HAL_GetTick>
 800c940:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c942:	e008      	b.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c944:	f7f9 fb6c 	bl	8006020 <HAL_GetTick>
 800c948:	4602      	mov	r2, r0
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	2b64      	cmp	r3, #100	; 0x64
 800c950:	d901      	bls.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c952:	2303      	movs	r3, #3
 800c954:	e357      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c956:	4b2c      	ldr	r3, [pc, #176]	; (800ca08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0f0      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c962:	4b28      	ldr	r3, [pc, #160]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c96a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d035      	beq.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d02e      	beq.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c980:	4b20      	ldr	r3, [pc, #128]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c988:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c98a:	4b1e      	ldr	r3, [pc, #120]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c98e:	4a1d      	ldr	r2, [pc, #116]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c994:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c996:	4b1b      	ldr	r3, [pc, #108]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c99a:	4a1a      	ldr	r2, [pc, #104]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c99c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c9a2:	4a18      	ldr	r2, [pc, #96]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c9a8:	4b16      	ldr	r3, [pc, #88]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d114      	bne.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9b4:	f7f9 fb34 	bl	8006020 <HAL_GetTick>
 800c9b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9ba:	e00a      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9bc:	f7f9 fb30 	bl	8006020 <HAL_GetTick>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d901      	bls.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e319      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0ee      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9ea:	d111      	bne.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c9ec:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c9f8:	4b04      	ldr	r3, [pc, #16]	; (800ca0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c9fa:	400b      	ands	r3, r1
 800c9fc:	4901      	ldr	r1, [pc, #4]	; (800ca04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	608b      	str	r3, [r1, #8]
 800ca02:	e00b      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ca04:	40023800 	.word	0x40023800
 800ca08:	40007000 	.word	0x40007000
 800ca0c:	0ffffcff 	.word	0x0ffffcff
 800ca10:	4bb1      	ldr	r3, [pc, #708]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	4ab0      	ldr	r2, [pc, #704]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca1a:	6093      	str	r3, [r2, #8]
 800ca1c:	4bae      	ldr	r3, [pc, #696]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca28:	49ab      	ldr	r1, [pc, #684]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0310 	and.w	r3, r3, #16
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d010      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca3a:	4ba7      	ldr	r3, [pc, #668]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca40:	4aa5      	ldr	r2, [pc, #660]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ca4a:	4ba3      	ldr	r3, [pc, #652]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca54:	49a0      	ldr	r1, [pc, #640]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca56:	4313      	orrs	r3, r2
 800ca58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00a      	beq.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ca68:	4b9b      	ldr	r3, [pc, #620]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca76:	4998      	ldr	r1, [pc, #608]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00a      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ca8a:	4b93      	ldr	r3, [pc, #588]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca98:	498f      	ldr	r1, [pc, #572]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00a      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800caac:	4b8a      	ldr	r3, [pc, #552]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800caae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caba:	4987      	ldr	r1, [pc, #540]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00a      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cace:	4b82      	ldr	r3, [pc, #520]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cadc:	497e      	ldr	r1, [pc, #504]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cade:	4313      	orrs	r3, r2
 800cae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00a      	beq.n	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800caf0:	4b79      	ldr	r3, [pc, #484]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800caf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf6:	f023 0203 	bic.w	r2, r3, #3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafe:	4976      	ldr	r1, [pc, #472]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb00:	4313      	orrs	r3, r2
 800cb02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00a      	beq.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cb12:	4b71      	ldr	r3, [pc, #452]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb18:	f023 020c 	bic.w	r2, r3, #12
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb20:	496d      	ldr	r1, [pc, #436]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00a      	beq.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cb34:	4b68      	ldr	r3, [pc, #416]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb42:	4965      	ldr	r1, [pc, #404]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb44:	4313      	orrs	r3, r2
 800cb46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00a      	beq.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cb56:	4b60      	ldr	r3, [pc, #384]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb64:	495c      	ldr	r1, [pc, #368]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb66:	4313      	orrs	r3, r2
 800cb68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00a      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cb78:	4b57      	ldr	r3, [pc, #348]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb86:	4954      	ldr	r1, [pc, #336]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00a      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800cb9a:	4b4f      	ldr	r3, [pc, #316]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cb9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cba0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba8:	494b      	ldr	r1, [pc, #300]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00a      	beq.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800cbbc:	4b46      	ldr	r3, [pc, #280]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbca:	4943      	ldr	r1, [pc, #268]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00a      	beq.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800cbde:	4b3e      	ldr	r3, [pc, #248]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbe4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbec:	493a      	ldr	r1, [pc, #232]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00a      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cc00:	4b35      	ldr	r3, [pc, #212]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc0e:	4932      	ldr	r1, [pc, #200]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc10:	4313      	orrs	r3, r2
 800cc12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d011      	beq.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cc22:	4b2d      	ldr	r3, [pc, #180]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc30:	4929      	ldr	r1, [pc, #164]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc32:	4313      	orrs	r3, r2
 800cc34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc40:	d101      	bne.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800cc42:	2301      	movs	r3, #1
 800cc44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f003 0308 	and.w	r3, r3, #8
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800cc52:	2301      	movs	r3, #1
 800cc54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc62:	4b1d      	ldr	r3, [pc, #116]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc70:	4919      	ldr	r1, [pc, #100]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00b      	beq.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cc84:	4b14      	ldr	r3, [pc, #80]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc94:	4910      	ldr	r1, [pc, #64]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d006      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 80d9 	beq.w	800ce62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ccb0:	4b09      	ldr	r3, [pc, #36]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a08      	ldr	r2, [pc, #32]	; (800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800ccb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccbc:	f7f9 f9b0 	bl	8006020 <HAL_GetTick>
 800ccc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ccc2:	e00b      	b.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ccc4:	f7f9 f9ac 	bl	8006020 <HAL_GetTick>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	2b64      	cmp	r3, #100	; 0x64
 800ccd0:	d904      	bls.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e197      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ccd6:	bf00      	nop
 800ccd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ccdc:	4b6c      	ldr	r3, [pc, #432]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1ed      	bne.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d021      	beq.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d11d      	bne.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ccfc:	4b64      	ldr	r3, [pc, #400]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ccfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd02:	0c1b      	lsrs	r3, r3, #16
 800cd04:	f003 0303 	and.w	r3, r3, #3
 800cd08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cd0a:	4b61      	ldr	r3, [pc, #388]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd10:	0e1b      	lsrs	r3, r3, #24
 800cd12:	f003 030f 	and.w	r3, r3, #15
 800cd16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	019a      	lsls	r2, r3, #6
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	041b      	lsls	r3, r3, #16
 800cd22:	431a      	orrs	r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	061b      	lsls	r3, r3, #24
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	071b      	lsls	r3, r3, #28
 800cd30:	4957      	ldr	r1, [pc, #348]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd32:	4313      	orrs	r3, r2
 800cd34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d004      	beq.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd4c:	d00a      	beq.n	800cd64 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d02e      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd62:	d129      	bne.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cd64:	4b4a      	ldr	r3, [pc, #296]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd6a:	0c1b      	lsrs	r3, r3, #16
 800cd6c:	f003 0303 	and.w	r3, r3, #3
 800cd70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cd72:	4b47      	ldr	r3, [pc, #284]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd78:	0f1b      	lsrs	r3, r3, #28
 800cd7a:	f003 0307 	and.w	r3, r3, #7
 800cd7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	019a      	lsls	r2, r3, #6
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	041b      	lsls	r3, r3, #16
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	061b      	lsls	r3, r3, #24
 800cd92:	431a      	orrs	r2, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	071b      	lsls	r3, r3, #28
 800cd98:	493d      	ldr	r1, [pc, #244]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800cda0:	4b3b      	ldr	r3, [pc, #236]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cda2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda6:	f023 021f 	bic.w	r2, r3, #31
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	4937      	ldr	r1, [pc, #220]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d01d      	beq.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cdc4:	4b32      	ldr	r3, [pc, #200]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdca:	0e1b      	lsrs	r3, r3, #24
 800cdcc:	f003 030f 	and.w	r3, r3, #15
 800cdd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800cdd2:	4b2f      	ldr	r3, [pc, #188]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdd8:	0f1b      	lsrs	r3, r3, #28
 800cdda:	f003 0307 	and.w	r3, r3, #7
 800cdde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	019a      	lsls	r2, r3, #6
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	041b      	lsls	r3, r3, #16
 800cdec:	431a      	orrs	r2, r3
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	061b      	lsls	r3, r3, #24
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	071b      	lsls	r3, r3, #28
 800cdf8:	4925      	ldr	r1, [pc, #148]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d011      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	019a      	lsls	r2, r3, #6
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	041b      	lsls	r3, r3, #16
 800ce18:	431a      	orrs	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	061b      	lsls	r3, r3, #24
 800ce20:	431a      	orrs	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	071b      	lsls	r3, r3, #28
 800ce28:	4919      	ldr	r1, [pc, #100]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ce30:	4b17      	ldr	r3, [pc, #92]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a16      	ldr	r2, [pc, #88]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce3c:	f7f9 f8f0 	bl	8006020 <HAL_GetTick>
 800ce40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ce42:	e008      	b.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ce44:	f7f9 f8ec 	bl	8006020 <HAL_GetTick>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	2b64      	cmp	r3, #100	; 0x64
 800ce50:	d901      	bls.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e0d7      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ce56:	4b0e      	ldr	r3, [pc, #56]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d0f0      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	f040 80cd 	bne.w	800d004 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ce6a:	4b09      	ldr	r3, [pc, #36]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a08      	ldr	r2, [pc, #32]	; (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ce70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce76:	f7f9 f8d3 	bl	8006020 <HAL_GetTick>
 800ce7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ce7c:	e00a      	b.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ce7e:	f7f9 f8cf 	bl	8006020 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b64      	cmp	r3, #100	; 0x64
 800ce8a:	d903      	bls.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e0ba      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ce90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ce94:	4b5e      	ldr	r3, [pc, #376]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea0:	d0ed      	beq.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d009      	beq.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d02e      	beq.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d12a      	bne.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ceca:	4b51      	ldr	r3, [pc, #324]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ced0:	0c1b      	lsrs	r3, r3, #16
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ced8:	4b4d      	ldr	r3, [pc, #308]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ceda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cede:	0f1b      	lsrs	r3, r3, #28
 800cee0:	f003 0307 	and.w	r3, r3, #7
 800cee4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	019a      	lsls	r2, r3, #6
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	041b      	lsls	r3, r3, #16
 800cef0:	431a      	orrs	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	061b      	lsls	r3, r3, #24
 800cef8:	431a      	orrs	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	071b      	lsls	r3, r3, #28
 800cefe:	4944      	ldr	r1, [pc, #272]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf00:	4313      	orrs	r3, r2
 800cf02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cf06:	4b42      	ldr	r3, [pc, #264]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf14:	3b01      	subs	r3, #1
 800cf16:	021b      	lsls	r3, r3, #8
 800cf18:	493d      	ldr	r1, [pc, #244]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d022      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf34:	d11d      	bne.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cf36:	4b36      	ldr	r3, [pc, #216]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf3c:	0e1b      	lsrs	r3, r3, #24
 800cf3e:	f003 030f 	and.w	r3, r3, #15
 800cf42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cf44:	4b32      	ldr	r3, [pc, #200]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf4a:	0f1b      	lsrs	r3, r3, #28
 800cf4c:	f003 0307 	and.w	r3, r3, #7
 800cf50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	695b      	ldr	r3, [r3, #20]
 800cf56:	019a      	lsls	r2, r3, #6
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a1b      	ldr	r3, [r3, #32]
 800cf5c:	041b      	lsls	r3, r3, #16
 800cf5e:	431a      	orrs	r2, r3
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	061b      	lsls	r3, r3, #24
 800cf64:	431a      	orrs	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	071b      	lsls	r3, r3, #28
 800cf6a:	4929      	ldr	r1, [pc, #164]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f003 0308 	and.w	r3, r3, #8
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d028      	beq.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cf7e:	4b24      	ldr	r3, [pc, #144]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf84:	0e1b      	lsrs	r3, r3, #24
 800cf86:	f003 030f 	and.w	r3, r3, #15
 800cf8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cf8c:	4b20      	ldr	r3, [pc, #128]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cf8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf92:	0c1b      	lsrs	r3, r3, #16
 800cf94:	f003 0303 	and.w	r3, r3, #3
 800cf98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	019a      	lsls	r2, r3, #6
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	041b      	lsls	r3, r3, #16
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	061b      	lsls	r3, r3, #24
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	69db      	ldr	r3, [r3, #28]
 800cfb0:	071b      	lsls	r3, r3, #28
 800cfb2:	4917      	ldr	r1, [pc, #92]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cfba:	4b15      	ldr	r3, [pc, #84]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc8:	4911      	ldr	r1, [pc, #68]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cfd0:	4b0f      	ldr	r3, [pc, #60]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a0e      	ldr	r2, [pc, #56]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cfd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfdc:	f7f9 f820 	bl	8006020 <HAL_GetTick>
 800cfe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cfe2:	e008      	b.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cfe4:	f7f9 f81c 	bl	8006020 <HAL_GetTick>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	1ad3      	subs	r3, r2, r3
 800cfee:	2b64      	cmp	r3, #100	; 0x64
 800cff0:	d901      	bls.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cff2:	2303      	movs	r3, #3
 800cff4:	e007      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cff6:	4b06      	ldr	r3, [pc, #24]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d002:	d1ef      	bne.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3720      	adds	r7, #32
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	40023800 	.word	0x40023800

0800d014 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d014:	b480      	push	{r7}
 800d016:	b087      	sub	sp, #28
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d024:	2300      	movs	r3, #0
 800d026:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d032:	f040 808c 	bne.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d036:	4b95      	ldr	r3, [pc, #596]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d03c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d044:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d04c:	d07c      	beq.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d054:	d87d      	bhi.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d004      	beq.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d062:	d039      	beq.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d064:	e075      	b.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d066:	4b89      	ldr	r3, [pc, #548]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d108      	bne.n	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d072:	4b86      	ldr	r3, [pc, #536]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d07a:	4a85      	ldr	r2, [pc, #532]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d080:	613b      	str	r3, [r7, #16]
 800d082:	e007      	b.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d084:	4b81      	ldr	r3, [pc, #516]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d08c:	4a81      	ldr	r2, [pc, #516]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d092:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d094:	4b7d      	ldr	r3, [pc, #500]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d09a:	0e1b      	lsrs	r3, r3, #24
 800d09c:	f003 030f 	and.w	r3, r3, #15
 800d0a0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d0a2:	4b7a      	ldr	r3, [pc, #488]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0a8:	099b      	lsrs	r3, r3, #6
 800d0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	fb02 f203 	mul.w	r2, r2, r3
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d0bc:	4b73      	ldr	r3, [pc, #460]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	f003 031f 	and.w	r3, r3, #31
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d0cc:	697a      	ldr	r2, [r7, #20]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0d4:	617b      	str	r3, [r7, #20]
        break;
 800d0d6:	e03d      	b.n	800d154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d0d8:	4b6c      	ldr	r3, [pc, #432]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d108      	bne.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d0e4:	4b69      	ldr	r3, [pc, #420]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0ec:	4a68      	ldr	r2, [pc, #416]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f2:	613b      	str	r3, [r7, #16]
 800d0f4:	e007      	b.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d0f6:	4b65      	ldr	r3, [pc, #404]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0fe:	4a65      	ldr	r2, [pc, #404]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d100:	fbb2 f3f3 	udiv	r3, r2, r3
 800d104:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d106:	4b61      	ldr	r3, [pc, #388]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d10c:	0e1b      	lsrs	r3, r3, #24
 800d10e:	f003 030f 	and.w	r3, r3, #15
 800d112:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d114:	4b5d      	ldr	r3, [pc, #372]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d11a:	099b      	lsrs	r3, r3, #6
 800d11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	fb02 f203 	mul.w	r2, r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	fbb2 f3f3 	udiv	r3, r2, r3
 800d12c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d12e:	4b57      	ldr	r3, [pc, #348]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d134:	f003 031f 	and.w	r3, r3, #31
 800d138:	3301      	adds	r3, #1
 800d13a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	fbb2 f3f3 	udiv	r3, r2, r3
 800d144:	617b      	str	r3, [r7, #20]
        break;
 800d146:	e005      	b.n	800d154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d148:	4b53      	ldr	r3, [pc, #332]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d14a:	617b      	str	r3, [r7, #20]
        break;
 800d14c:	e002      	b.n	800d154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800d14e:	bf00      	nop
 800d150:	e000      	b.n	800d154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800d152:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d15a:	f040 808c 	bne.w	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d15e:	4b4b      	ldr	r3, [pc, #300]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d164:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d16c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d174:	d07c      	beq.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d17c:	d87d      	bhi.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d004      	beq.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d18a:	d039      	beq.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d18c:	e075      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d18e:	4b3f      	ldr	r3, [pc, #252]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d108      	bne.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d19a:	4b3c      	ldr	r3, [pc, #240]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1a2:	4a3b      	ldr	r2, [pc, #236]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a8:	613b      	str	r3, [r7, #16]
 800d1aa:	e007      	b.n	800d1bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d1ac:	4b37      	ldr	r3, [pc, #220]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1b4:	4a37      	ldr	r2, [pc, #220]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d1bc:	4b33      	ldr	r3, [pc, #204]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c2:	0e1b      	lsrs	r3, r3, #24
 800d1c4:	f003 030f 	and.w	r3, r3, #15
 800d1c8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d1ca:	4b30      	ldr	r3, [pc, #192]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1d0:	099b      	lsrs	r3, r3, #6
 800d1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d6:	693a      	ldr	r2, [r7, #16]
 800d1d8:	fb02 f203 	mul.w	r2, r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1e2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d1e4:	4b29      	ldr	r3, [pc, #164]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d1e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ea:	0a1b      	lsrs	r3, r3, #8
 800d1ec:	f003 031f 	and.w	r3, r3, #31
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d1f4:	697a      	ldr	r2, [r7, #20]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1fc:	617b      	str	r3, [r7, #20]
        break;
 800d1fe:	e03d      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d200:	4b22      	ldr	r3, [pc, #136]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d108      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d20c:	4b1f      	ldr	r3, [pc, #124]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d214:	4a1e      	ldr	r2, [pc, #120]	; (800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d216:	fbb2 f3f3 	udiv	r3, r2, r3
 800d21a:	613b      	str	r3, [r7, #16]
 800d21c:	e007      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d21e:	4b1b      	ldr	r3, [pc, #108]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d226:	4a1b      	ldr	r2, [pc, #108]	; (800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d228:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d22e:	4b17      	ldr	r3, [pc, #92]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d234:	0e1b      	lsrs	r3, r3, #24
 800d236:	f003 030f 	and.w	r3, r3, #15
 800d23a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d242:	099b      	lsrs	r3, r3, #6
 800d244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	fb02 f203 	mul.w	r2, r2, r3
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	fbb2 f3f3 	udiv	r3, r2, r3
 800d254:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d256:	4b0d      	ldr	r3, [pc, #52]	; (800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d25c:	f003 031f 	and.w	r3, r3, #31
 800d260:	3301      	adds	r3, #1
 800d262:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	fbb2 f3f3 	udiv	r3, r2, r3
 800d26c:	617b      	str	r3, [r7, #20]
        break;
 800d26e:	e005      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d270:	4b09      	ldr	r3, [pc, #36]	; (800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d272:	617b      	str	r3, [r7, #20]
        break;
 800d274:	e002      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800d276:	bf00      	nop
 800d278:	e000      	b.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800d27a:	bf00      	nop

  return frequency;
 800d27c:	697b      	ldr	r3, [r7, #20]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	371c      	adds	r7, #28
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	40023800 	.word	0x40023800
 800d290:	00f42400 	.word	0x00f42400
 800d294:	017d7840 	.word	0x017d7840
 800d298:	00bb8000 	.word	0x00bb8000

0800d29c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e081      	b.n	800d3b2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7f5b      	ldrb	r3, [r3, #29]
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d105      	bne.n	800d2c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7f6 f874 	bl	80033ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	22ca      	movs	r2, #202	; 0xca
 800d2d0:	625a      	str	r2, [r3, #36]	; 0x24
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2253      	movs	r2, #83	; 0x53
 800d2d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fb16 	bl	800d90c <RTC_EnterInitMode>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d008      	beq.n	800d2f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	22ff      	movs	r2, #255	; 0xff
 800d2ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2204      	movs	r2, #4
 800d2f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e05c      	b.n	800d3b2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6899      	ldr	r1, [r3, #8]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b2e      	ldr	r3, [pc, #184]	; (800d3bc <HAL_RTC_Init+0x120>)
 800d304:	400b      	ands	r3, r1
 800d306:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6899      	ldr	r1, [r3, #8]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685a      	ldr	r2, [r3, #4]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	431a      	orrs	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	431a      	orrs	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	430a      	orrs	r2, r1
 800d324:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	68d2      	ldr	r2, [r2, #12]
 800d32e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6919      	ldr	r1, [r3, #16]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	041a      	lsls	r2, r3, #16
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	430a      	orrs	r2, r1
 800d342:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68da      	ldr	r2, [r3, #12]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d352:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	f003 0320 	and.w	r3, r3, #32
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10e      	bne.n	800d380 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 faaa 	bl	800d8bc <HAL_RTC_WaitForSynchro>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d008      	beq.n	800d380 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	22ff      	movs	r2, #255	; 0xff
 800d374:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2204      	movs	r2, #4
 800d37a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	e018      	b.n	800d3b2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f022 0208 	bic.w	r2, r2, #8
 800d38e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	699a      	ldr	r2, [r3, #24]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	22ff      	movs	r2, #255	; 0xff
 800d3a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
  }
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	ff8fffbf 	.word	0xff8fffbf

0800d3c0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d3c0:	b590      	push	{r4, r7, lr}
 800d3c2:	b087      	sub	sp, #28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	7f1b      	ldrb	r3, [r3, #28]
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d101      	bne.n	800d3dc <HAL_RTC_SetTime+0x1c>
 800d3d8:	2302      	movs	r3, #2
 800d3da:	e0a8      	b.n	800d52e <HAL_RTC_SetTime+0x16e>
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2202      	movs	r2, #2
 800d3e6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d126      	bne.n	800d43c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2200      	movs	r2, #0
 800d400:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	f000 faac 	bl	800d964 <RTC_ByteToBcd2>
 800d40c:	4603      	mov	r3, r0
 800d40e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	785b      	ldrb	r3, [r3, #1]
 800d414:	4618      	mov	r0, r3
 800d416:	f000 faa5 	bl	800d964 <RTC_ByteToBcd2>
 800d41a:	4603      	mov	r3, r0
 800d41c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d41e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	789b      	ldrb	r3, [r3, #2]
 800d424:	4618      	mov	r0, r3
 800d426:	f000 fa9d 	bl	800d964 <RTC_ByteToBcd2>
 800d42a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d42c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	7b1b      	ldrb	r3, [r3, #12]
 800d434:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d436:	4313      	orrs	r3, r2
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	e018      	b.n	800d46e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d446:	2b00      	cmp	r3, #0
 800d448:	d102      	bne.n	800d450 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2200      	movs	r2, #0
 800d44e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	785b      	ldrb	r3, [r3, #1]
 800d45a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d45c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d462:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	7b1b      	ldrb	r3, [r3, #12]
 800d468:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d46a:	4313      	orrs	r3, r2
 800d46c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	22ca      	movs	r2, #202	; 0xca
 800d474:	625a      	str	r2, [r3, #36]	; 0x24
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2253      	movs	r2, #83	; 0x53
 800d47c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f000 fa44 	bl	800d90c <RTC_EnterInitMode>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00b      	beq.n	800d4a2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	22ff      	movs	r2, #255	; 0xff
 800d490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2204      	movs	r2, #4
 800d496:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e045      	b.n	800d52e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	6979      	ldr	r1, [r7, #20]
 800d4a8:	4b23      	ldr	r3, [pc, #140]	; (800d538 <HAL_RTC_SetTime+0x178>)
 800d4aa:	400b      	ands	r3, r1
 800d4ac:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	689a      	ldr	r2, [r3, #8]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d4bc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6899      	ldr	r1, [r3, #8]
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	691a      	ldr	r2, [r3, #16]
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	431a      	orrs	r2, r3
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	430a      	orrs	r2, r1
 800d4d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68da      	ldr	r2, [r3, #12]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	f003 0320 	and.w	r3, r3, #32
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d111      	bne.n	800d518 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f000 f9e1 	bl	800d8bc <HAL_RTC_WaitForSynchro>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00b      	beq.n	800d518 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	22ff      	movs	r2, #255	; 0xff
 800d506:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2204      	movs	r2, #4
 800d50c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2200      	movs	r2, #0
 800d512:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e00a      	b.n	800d52e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	22ff      	movs	r2, #255	; 0xff
 800d51e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2201      	movs	r2, #1
 800d524:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d52c:	2300      	movs	r3, #0
  }
}
 800d52e:	4618      	mov	r0, r3
 800d530:	371c      	adds	r7, #28
 800d532:	46bd      	mov	sp, r7
 800d534:	bd90      	pop	{r4, r7, pc}
 800d536:	bf00      	nop
 800d538:	007f7f7f 	.word	0x007f7f7f

0800d53c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b087      	sub	sp, #28
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	7f1b      	ldrb	r3, [r3, #28]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d101      	bne.n	800d558 <HAL_RTC_SetDate+0x1c>
 800d554:	2302      	movs	r3, #2
 800d556:	e092      	b.n	800d67e <HAL_RTC_SetDate+0x142>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2201      	movs	r2, #1
 800d55c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2202      	movs	r2, #2
 800d562:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10e      	bne.n	800d588 <HAL_RTC_SetDate+0x4c>
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	785b      	ldrb	r3, [r3, #1]
 800d56e:	f003 0310 	and.w	r3, r3, #16
 800d572:	2b00      	cmp	r3, #0
 800d574:	d008      	beq.n	800d588 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	785b      	ldrb	r3, [r3, #1]
 800d57a:	f023 0310 	bic.w	r3, r3, #16
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	330a      	adds	r3, #10
 800d582:	b2da      	uxtb	r2, r3
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d11c      	bne.n	800d5c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	78db      	ldrb	r3, [r3, #3]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 f9e6 	bl	800d964 <RTC_ByteToBcd2>
 800d598:	4603      	mov	r3, r0
 800d59a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	785b      	ldrb	r3, [r3, #1]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f000 f9df 	bl	800d964 <RTC_ByteToBcd2>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d5aa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	789b      	ldrb	r3, [r3, #2]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 f9d7 	bl	800d964 <RTC_ByteToBcd2>
 800d5b6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d5b8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	617b      	str	r3, [r7, #20]
 800d5c6:	e00e      	b.n	800d5e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	78db      	ldrb	r3, [r3, #3]
 800d5cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	785b      	ldrb	r3, [r3, #1]
 800d5d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d5d4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800d5da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	22ca      	movs	r2, #202	; 0xca
 800d5ec:	625a      	str	r2, [r3, #36]	; 0x24
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2253      	movs	r2, #83	; 0x53
 800d5f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f000 f988 	bl	800d90c <RTC_EnterInitMode>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00b      	beq.n	800d61a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	22ff      	movs	r2, #255	; 0xff
 800d608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2204      	movs	r2, #4
 800d60e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	e031      	b.n	800d67e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	6979      	ldr	r1, [r7, #20]
 800d620:	4b19      	ldr	r3, [pc, #100]	; (800d688 <HAL_RTC_SetDate+0x14c>)
 800d622:	400b      	ands	r3, r1
 800d624:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68da      	ldr	r2, [r3, #12]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d634:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	f003 0320 	and.w	r3, r3, #32
 800d640:	2b00      	cmp	r3, #0
 800d642:	d111      	bne.n	800d668 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f000 f939 	bl	800d8bc <HAL_RTC_WaitForSynchro>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	22ff      	movs	r2, #255	; 0xff
 800d656:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2204      	movs	r2, #4
 800d65c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e00a      	b.n	800d67e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	22ff      	movs	r2, #255	; 0xff
 800d66e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2201      	movs	r2, #1
 800d674:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d67c:	2300      	movs	r3, #0
  }
}
 800d67e:	4618      	mov	r0, r3
 800d680:	371c      	adds	r7, #28
 800d682:	46bd      	mov	sp, r7
 800d684:	bd90      	pop	{r4, r7, pc}
 800d686:	bf00      	nop
 800d688:	00ffff3f 	.word	0x00ffff3f

0800d68c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d68c:	b590      	push	{r4, r7, lr}
 800d68e:	b089      	sub	sp, #36	; 0x24
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	61fb      	str	r3, [r7, #28]
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	7f1b      	ldrb	r3, [r3, #28]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d101      	bne.n	800d6b0 <HAL_RTC_SetAlarm+0x24>
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	e101      	b.n	800d8b4 <HAL_RTC_SetAlarm+0x228>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d137      	bne.n	800d732 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d102      	bne.n	800d6d6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 f942 	bl	800d964 <RTC_ByteToBcd2>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	785b      	ldrb	r3, [r3, #1]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 f93b 	bl	800d964 <RTC_ByteToBcd2>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d6f2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	789b      	ldrb	r3, [r3, #2]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 f933 	bl	800d964 <RTC_ByteToBcd2>
 800d6fe:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800d700:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	7b1b      	ldrb	r3, [r3, #12]
 800d708:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d70a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d714:	4618      	mov	r0, r3
 800d716:	f000 f925 	bl	800d964 <RTC_ByteToBcd2>
 800d71a:	4603      	mov	r3, r0
 800d71c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d71e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800d726:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800d72c:	4313      	orrs	r3, r2
 800d72e:	61fb      	str	r3, [r7, #28]
 800d730:	e023      	b.n	800d77a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d102      	bne.n	800d746 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	2200      	movs	r2, #0
 800d744:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	785b      	ldrb	r3, [r3, #1]
 800d750:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d752:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800d758:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	7b1b      	ldrb	r3, [r3, #12]
 800d75e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d760:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d768:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800d76a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800d770:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800d776:	4313      	orrs	r3, r2
 800d778:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	685a      	ldr	r2, [r3, #4]
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	69db      	ldr	r3, [r3, #28]
 800d782:	4313      	orrs	r3, r2
 800d784:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	22ca      	movs	r2, #202	; 0xca
 800d78c:	625a      	str	r2, [r3, #36]	; 0x24
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2253      	movs	r2, #83	; 0x53
 800d794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d79e:	d13f      	bne.n	800d820 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	689a      	ldr	r2, [r3, #8]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7ae:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	689a      	ldr	r2, [r3, #8]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d7be:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d7c0:	f7f8 fc2e 	bl	8006020 <HAL_GetTick>
 800d7c4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d7c6:	e013      	b.n	800d7f0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d7c8:	f7f8 fc2a 	bl	8006020 <HAL_GetTick>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7d6:	d90b      	bls.n	800d7f0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	22ff      	movs	r2, #255	; 0xff
 800d7de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	e061      	b.n	800d8b4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	f003 0301 	and.w	r3, r3, #1
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0e4      	beq.n	800d7c8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	69fa      	ldr	r2, [r7, #28]
 800d804:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	689a      	ldr	r2, [r3, #8]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d81c:	609a      	str	r2, [r3, #8]
 800d81e:	e03e      	b.n	800d89e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689a      	ldr	r2, [r3, #8]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d82e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	689a      	ldr	r2, [r3, #8]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d83e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d840:	f7f8 fbee 	bl	8006020 <HAL_GetTick>
 800d844:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d846:	e013      	b.n	800d870 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d848:	f7f8 fbea 	bl	8006020 <HAL_GetTick>
 800d84c:	4602      	mov	r2, r0
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	1ad3      	subs	r3, r2, r3
 800d852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d856:	d90b      	bls.n	800d870 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	22ff      	movs	r2, #255	; 0xff
 800d85e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2203      	movs	r2, #3
 800d864:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d86c:	2303      	movs	r3, #3
 800d86e:	e021      	b.n	800d8b4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	f003 0302 	and.w	r3, r3, #2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d0e4      	beq.n	800d848 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	69fa      	ldr	r2, [r7, #28]
 800d884:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	689a      	ldr	r2, [r3, #8]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d89c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	22ff      	movs	r2, #255	; 0xff
 800d8a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3724      	adds	r7, #36	; 0x24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd90      	pop	{r4, r7, pc}

0800d8bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68da      	ldr	r2, [r3, #12]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d8d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d8d8:	f7f8 fba2 	bl	8006020 <HAL_GetTick>
 800d8dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d8de:	e009      	b.n	800d8f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d8e0:	f7f8 fb9e 	bl	8006020 <HAL_GetTick>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8ee:	d901      	bls.n	800d8f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e007      	b.n	800d904 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	f003 0320 	and.w	r3, r3, #32
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0ee      	beq.n	800d8e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d922:	2b00      	cmp	r3, #0
 800d924:	d119      	bne.n	800d95a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f04f 32ff 	mov.w	r2, #4294967295
 800d92e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d930:	f7f8 fb76 	bl	8006020 <HAL_GetTick>
 800d934:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d936:	e009      	b.n	800d94c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d938:	f7f8 fb72 	bl	8006020 <HAL_GetTick>
 800d93c:	4602      	mov	r2, r0
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d946:	d901      	bls.n	800d94c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d948:	2303      	movs	r3, #3
 800d94a:	e007      	b.n	800d95c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d956:	2b00      	cmp	r3, #0
 800d958:	d0ee      	beq.n	800d938 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	4603      	mov	r3, r0
 800d96c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800d972:	e005      	b.n	800d980 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
 800d978:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800d97a:	79fb      	ldrb	r3, [r7, #7]
 800d97c:	3b0a      	subs	r3, #10
 800d97e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	2b09      	cmp	r3, #9
 800d984:	d8f6      	bhi.n	800d974 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	011b      	lsls	r3, r3, #4
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	4313      	orrs	r3, r2
 800d992:	b2db      	uxtb	r3, r3
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b087      	sub	sp, #28
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	7f1b      	ldrb	r3, [r3, #28]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d101      	bne.n	800d9bc <HAL_RTCEx_SetTimeStamp+0x1c>
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	e03e      	b.n	800da3a <HAL_RTCEx_SetTimeStamp+0x9a>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	689a      	ldr	r2, [r3, #8]
 800d9ce:	4b1e      	ldr	r3, [pc, #120]	; (800da48 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	22ca      	movs	r2, #202	; 0xca
 800d9e2:	625a      	str	r2, [r3, #36]	; 0x24
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2253      	movs	r2, #83	; 0x53
 800d9ea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f022 0206 	bic.w	r2, r2, #6
 800d9fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	430a      	orrs	r2, r1
 800da0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	689a      	ldr	r2, [r3, #8]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da22:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	22ff      	movs	r2, #255	; 0xff
 800da2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2201      	movs	r2, #1
 800da30:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	371c      	adds	r7, #28
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	fffff7f7 	.word	0xfffff7f7

0800da4c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b088      	sub	sp, #32
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800da54:	2300      	movs	r3, #0
 800da56:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e156      	b.n	800dd18 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7f5 ffe6 	bl	8003a50 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2202      	movs	r2, #2
 800da88:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 facf 	bl	800e030 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	2b02      	cmp	r3, #2
 800da98:	d00c      	beq.n	800dab4 <HAL_SAI_Init+0x68>
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d80d      	bhi.n	800daba <HAL_SAI_Init+0x6e>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <HAL_SAI_Init+0x5c>
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d003      	beq.n	800daae <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800daa6:	e008      	b.n	800daba <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	61fb      	str	r3, [r7, #28]
      break;
 800daac:	e006      	b.n	800dabc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800daae:	2310      	movs	r3, #16
 800dab0:	61fb      	str	r3, [r7, #28]
      break;
 800dab2:	e003      	b.n	800dabc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800dab4:	2320      	movs	r3, #32
 800dab6:	61fb      	str	r3, [r7, #28]
      break;
 800dab8:	e000      	b.n	800dabc <HAL_SAI_Init+0x70>
      break;
 800daba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	2b03      	cmp	r3, #3
 800dac2:	d81e      	bhi.n	800db02 <HAL_SAI_Init+0xb6>
 800dac4:	a201      	add	r2, pc, #4	; (adr r2, 800dacc <HAL_SAI_Init+0x80>)
 800dac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daca:	bf00      	nop
 800dacc:	0800dadd 	.word	0x0800dadd
 800dad0:	0800dae3 	.word	0x0800dae3
 800dad4:	0800daeb 	.word	0x0800daeb
 800dad8:	0800daf3 	.word	0x0800daf3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	617b      	str	r3, [r7, #20]
    }
    break;
 800dae0:	e010      	b.n	800db04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dae6:	617b      	str	r3, [r7, #20]
    }
    break;
 800dae8:	e00c      	b.n	800db04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800daea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800daee:	617b      	str	r3, [r7, #20]
    }
    break;
 800daf0:	e008      	b.n	800db04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800daf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800daf6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	f043 0301 	orr.w	r3, r3, #1
 800dafe:	61fb      	str	r3, [r7, #28]
    }
    break;
 800db00:	e000      	b.n	800db04 <HAL_SAI_Init+0xb8>
    default:
      break;
 800db02:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a85      	ldr	r2, [pc, #532]	; (800dd20 <HAL_SAI_Init+0x2d4>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d004      	beq.n	800db18 <HAL_SAI_Init+0xcc>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a84      	ldr	r2, [pc, #528]	; (800dd24 <HAL_SAI_Init+0x2d8>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d103      	bne.n	800db20 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800db18:	4a83      	ldr	r2, [pc, #524]	; (800dd28 <HAL_SAI_Init+0x2dc>)
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	6013      	str	r3, [r2, #0]
 800db1e:	e002      	b.n	800db26 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800db20:	4a82      	ldr	r2, [pc, #520]	; (800dd2c <HAL_SAI_Init+0x2e0>)
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	69db      	ldr	r3, [r3, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d04c      	beq.n	800dbc8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a7a      	ldr	r2, [pc, #488]	; (800dd20 <HAL_SAI_Init+0x2d4>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d004      	beq.n	800db46 <HAL_SAI_Init+0xfa>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a78      	ldr	r2, [pc, #480]	; (800dd24 <HAL_SAI_Init+0x2d8>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d104      	bne.n	800db50 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800db46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800db4a:	f7ff fa63 	bl	800d014 <HAL_RCCEx_GetPeriphCLKFreq>
 800db4e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a76      	ldr	r2, [pc, #472]	; (800dd30 <HAL_SAI_Init+0x2e4>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d004      	beq.n	800db64 <HAL_SAI_Init+0x118>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a75      	ldr	r2, [pc, #468]	; (800dd34 <HAL_SAI_Init+0x2e8>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d104      	bne.n	800db6e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800db64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800db68:	f7ff fa54 	bl	800d014 <HAL_RCCEx_GetPeriphCLKFreq>
 800db6c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800db6e:	693a      	ldr	r2, [r7, #16]
 800db70:	4613      	mov	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	461a      	mov	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	025b      	lsls	r3, r3, #9
 800db80:	fbb2 f3f3 	udiv	r3, r2, r3
 800db84:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	4a6b      	ldr	r2, [pc, #428]	; (800dd38 <HAL_SAI_Init+0x2ec>)
 800db8a:	fba2 2303 	umull	r2, r3, r2, r3
 800db8e:	08da      	lsrs	r2, r3, #3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800db94:	68f9      	ldr	r1, [r7, #12]
 800db96:	4b68      	ldr	r3, [pc, #416]	; (800dd38 <HAL_SAI_Init+0x2ec>)
 800db98:	fba3 2301 	umull	r2, r3, r3, r1
 800db9c:	08da      	lsrs	r2, r3, #3
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	005b      	lsls	r3, r3, #1
 800dba6:	1aca      	subs	r2, r1, r3
 800dba8:	2a08      	cmp	r2, #8
 800dbaa:	d904      	bls.n	800dbb6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	d104      	bne.n	800dbc8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6a1b      	ldr	r3, [r3, #32]
 800dbc2:	085a      	lsrs	r2, r3, #1
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d003      	beq.n	800dbd8 <HAL_SAI_Init+0x18c>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d109      	bne.n	800dbec <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d101      	bne.n	800dbe4 <HAL_SAI_Init+0x198>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e001      	b.n	800dbe8 <HAL_SAI_Init+0x19c>
 800dbe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	e008      	b.n	800dbfe <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d102      	bne.n	800dbfa <HAL_SAI_Init+0x1ae>
 800dbf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbf8:	e000      	b.n	800dbfc <HAL_SAI_Init+0x1b0>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6819      	ldr	r1, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	4b4c      	ldr	r3, [pc, #304]	; (800dd3c <HAL_SAI_Init+0x2f0>)
 800dc0a:	400b      	ands	r3, r1
 800dc0c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	6819      	ldr	r1, [r3, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc22:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc28:	431a      	orrs	r2, r3
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800dc36:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc42:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	051b      	lsls	r3, r3, #20
 800dc4a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	430a      	orrs	r2, r1
 800dc52:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6859      	ldr	r1, [r3, #4]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	4b38      	ldr	r3, [pc, #224]	; (800dd40 <HAL_SAI_Init+0x2f4>)
 800dc60:	400b      	ands	r3, r1
 800dc62:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6859      	ldr	r1, [r3, #4]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	699a      	ldr	r2, [r3, #24]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc72:	431a      	orrs	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	431a      	orrs	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	430a      	orrs	r2, r1
 800dc80:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6899      	ldr	r1, [r3, #8]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	4b2d      	ldr	r3, [pc, #180]	; (800dd44 <HAL_SAI_Init+0x2f8>)
 800dc8e:	400b      	ands	r3, r1
 800dc90:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6899      	ldr	r1, [r3, #8]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800dca2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800dca8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800dcae:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800dcb8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	430a      	orrs	r2, r1
 800dcc0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	68d9      	ldr	r1, [r3, #12]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	f24f 0320 	movw	r3, #61472	; 0xf020
 800dcd0:	400b      	ands	r3, r1
 800dcd2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68d9      	ldr	r1, [r3, #12]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dce2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dce8:	041b      	lsls	r3, r3, #16
 800dcea:	431a      	orrs	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	021b      	lsls	r3, r3, #8
 800dcf4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	430a      	orrs	r2, r1
 800dcfc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3720      	adds	r7, #32
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	40015804 	.word	0x40015804
 800dd24:	40015824 	.word	0x40015824
 800dd28:	40015800 	.word	0x40015800
 800dd2c:	40015c00 	.word	0x40015c00
 800dd30:	40015c04 	.word	0x40015c04
 800dd34:	40015c24 	.word	0x40015c24
 800dd38:	cccccccd 	.word	0xcccccccd
 800dd3c:	ff05c010 	.word	0xff05c010
 800dd40:	ffff1ff0 	.word	0xffff1ff0
 800dd44:	fff88000 	.word	0xfff88000

0800dd48 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	4613      	mov	r3, r2
 800dd54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800dd56:	f7f8 f963 	bl	8006020 <HAL_GetTick>
 800dd5a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d002      	beq.n	800dd68 <HAL_SAI_Transmit_DMA+0x20>
 800dd62:	88fb      	ldrh	r3, [r7, #6]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d101      	bne.n	800dd6c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e093      	b.n	800de94 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	f040 808c 	bne.w	800de92 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d101      	bne.n	800dd88 <HAL_SAI_Transmit_DMA+0x40>
 800dd84:	2302      	movs	r3, #2
 800dd86:	e085      	b.n	800de94 <HAL_SAI_Transmit_DMA+0x14c>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	88fa      	ldrh	r2, [r7, #6]
 800dd9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	88fa      	ldrh	r2, [r7, #6]
 800dda2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2212      	movs	r2, #18
 800ddb2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddba:	4a38      	ldr	r2, [pc, #224]	; (800de9c <HAL_SAI_Transmit_DMA+0x154>)
 800ddbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc2:	4a37      	ldr	r2, [pc, #220]	; (800dea0 <HAL_SAI_Transmit_DMA+0x158>)
 800ddc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddca:	4a36      	ldr	r2, [pc, #216]	; (800dea4 <HAL_SAI_Transmit_DMA+0x15c>)
 800ddcc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddde:	4619      	mov	r1, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	331c      	adds	r3, #28
 800dde6:	461a      	mov	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ddee:	f7f9 f841 	bl	8006e74 <HAL_DMA_Start_IT>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d005      	beq.n	800de04 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800de00:	2301      	movs	r3, #1
 800de02:	e047      	b.n	800de94 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800de04:	2100      	movs	r1, #0
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f000 f8dc 	bl	800dfc4 <SAI_InterruptFlag>
 800de0c:	4601      	mov	r1, r0
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	691a      	ldr	r2, [r3, #16]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	430a      	orrs	r2, r1
 800de1a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800de2a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de2c:	e015      	b.n	800de5a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800de2e:	f7f8 f8f7 	bl	8006020 <HAL_GetTick>
 800de32:	4602      	mov	r2, r0
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de3c:	d90d      	bls.n	800de5a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800de56:	2303      	movs	r3, #3
 800de58:	e01c      	b.n	800de94 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	695b      	ldr	r3, [r3, #20]
 800de60:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d0e2      	beq.n	800de2e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d107      	bne.n	800de86 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800de84:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	e000      	b.n	800de94 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800de92:	2302      	movs	r3, #2
  }
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	0800e101 	.word	0x0800e101
 800dea0:	0800e0a1 	.word	0x0800e0a1
 800dea4:	0800e199 	.word	0x0800e199

0800dea8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	4613      	mov	r3, r2
 800deb4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <HAL_SAI_Receive_DMA+0x1a>
 800debc:	88fb      	ldrh	r3, [r7, #6]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	e074      	b.n	800dfb0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800decc:	b2db      	uxtb	r3, r3
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d16d      	bne.n	800dfae <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d101      	bne.n	800dee0 <HAL_SAI_Receive_DMA+0x38>
 800dedc:	2302      	movs	r3, #2
 800dede:	e067      	b.n	800dfb0 <HAL_SAI_Receive_DMA+0x108>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	88fa      	ldrh	r2, [r7, #6]
 800def2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	88fa      	ldrh	r2, [r7, #6]
 800defa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2222      	movs	r2, #34	; 0x22
 800df0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df12:	4a29      	ldr	r2, [pc, #164]	; (800dfb8 <HAL_SAI_Receive_DMA+0x110>)
 800df14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1a:	4a28      	ldr	r2, [pc, #160]	; (800dfbc <HAL_SAI_Receive_DMA+0x114>)
 800df1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df22:	4a27      	ldr	r2, [pc, #156]	; (800dfc0 <HAL_SAI_Receive_DMA+0x118>)
 800df24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df2a:	2200      	movs	r2, #0
 800df2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	331c      	adds	r3, #28
 800df38:	4619      	mov	r1, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df3e:	461a      	mov	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df46:	f7f8 ff95 	bl	8006e74 <HAL_DMA_Start_IT>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d005      	beq.n	800df5c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2200      	movs	r2, #0
 800df54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800df58:	2301      	movs	r3, #1
 800df5a:	e029      	b.n	800dfb0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800df5c:	2100      	movs	r1, #0
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f000 f830 	bl	800dfc4 <SAI_InterruptFlag>
 800df64:	4601      	mov	r1, r0
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	691a      	ldr	r2, [r3, #16]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	430a      	orrs	r2, r1
 800df72:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800df82:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d107      	bne.n	800dfa2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dfa0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	e000      	b.n	800dfb0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800dfae:	2302      	movs	r3, #2
  }
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	0800e17d 	.word	0x0800e17d
 800dfbc:	0800e11d 	.word	0x0800e11d
 800dfc0:	0800e199 	.word	0x0800e199

0800dfc4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d103      	bne.n	800dfe0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f043 0308 	orr.w	r3, r3, #8
 800dfde:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe4:	2b08      	cmp	r3, #8
 800dfe6:	d10b      	bne.n	800e000 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	d003      	beq.n	800dff8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d103      	bne.n	800e000 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f043 0310 	orr.w	r3, r3, #16
 800dffe:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	2b03      	cmp	r3, #3
 800e006:	d003      	beq.n	800e010 <SAI_InterruptFlag+0x4c>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d104      	bne.n	800e01a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e016:	60fb      	str	r3, [r7, #12]
 800e018:	e003      	b.n	800e022 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f043 0304 	orr.w	r3, r3, #4
 800e020:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e022:	68fb      	ldr	r3, [r7, #12]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800e038:	4b17      	ldr	r3, [pc, #92]	; (800e098 <SAI_Disable+0x68>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a17      	ldr	r2, [pc, #92]	; (800e09c <SAI_Disable+0x6c>)
 800e03e:	fba2 2303 	umull	r2, r3, r2, r3
 800e042:	0b1b      	lsrs	r3, r3, #12
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e048:	2300      	movs	r3, #0
 800e04a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e05a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	1e5a      	subs	r2, r3, #1
 800e060:	60fa      	str	r2, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d10a      	bne.n	800e07c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e06c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800e076:	2303      	movs	r3, #3
 800e078:	72fb      	strb	r3, [r7, #11]
      break;
 800e07a:	e006      	b.n	800e08a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1e8      	bne.n	800e05c <SAI_Disable+0x2c>

  return status;
 800e08a:	7afb      	ldrb	r3, [r7, #11]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3714      	adds	r7, #20
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr
 800e098:	20000014 	.word	0x20000014
 800e09c:	95cbec1b 	.word	0x95cbec1b

0800e0a0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ac:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	69db      	ldr	r3, [r3, #28]
 800e0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0b6:	d01c      	beq.n	800e0f2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e0ce:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f7ff ff76 	bl	800dfc4 <SAI_InterruptFlag>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	43d9      	mvns	r1, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	691a      	ldr	r2, [r3, #16]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	400a      	ands	r2, r1
 800e0e8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f7f6 fdb0 	bl	8004c58 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e0f8:	bf00      	nop
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f7f6 fdac 	bl	8004c6c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e114:	bf00      	nop
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e128:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	69db      	ldr	r3, [r3, #28]
 800e12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e132:	d01c      	beq.n	800e16e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e142:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2200      	movs	r2, #0
 800e148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e14c:	2100      	movs	r1, #0
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f7ff ff38 	bl	800dfc4 <SAI_InterruptFlag>
 800e154:	4603      	mov	r3, r0
 800e156:	43d9      	mvns	r1, r3
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	691a      	ldr	r2, [r3, #16]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	400a      	ands	r2, r1
 800e164:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f7f2 ffc4 	bl	80010fc <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e174:	bf00      	nop
 800e176:	3710      	adds	r7, #16
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e188:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f7f2 ffcc 	bl	8001128 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e190:	bf00      	nop
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d004      	beq.n	800e1ca <SAI_DMAError+0x32>
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d112      	bne.n	800e1f0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e1d8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f7ff ff28 	bl	800e030 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7f6 fd45 	bl	8004c80 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b082      	sub	sp, #8
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e022      	b.n	800e256 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e216:	b2db      	uxtb	r3, r3
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d105      	bne.n	800e228 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2200      	movs	r2, #0
 800e220:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7f5 f8dc 	bl	80033e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2203      	movs	r2, #3
 800e22c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f815 	bl	800e260 <HAL_SD_InitCard>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	e00a      	b.n	800e256 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e260:	b5b0      	push	{r4, r5, r7, lr}
 800e262:	b08e      	sub	sp, #56	; 0x38
 800e264:	af04      	add	r7, sp, #16
 800e266:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e268:	2300      	movs	r3, #0
 800e26a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800e26c:	2300      	movs	r3, #0
 800e26e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e270:	2300      	movs	r3, #0
 800e272:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e274:	2300      	movs	r3, #0
 800e276:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e278:	2300      	movs	r3, #0
 800e27a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800e27c:	2376      	movs	r3, #118	; 0x76
 800e27e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681d      	ldr	r5, [r3, #0]
 800e284:	466c      	mov	r4, sp
 800e286:	f107 0314 	add.w	r3, r7, #20
 800e28a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e28e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e292:	f107 0308 	add.w	r3, r7, #8
 800e296:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e298:	4628      	mov	r0, r5
 800e29a:	f002 ffef 	bl	801127c <SDMMC_Init>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d001      	beq.n	800e2b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e056      	b.n	800e35e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2be:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f003 f812 	bl	80112ee <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2d8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fe0e 	bl	800eefc <SD_PowerON>
 800e2e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00b      	beq.n	800e300 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2f4:	6a3b      	ldr	r3, [r7, #32]
 800e2f6:	431a      	orrs	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e02e      	b.n	800e35e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fd2f 	bl	800ed64 <SD_InitCard>
 800e306:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00b      	beq.n	800e326 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2201      	movs	r2, #1
 800e312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	431a      	orrs	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	e01b      	b.n	800e35e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e32e:	4618      	mov	r0, r3
 800e330:	f003 f870 	bl	8011414 <SDMMC_CmdBlockLength>
 800e334:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00f      	beq.n	800e35c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a09      	ldr	r2, [pc, #36]	; (800e368 <HAL_SD_InitCard+0x108>)
 800e342:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e348:	6a3b      	ldr	r3, [r7, #32]
 800e34a:	431a      	orrs	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	e000      	b.n	800e35e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3728      	adds	r7, #40	; 0x28
 800e362:	46bd      	mov	sp, r7
 800e364:	bdb0      	pop	{r4, r5, r7, pc}
 800e366:	bf00      	nop
 800e368:	004005ff 	.word	0x004005ff

0800e36c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08c      	sub	sp, #48	; 0x30
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
 800e378:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d107      	bne.n	800e394 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e388:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	e0c3      	b.n	800e51c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	f040 80bc 	bne.w	800e51a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	441a      	add	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d907      	bls.n	800e3c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e0aa      	b.n	800e51c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2203      	movs	r2, #3
 800e3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e3e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ea:	4a4e      	ldr	r2, [pc, #312]	; (800e524 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800e3ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3f2:	4a4d      	ldr	r2, [pc, #308]	; (800e528 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800e3f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e402:	2200      	movs	r2, #0
 800e404:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e416:	689a      	ldr	r2, [r3, #8]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	430a      	orrs	r2, r1
 800e420:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3380      	adds	r3, #128	; 0x80
 800e42c:	4619      	mov	r1, r3
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	025b      	lsls	r3, r3, #9
 800e434:	089b      	lsrs	r3, r3, #2
 800e436:	f7f8 fd1d 	bl	8006e74 <HAL_DMA_Start_IT>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d017      	beq.n	800e470 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e44e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a35      	ldr	r2, [pc, #212]	; (800e52c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e45c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e46c:	2301      	movs	r3, #1
 800e46e:	e055      	b.n	800e51c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f042 0208 	orr.w	r2, r2, #8
 800e47e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e484:	2b01      	cmp	r3, #1
 800e486:	d002      	beq.n	800e48e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	025b      	lsls	r3, r3, #9
 800e48c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e48e:	f04f 33ff 	mov.w	r3, #4294967295
 800e492:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	025b      	lsls	r3, r3, #9
 800e498:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e49a:	2390      	movs	r3, #144	; 0x90
 800e49c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e49e:	2302      	movs	r3, #2
 800e4a0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f107 0210 	add.w	r2, r7, #16
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f002 ff81 	bl	80113bc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d90a      	bls.n	800e4d6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2282      	movs	r2, #130	; 0x82
 800e4c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f002 ffe5 	bl	801149c <SDMMC_CmdReadMultiBlock>
 800e4d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e4d4:	e009      	b.n	800e4ea <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2281      	movs	r2, #129	; 0x81
 800e4da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f002 ffb8 	bl	8011458 <SDMMC_CmdReadSingleBlock>
 800e4e8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d012      	beq.n	800e516 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a0d      	ldr	r2, [pc, #52]	; (800e52c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e4f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	431a      	orrs	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	e002      	b.n	800e51c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	e000      	b.n	800e51c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800e51a:	2302      	movs	r3, #2
  }
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3730      	adds	r7, #48	; 0x30
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	0800ec4f 	.word	0x0800ec4f
 800e528:	0800ecc1 	.word	0x0800ecc1
 800e52c:	004005ff 	.word	0x004005ff

0800e530 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08c      	sub	sp, #48	; 0x30
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d107      	bne.n	800e558 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	e0c6      	b.n	800e6e6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	2b01      	cmp	r3, #1
 800e562:	f040 80bf 	bne.w	800e6e4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2200      	movs	r2, #0
 800e56a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	441a      	add	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e576:	429a      	cmp	r2, r3
 800e578:	d907      	bls.n	800e58a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e0ad      	b.n	800e6e6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2203      	movs	r2, #3
 800e58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2200      	movs	r2, #0
 800e598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f042 021a 	orr.w	r2, r2, #26
 800e5a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ae:	4a50      	ldr	r2, [pc, #320]	; (800e6f0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800e5b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b6:	4a4f      	ldr	r2, [pc, #316]	; (800e6f4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800e5b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5be:	2200      	movs	r2, #0
 800e5c0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d002      	beq.n	800e5d0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5cc:	025b      	lsls	r3, r3, #9
 800e5ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d90a      	bls.n	800e5ec <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	22a0      	movs	r2, #160	; 0xa0
 800e5da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f002 ff9e 	bl	8011524 <SDMMC_CmdWriteMultiBlock>
 800e5e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e5ea:	e009      	b.n	800e600 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2290      	movs	r2, #144	; 0x90
 800e5f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f002 ff71 	bl	80114e0 <SDMMC_CmdWriteSingleBlock>
 800e5fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	2b00      	cmp	r3, #0
 800e604:	d012      	beq.n	800e62c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a3b      	ldr	r2, [pc, #236]	; (800e6f8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e60c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	431a      	orrs	r2, r3
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2201      	movs	r2, #1
 800e61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	e05c      	b.n	800e6e6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f042 0208 	orr.w	r2, r2, #8
 800e63a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e640:	2240      	movs	r2, #64	; 0x40
 800e642:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e654:	689a      	ldr	r2, [r3, #8]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	430a      	orrs	r2, r1
 800e65e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e664:	68b9      	ldr	r1, [r7, #8]
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	3380      	adds	r3, #128	; 0x80
 800e66c:	461a      	mov	r2, r3
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	025b      	lsls	r3, r3, #9
 800e672:	089b      	lsrs	r3, r3, #2
 800e674:	f7f8 fbfe 	bl	8006e74 <HAL_DMA_Start_IT>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d01a      	beq.n	800e6b4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f022 021a 	bic.w	r2, r2, #26
 800e68c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a19      	ldr	r2, [pc, #100]	; (800e6f8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e694:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e69a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e018      	b.n	800e6e6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	025b      	lsls	r3, r3, #9
 800e6be:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e6c0:	2390      	movs	r3, #144	; 0x90
 800e6c2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f107 0210 	add.w	r2, r7, #16
 800e6d8:	4611      	mov	r1, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f002 fe6e 	bl	80113bc <SDMMC_ConfigData>

      return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	e000      	b.n	800e6e6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e6e4:	2302      	movs	r3, #2
  }
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3730      	adds	r7, #48	; 0x30
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0800ec25 	.word	0x0800ec25
 800e6f4:	0800ecc1 	.word	0x0800ecc1
 800e6f8:	004005ff 	.word	0x004005ff

0800e6fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e704:	bf00      	nop
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e71e:	0f9b      	lsrs	r3, r3, #30
 800e720:	b2da      	uxtb	r2, r3
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e72a:	0e9b      	lsrs	r3, r3, #26
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	f003 030f 	and.w	r3, r3, #15
 800e732:	b2da      	uxtb	r2, r3
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e73c:	0e1b      	lsrs	r3, r3, #24
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	f003 0303 	and.w	r3, r3, #3
 800e744:	b2da      	uxtb	r2, r3
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e74e:	0c1b      	lsrs	r3, r3, #16
 800e750:	b2da      	uxtb	r2, r3
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75a:	0a1b      	lsrs	r3, r3, #8
 800e75c:	b2da      	uxtb	r2, r3
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e766:	b2da      	uxtb	r2, r3
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e770:	0d1b      	lsrs	r3, r3, #20
 800e772:	b29a      	uxth	r2, r3
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e77c:	0c1b      	lsrs	r3, r3, #16
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	f003 030f 	and.w	r3, r3, #15
 800e784:	b2da      	uxtb	r2, r3
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e78e:	0bdb      	lsrs	r3, r3, #15
 800e790:	b2db      	uxtb	r3, r3
 800e792:	f003 0301 	and.w	r3, r3, #1
 800e796:	b2da      	uxtb	r2, r3
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7a0:	0b9b      	lsrs	r3, r3, #14
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	f003 0301 	and.w	r3, r3, #1
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7b2:	0b5b      	lsrs	r3, r3, #13
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	f003 0301 	and.w	r3, r3, #1
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7c4:	0b1b      	lsrs	r3, r3, #12
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d163      	bne.n	800e8a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7e4:	009a      	lsls	r2, r3, #2
 800e7e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e7f0:	0f92      	lsrs	r2, r2, #30
 800e7f2:	431a      	orrs	r2, r3
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7fc:	0edb      	lsrs	r3, r3, #27
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	f003 0307 	and.w	r3, r3, #7
 800e804:	b2da      	uxtb	r2, r3
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e80e:	0e1b      	lsrs	r3, r3, #24
 800e810:	b2db      	uxtb	r3, r3
 800e812:	f003 0307 	and.w	r3, r3, #7
 800e816:	b2da      	uxtb	r2, r3
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e820:	0d5b      	lsrs	r3, r3, #21
 800e822:	b2db      	uxtb	r3, r3
 800e824:	f003 0307 	and.w	r3, r3, #7
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e832:	0c9b      	lsrs	r3, r3, #18
 800e834:	b2db      	uxtb	r3, r3
 800e836:	f003 0307 	and.w	r3, r3, #7
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e844:	0bdb      	lsrs	r3, r3, #15
 800e846:	b2db      	uxtb	r3, r3
 800e848:	f003 0307 	and.w	r3, r3, #7
 800e84c:	b2da      	uxtb	r2, r3
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	7e1b      	ldrb	r3, [r3, #24]
 800e860:	b2db      	uxtb	r3, r3
 800e862:	f003 0307 	and.w	r3, r3, #7
 800e866:	3302      	adds	r3, #2
 800e868:	2201      	movs	r2, #1
 800e86a:	fa02 f303 	lsl.w	r3, r2, r3
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e872:	fb02 f203 	mul.w	r2, r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	7a1b      	ldrb	r3, [r3, #8]
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	f003 030f 	and.w	r3, r3, #15
 800e884:	2201      	movs	r2, #1
 800e886:	409a      	lsls	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e894:	0a52      	lsrs	r2, r2, #9
 800e896:	fb02 f203 	mul.w	r2, r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8a4:	661a      	str	r2, [r3, #96]	; 0x60
 800e8a6:	e031      	b.n	800e90c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d11d      	bne.n	800e8ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8b4:	041b      	lsls	r3, r3, #16
 800e8b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8be:	0c1b      	lsrs	r3, r3, #16
 800e8c0:	431a      	orrs	r2, r3
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	029a      	lsls	r2, r3, #10
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	661a      	str	r2, [r3, #96]	; 0x60
 800e8ea:	e00f      	b.n	800e90c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a58      	ldr	r2, [pc, #352]	; (800ea54 <HAL_SD_GetCardCSD+0x344>)
 800e8f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	e09d      	b.n	800ea48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e910:	0b9b      	lsrs	r3, r3, #14
 800e912:	b2db      	uxtb	r3, r3
 800e914:	f003 0301 	and.w	r3, r3, #1
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e922:	09db      	lsrs	r3, r3, #7
 800e924:	b2db      	uxtb	r3, r3
 800e926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e934:	b2db      	uxtb	r3, r3
 800e936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e93a:	b2da      	uxtb	r2, r3
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e944:	0fdb      	lsrs	r3, r3, #31
 800e946:	b2da      	uxtb	r2, r3
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e950:	0f5b      	lsrs	r3, r3, #29
 800e952:	b2db      	uxtb	r3, r3
 800e954:	f003 0303 	and.w	r3, r3, #3
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e962:	0e9b      	lsrs	r3, r3, #26
 800e964:	b2db      	uxtb	r3, r3
 800e966:	f003 0307 	and.w	r3, r3, #7
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e974:	0d9b      	lsrs	r3, r3, #22
 800e976:	b2db      	uxtb	r3, r3
 800e978:	f003 030f 	and.w	r3, r3, #15
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e986:	0d5b      	lsrs	r3, r3, #21
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	2200      	movs	r2, #0
 800e99a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9a2:	0c1b      	lsrs	r3, r3, #16
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	f003 0301 	and.w	r3, r3, #1
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9b6:	0bdb      	lsrs	r3, r3, #15
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	b2da      	uxtb	r2, r3
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ca:	0b9b      	lsrs	r3, r3, #14
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9de:	0b5b      	lsrs	r3, r3, #13
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	f003 0301 	and.w	r3, r3, #1
 800e9e6:	b2da      	uxtb	r2, r3
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9f2:	0b1b      	lsrs	r3, r3, #12
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	f003 0301 	and.w	r3, r3, #1
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea06:	0a9b      	lsrs	r3, r3, #10
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	f003 0303 	and.w	r3, r3, #3
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea1a:	0a1b      	lsrs	r3, r3, #8
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	f003 0303 	and.w	r3, r3, #3
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea2e:	085b      	lsrs	r3, r3, #1
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	004005ff 	.word	0x004005ff

0800ea58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800eab0:	b5b0      	push	{r4, r5, r7, lr}
 800eab2:	b08e      	sub	sp, #56	; 0x38
 800eab4:	af04      	add	r7, sp, #16
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800eaba:	2300      	movs	r3, #0
 800eabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2203      	movs	r2, #3
 800eac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eacc:	2b03      	cmp	r3, #3
 800eace:	d02e      	beq.n	800eb2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ead6:	d106      	bne.n	800eae6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eadc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	639a      	str	r2, [r3, #56]	; 0x38
 800eae4:	e029      	b.n	800eb3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eaec:	d10a      	bne.n	800eb04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 faba 	bl	800f068 <SD_WideBus_Enable>
 800eaf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eafa:	6a3b      	ldr	r3, [r7, #32]
 800eafc:	431a      	orrs	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38
 800eb02:	e01a      	b.n	800eb3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d10a      	bne.n	800eb20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 faf7 	bl	800f0fe <SD_WideBus_Disable>
 800eb10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	431a      	orrs	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	639a      	str	r2, [r3, #56]	; 0x38
 800eb1e:	e00c      	b.n	800eb3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	639a      	str	r2, [r3, #56]	; 0x38
 800eb2c:	e005      	b.n	800eb3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00b      	beq.n	800eb5a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4a26      	ldr	r2, [pc, #152]	; (800ebe0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800eb48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800eb52:	2301      	movs	r3, #1
 800eb54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb58:	e01f      	b.n	800eb9a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681d      	ldr	r5, [r3, #0]
 800eb80:	466c      	mov	r4, sp
 800eb82:	f107 0314 	add.w	r3, r7, #20
 800eb86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eb8e:	f107 0308 	add.w	r3, r7, #8
 800eb92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb94:	4628      	mov	r0, r5
 800eb96:	f002 fb71 	bl	801127c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eba2:	4618      	mov	r0, r3
 800eba4:	f002 fc36 	bl	8011414 <SDMMC_CmdBlockLength>
 800eba8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebaa:	6a3b      	ldr	r3, [r7, #32]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00c      	beq.n	800ebca <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a0a      	ldr	r2, [pc, #40]	; (800ebe0 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ebb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	431a      	orrs	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ebd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3728      	adds	r7, #40	; 0x28
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bdb0      	pop	{r4, r5, r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	004005ff 	.word	0x004005ff

0800ebe4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b086      	sub	sp, #24
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ebf0:	f107 030c 	add.w	r3, r7, #12
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 fa0e 	bl	800f018 <SD_SendStatus>
 800ebfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d005      	beq.n	800ec10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	431a      	orrs	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	0a5b      	lsrs	r3, r3, #9
 800ec14:	f003 030f 	and.w	r3, r3, #15
 800ec18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ec1a:	693b      	ldr	r3, [r7, #16]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec30:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ec42:	bf00      	nop
 800ec44:	3714      	adds	r7, #20
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr

0800ec4e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec60:	2b82      	cmp	r3, #130	; 0x82
 800ec62:	d111      	bne.n	800ec88 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f002 fc7d 	bl	8011568 <SDMMC_CmdStopTransfer>
 800ec6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d008      	beq.n	800ec88 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f7ff fd3a 	bl	800e6fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f022 0208 	bic.w	r2, r2, #8
 800ec96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f240 523a 	movw	r2, #1338	; 0x53a
 800eca0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f004 f829 	bl	8012d08 <HAL_SD_RxCpltCallback>
#endif
}
 800ecb6:	bf00      	nop
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
	...

0800ecc0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eccc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7f8 fb4c 	bl	800736c <HAL_DMA_GetError>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d03e      	beq.n	800ed58 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ece6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ece8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d002      	beq.n	800ecf6 <SD_DMAError+0x36>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d12d      	bne.n	800ed52 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a19      	ldr	r2, [pc, #100]	; (800ed60 <SD_DMAError+0xa0>)
 800ecfc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ed0c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ed1a:	6978      	ldr	r0, [r7, #20]
 800ed1c:	f7ff ff62 	bl	800ebe4 <HAL_SD_GetCardState>
 800ed20:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	2b06      	cmp	r3, #6
 800ed26:	d002      	beq.n	800ed2e <SD_DMAError+0x6e>
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b05      	cmp	r3, #5
 800ed2c:	d10a      	bne.n	800ed44 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f002 fc18 	bl	8011568 <SDMMC_CmdStopTransfer>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed3e:	431a      	orrs	r2, r3
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ed52:	6978      	ldr	r0, [r7, #20]
 800ed54:	f7ff fcd2 	bl	800e6fc <HAL_SD_ErrorCallback>
#endif
  }
}
 800ed58:	bf00      	nop
 800ed5a:	3718      	adds	r7, #24
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	004005ff 	.word	0x004005ff

0800ed64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ed64:	b5b0      	push	{r4, r5, r7, lr}
 800ed66:	b094      	sub	sp, #80	; 0x50
 800ed68:	af04      	add	r7, sp, #16
 800ed6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f002 fac9 	bl	801130c <SDMMC_GetPowerState>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d102      	bne.n	800ed86 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ed80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ed84:	e0b6      	b.n	800eef4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed8a:	2b03      	cmp	r3, #3
 800ed8c:	d02f      	beq.n	800edee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f002 fcf3 	bl	801177e <SDMMC_CmdSendCID>
 800ed98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <SD_InitCard+0x40>
    {
      return errorstate;
 800eda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda2:	e0a7      	b.n	800eef4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2100      	movs	r1, #0
 800edaa:	4618      	mov	r0, r3
 800edac:	f002 faf3 	bl	8011396 <SDMMC_GetResponse>
 800edb0:	4602      	mov	r2, r0
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2104      	movs	r1, #4
 800edbc:	4618      	mov	r0, r3
 800edbe:	f002 faea 	bl	8011396 <SDMMC_GetResponse>
 800edc2:	4602      	mov	r2, r0
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2108      	movs	r1, #8
 800edce:	4618      	mov	r0, r3
 800edd0:	f002 fae1 	bl	8011396 <SDMMC_GetResponse>
 800edd4:	4602      	mov	r2, r0
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	210c      	movs	r1, #12
 800ede0:	4618      	mov	r0, r3
 800ede2:	f002 fad8 	bl	8011396 <SDMMC_GetResponse>
 800ede6:	4602      	mov	r2, r0
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edf2:	2b03      	cmp	r3, #3
 800edf4:	d00d      	beq.n	800ee12 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f107 020e 	add.w	r2, r7, #14
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f002 fcf9 	bl	80117f8 <SDMMC_CmdSetRelAdd>
 800ee06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <SD_InitCard+0xae>
    {
      return errorstate;
 800ee0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee10:	e070      	b.n	800eef4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee16:	2b03      	cmp	r3, #3
 800ee18:	d036      	beq.n	800ee88 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ee1a:	89fb      	ldrh	r3, [r7, #14]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee2a:	041b      	lsls	r3, r3, #16
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4610      	mov	r0, r2
 800ee30:	f002 fcc3 	bl	80117ba <SDMMC_CmdSendCSD>
 800ee34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d001      	beq.n	800ee40 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ee3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee3e:	e059      	b.n	800eef4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2100      	movs	r1, #0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f002 faa5 	bl	8011396 <SDMMC_GetResponse>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2104      	movs	r1, #4
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f002 fa9c 	bl	8011396 <SDMMC_GetResponse>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2108      	movs	r1, #8
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f002 fa93 	bl	8011396 <SDMMC_GetResponse>
 800ee70:	4602      	mov	r2, r0
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	210c      	movs	r1, #12
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f002 fa8a 	bl	8011396 <SDMMC_GetResponse>
 800ee82:	4602      	mov	r2, r0
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2104      	movs	r1, #4
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f002 fa81 	bl	8011396 <SDMMC_GetResponse>
 800ee94:	4603      	mov	r3, r0
 800ee96:	0d1a      	lsrs	r2, r3, #20
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ee9c:	f107 0310 	add.w	r3, r7, #16
 800eea0:	4619      	mov	r1, r3
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7ff fc34 	bl	800e710 <HAL_SD_GetCardCSD>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eeae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eeb2:	e01f      	b.n	800eef4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6819      	ldr	r1, [r3, #0]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eebc:	041b      	lsls	r3, r3, #16
 800eebe:	461a      	mov	r2, r3
 800eec0:	f04f 0300 	mov.w	r3, #0
 800eec4:	4608      	mov	r0, r1
 800eec6:	f002 fb71 	bl	80115ac <SDMMC_CmdSelDesel>
 800eeca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800eecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <SD_InitCard+0x172>
  {
    return errorstate;
 800eed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eed4:	e00e      	b.n	800eef4 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681d      	ldr	r5, [r3, #0]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	466c      	mov	r4, sp
 800eede:	f103 0210 	add.w	r2, r3, #16
 800eee2:	ca07      	ldmia	r2, {r0, r1, r2}
 800eee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eee8:	3304      	adds	r3, #4
 800eeea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eeec:	4628      	mov	r0, r5
 800eeee:	f002 f9c5 	bl	801127c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800eef2:	2300      	movs	r3, #0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3740      	adds	r7, #64	; 0x40
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bdb0      	pop	{r4, r5, r7, pc}

0800eefc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef04:	2300      	movs	r3, #0
 800ef06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	617b      	str	r3, [r7, #20]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f002 fb6c 	bl	80115f2 <SDMMC_CmdGoIdleState>
 800ef1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	e072      	b.n	800f00c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f002 fb7f 	bl	801162e <SDMMC_CmdOperCond>
 800ef30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d00d      	beq.n	800ef54 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f002 fb55 	bl	80115f2 <SDMMC_CmdGoIdleState>
 800ef48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d004      	beq.n	800ef5a <SD_PowerON+0x5e>
    {
      return errorstate;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	e05b      	b.n	800f00c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d137      	bne.n	800efd2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2100      	movs	r1, #0
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f002 fb7f 	bl	801166c <SDMMC_CmdAppCommand>
 800ef6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d02d      	beq.n	800efd2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef7a:	e047      	b.n	800f00c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2100      	movs	r1, #0
 800ef82:	4618      	mov	r0, r3
 800ef84:	f002 fb72 	bl	801166c <SDMMC_CmdAppCommand>
 800ef88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d001      	beq.n	800ef94 <SD_PowerON+0x98>
    {
      return errorstate;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	e03b      	b.n	800f00c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	491e      	ldr	r1, [pc, #120]	; (800f014 <SD_PowerON+0x118>)
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f002 fb88 	bl	80116b0 <SDMMC_CmdAppOperCommand>
 800efa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d002      	beq.n	800efae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800efa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800efac:	e02e      	b.n	800f00c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2100      	movs	r1, #0
 800efb4:	4618      	mov	r0, r3
 800efb6:	f002 f9ee 	bl	8011396 <SDMMC_GetResponse>
 800efba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	0fdb      	lsrs	r3, r3, #31
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d101      	bne.n	800efc8 <SD_PowerON+0xcc>
 800efc4:	2301      	movs	r3, #1
 800efc6:	e000      	b.n	800efca <SD_PowerON+0xce>
 800efc8:	2300      	movs	r3, #0
 800efca:	613b      	str	r3, [r7, #16]

    count++;
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	3301      	adds	r3, #1
 800efd0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800efd8:	4293      	cmp	r3, r2
 800efda:	d802      	bhi.n	800efe2 <SD_PowerON+0xe6>
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d0cc      	beq.n	800ef7c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800efe8:	4293      	cmp	r3, r2
 800efea:	d902      	bls.n	800eff2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800efec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eff0:	e00c      	b.n	800f00c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d003      	beq.n	800f004 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	645a      	str	r2, [r3, #68]	; 0x44
 800f002:	e002      	b.n	800f00a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3718      	adds	r7, #24
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	c1100000 	.word	0xc1100000

0800f018 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f028:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f02c:	e018      	b.n	800f060 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f036:	041b      	lsls	r3, r3, #16
 800f038:	4619      	mov	r1, r3
 800f03a:	4610      	mov	r0, r2
 800f03c:	f002 fbfd 	bl	801183a <SDMMC_CmdSendStatus>
 800f040:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d001      	beq.n	800f04c <SD_SendStatus+0x34>
  {
    return errorstate;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	e009      	b.n	800f060 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2100      	movs	r1, #0
 800f052:	4618      	mov	r0, r3
 800f054:	f002 f99f 	bl	8011396 <SDMMC_GetResponse>
 800f058:	4602      	mov	r2, r0
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f070:	2300      	movs	r3, #0
 800f072:	60fb      	str	r3, [r7, #12]
 800f074:	2300      	movs	r3, #0
 800f076:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2100      	movs	r1, #0
 800f07e:	4618      	mov	r0, r3
 800f080:	f002 f989 	bl	8011396 <SDMMC_GetResponse>
 800f084:	4603      	mov	r3, r0
 800f086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f08a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f08e:	d102      	bne.n	800f096 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f094:	e02f      	b.n	800f0f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f096:	f107 030c 	add.w	r3, r7, #12
 800f09a:	4619      	mov	r1, r3
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 f879 	bl	800f194 <SD_FindSCR>
 800f0a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d001      	beq.n	800f0ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	e023      	b.n	800f0f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d01c      	beq.n	800f0f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0c0:	041b      	lsls	r3, r3, #16
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	f002 fad1 	bl	801166c <SDMMC_CmdAppCommand>
 800f0ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	e00f      	b.n	800f0f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2102      	movs	r1, #2
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f002 fb0b 	bl	80116f8 <SDMMC_CmdBusWidth>
 800f0e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	e003      	b.n	800f0f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	e001      	b.n	800f0f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f0f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3718      	adds	r7, #24
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b086      	sub	sp, #24
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f106:	2300      	movs	r3, #0
 800f108:	60fb      	str	r3, [r7, #12]
 800f10a:	2300      	movs	r3, #0
 800f10c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2100      	movs	r1, #0
 800f114:	4618      	mov	r0, r3
 800f116:	f002 f93e 	bl	8011396 <SDMMC_GetResponse>
 800f11a:	4603      	mov	r3, r0
 800f11c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f124:	d102      	bne.n	800f12c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f12a:	e02f      	b.n	800f18c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f12c:	f107 030c 	add.w	r3, r7, #12
 800f130:	4619      	mov	r1, r3
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 f82e 	bl	800f194 <SD_FindSCR>
 800f138:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	e023      	b.n	800f18c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d01c      	beq.n	800f188 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f156:	041b      	lsls	r3, r3, #16
 800f158:	4619      	mov	r1, r3
 800f15a:	4610      	mov	r0, r2
 800f15c:	f002 fa86 	bl	801166c <SDMMC_CmdAppCommand>
 800f160:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	e00f      	b.n	800f18c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2100      	movs	r1, #0
 800f172:	4618      	mov	r0, r3
 800f174:	f002 fac0 	bl	80116f8 <SDMMC_CmdBusWidth>
 800f178:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d001      	beq.n	800f184 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	e003      	b.n	800f18c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f184:	2300      	movs	r3, #0
 800f186:	e001      	b.n	800f18c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f188:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f194:	b590      	push	{r4, r7, lr}
 800f196:	b08f      	sub	sp, #60	; 0x3c
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f19e:	f7f6 ff3f 	bl	8006020 <HAL_GetTick>
 800f1a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	60bb      	str	r3, [r7, #8]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2108      	movs	r1, #8
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f002 f92a 	bl	8011414 <SDMMC_CmdBlockLength>
 800f1c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d001      	beq.n	800f1cc <SD_FindSCR+0x38>
  {
    return errorstate;
 800f1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ca:	e0b2      	b.n	800f332 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1d4:	041b      	lsls	r3, r3, #16
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	4610      	mov	r0, r2
 800f1da:	f002 fa47 	bl	801166c <SDMMC_CmdAppCommand>
 800f1de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <SD_FindSCR+0x56>
  {
    return errorstate;
 800f1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e8:	e0a3      	b.n	800f332 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f1f0:	2308      	movs	r3, #8
 800f1f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f1f4:	2330      	movs	r3, #48	; 0x30
 800f1f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f200:	2301      	movs	r3, #1
 800f202:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f107 0210 	add.w	r2, r7, #16
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f002 f8d4 	bl	80113bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4618      	mov	r0, r3
 800f21a:	f002 fa8f 	bl	801173c <SDMMC_CmdSendSCR>
 800f21e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f222:	2b00      	cmp	r3, #0
 800f224:	d02a      	beq.n	800f27c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800f226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f228:	e083      	b.n	800f332 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00f      	beq.n	800f258 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6819      	ldr	r1, [r3, #0]
 800f23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	f107 0208 	add.w	r2, r7, #8
 800f244:	18d4      	adds	r4, r2, r3
 800f246:	4608      	mov	r0, r1
 800f248:	f002 f844 	bl	80112d4 <SDMMC_ReadFIFO>
 800f24c:	4603      	mov	r3, r0
 800f24e:	6023      	str	r3, [r4, #0]
      index++;
 800f250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f252:	3301      	adds	r3, #1
 800f254:	637b      	str	r3, [r7, #52]	; 0x34
 800f256:	e006      	b.n	800f266 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f25e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f262:	2b00      	cmp	r3, #0
 800f264:	d012      	beq.n	800f28c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f266:	f7f6 fedb 	bl	8006020 <HAL_GetTick>
 800f26a:	4602      	mov	r2, r0
 800f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f274:	d102      	bne.n	800f27c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f27a:	e05a      	b.n	800f332 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f282:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800f286:	2b00      	cmp	r3, #0
 800f288:	d0cf      	beq.n	800f22a <SD_FindSCR+0x96>
 800f28a:	e000      	b.n	800f28e <SD_FindSCR+0xfa>
      break;
 800f28c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f294:	f003 0308 	and.w	r3, r3, #8
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d005      	beq.n	800f2a8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	2208      	movs	r2, #8
 800f2a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f2a4:	2308      	movs	r3, #8
 800f2a6:	e044      	b.n	800f332 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ae:	f003 0302 	and.w	r3, r3, #2
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d005      	beq.n	800f2c2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2202      	movs	r2, #2
 800f2bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f2be:	2302      	movs	r3, #2
 800f2c0:	e037      	b.n	800f332 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c8:	f003 0320 	and.w	r3, r3, #32
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d005      	beq.n	800f2dc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2220      	movs	r2, #32
 800f2d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f2d8:	2320      	movs	r3, #32
 800f2da:	e02a      	b.n	800f332 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800f2e4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	061a      	lsls	r2, r3, #24
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	021b      	lsls	r3, r3, #8
 800f2ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f2f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	0a1b      	lsrs	r3, r3, #8
 800f2f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f2fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	0e1b      	lsrs	r3, r3, #24
 800f302:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	601a      	str	r2, [r3, #0]
    scr++;
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	3304      	adds	r3, #4
 800f30c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	061a      	lsls	r2, r3, #24
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	021b      	lsls	r3, r3, #8
 800f316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f31a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	0a1b      	lsrs	r3, r3, #8
 800f320:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f324:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	0e1b      	lsrs	r3, r3, #24
 800f32a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	373c      	adds	r7, #60	; 0x3c
 800f336:	46bd      	mov	sp, r7
 800f338:	bd90      	pop	{r4, r7, pc}

0800f33a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e025      	b.n	800f39a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f354:	b2db      	uxtb	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	d106      	bne.n	800f368 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2200      	movs	r2, #0
 800f35e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7f4 fb6a 	bl	8003a3c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2202      	movs	r2, #2
 800f36c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	3304      	adds	r3, #4
 800f378:	4619      	mov	r1, r3
 800f37a:	4610      	mov	r0, r2
 800f37c:	f001 fe54 	bl	8011028 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6818      	ldr	r0, [r3, #0]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	461a      	mov	r2, r3
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	f001 febe 	bl	801110c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3708      	adds	r7, #8
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	60b9      	str	r1, [r7, #8]
 800f3ac:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d101      	bne.n	800f3be <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	e018      	b.n	800f3f0 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	68b9      	ldr	r1, [r7, #8]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f001 ff1c 	bl	801120c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d104      	bne.n	800f3e6 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2205      	movs	r2, #5
 800f3e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f3e4:	e003      	b.n	800f3ee <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800f3ee:	2300      	movs	r3, #0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3710      	adds	r7, #16
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d101      	bne.n	800f412 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800f40e:	2302      	movs	r3, #2
 800f410:	e00e      	b.n	800f430 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2202      	movs	r2, #2
 800f416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	f001 ff17 	bl	8011254 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800f446:	2301      	movs	r3, #1
 800f448:	e04c      	b.n	800f4e4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f450:	b2db      	uxtb	r3, r3
 800f452:	2b00      	cmp	r3, #0
 800f454:	d106      	bne.n	800f464 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7f4 f820 	bl	80034a4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2202      	movs	r2, #2
 800f468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f022 0203 	bic.w	r2, r2, #3
 800f47a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	4b19      	ldr	r3, [pc, #100]	; (800f4ec <HAL_SPDIFRX_Init+0xb4>)
 800f488:	4013      	ands	r3, r2
 800f48a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800f494:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800f49a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800f4a0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800f4a6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800f4ac:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800f4b2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800f4b8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800f4be:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800f4c4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2201      	movs	r2, #1
 800f4de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800f4e2:	2300      	movs	r3, #0
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	fff88407 	.word	0xfff88407

0800f4f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d101      	bne.n	800f502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	e049      	b.n	800f596 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d106      	bne.n	800f51c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7f4 f806 	bl	8003528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2202      	movs	r2, #2
 800f520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3304      	adds	r3, #4
 800f52c:	4619      	mov	r1, r3
 800f52e:	4610      	mov	r0, r2
 800f530:	f000 fc22 	bl	800fd78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2201      	movs	r2, #1
 800f550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
	...

0800f5a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b085      	sub	sp, #20
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d001      	beq.n	800f5b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e054      	b.n	800f662 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68da      	ldr	r2, [r3, #12]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f042 0201 	orr.w	r2, r2, #1
 800f5ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a26      	ldr	r2, [pc, #152]	; (800f670 <HAL_TIM_Base_Start_IT+0xd0>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d022      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5e2:	d01d      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a22      	ldr	r2, [pc, #136]	; (800f674 <HAL_TIM_Base_Start_IT+0xd4>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d018      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a21      	ldr	r2, [pc, #132]	; (800f678 <HAL_TIM_Base_Start_IT+0xd8>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d013      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a1f      	ldr	r2, [pc, #124]	; (800f67c <HAL_TIM_Base_Start_IT+0xdc>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d00e      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a1e      	ldr	r2, [pc, #120]	; (800f680 <HAL_TIM_Base_Start_IT+0xe0>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d009      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a1c      	ldr	r2, [pc, #112]	; (800f684 <HAL_TIM_Base_Start_IT+0xe4>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d004      	beq.n	800f620 <HAL_TIM_Base_Start_IT+0x80>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a1b      	ldr	r2, [pc, #108]	; (800f688 <HAL_TIM_Base_Start_IT+0xe8>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d115      	bne.n	800f64c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	689a      	ldr	r2, [r3, #8]
 800f626:	4b19      	ldr	r3, [pc, #100]	; (800f68c <HAL_TIM_Base_Start_IT+0xec>)
 800f628:	4013      	ands	r3, r2
 800f62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2b06      	cmp	r3, #6
 800f630:	d015      	beq.n	800f65e <HAL_TIM_Base_Start_IT+0xbe>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f638:	d011      	beq.n	800f65e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f042 0201 	orr.w	r2, r2, #1
 800f648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f64a:	e008      	b.n	800f65e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f042 0201 	orr.w	r2, r2, #1
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	e000      	b.n	800f660 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f65e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	40010000 	.word	0x40010000
 800f674:	40000400 	.word	0x40000400
 800f678:	40000800 	.word	0x40000800
 800f67c:	40000c00 	.word	0x40000c00
 800f680:	40010400 	.word	0x40010400
 800f684:	40014000 	.word	0x40014000
 800f688:	40001800 	.word	0x40001800
 800f68c:	00010007 	.word	0x00010007

0800f690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e049      	b.n	800f736 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7f3 ffa4 	bl	8003604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2202      	movs	r2, #2
 800f6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	4610      	mov	r0, r2
 800f6d0:	f000 fb52 	bl	800fd78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f73e:	b580      	push	{r7, lr}
 800f740:	b082      	sub	sp, #8
 800f742:	af00      	add	r7, sp, #0
 800f744:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	f003 0302 	and.w	r3, r3, #2
 800f750:	2b02      	cmp	r3, #2
 800f752:	d122      	bne.n	800f79a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	f003 0302 	and.w	r3, r3, #2
 800f75e:	2b02      	cmp	r3, #2
 800f760:	d11b      	bne.n	800f79a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f06f 0202 	mvn.w	r2, #2
 800f76a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2201      	movs	r2, #1
 800f770:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	f003 0303 	and.w	r3, r3, #3
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d003      	beq.n	800f788 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fadb 	bl	800fd3c <HAL_TIM_IC_CaptureCallback>
 800f786:	e005      	b.n	800f794 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 facd 	bl	800fd28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fade 	bl	800fd50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	691b      	ldr	r3, [r3, #16]
 800f7a0:	f003 0304 	and.w	r3, r3, #4
 800f7a4:	2b04      	cmp	r3, #4
 800f7a6:	d122      	bne.n	800f7ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	f003 0304 	and.w	r3, r3, #4
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	d11b      	bne.n	800f7ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f06f 0204 	mvn.w	r2, #4
 800f7be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2202      	movs	r2, #2
 800f7c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	699b      	ldr	r3, [r3, #24]
 800f7cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d003      	beq.n	800f7dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 fab1 	bl	800fd3c <HAL_TIM_IC_CaptureCallback>
 800f7da:	e005      	b.n	800f7e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 faa3 	bl	800fd28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fab4 	bl	800fd50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	691b      	ldr	r3, [r3, #16]
 800f7f4:	f003 0308 	and.w	r3, r3, #8
 800f7f8:	2b08      	cmp	r3, #8
 800f7fa:	d122      	bne.n	800f842 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	f003 0308 	and.w	r3, r3, #8
 800f806:	2b08      	cmp	r3, #8
 800f808:	d11b      	bne.n	800f842 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f06f 0208 	mvn.w	r2, #8
 800f812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2204      	movs	r2, #4
 800f818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	69db      	ldr	r3, [r3, #28]
 800f820:	f003 0303 	and.w	r3, r3, #3
 800f824:	2b00      	cmp	r3, #0
 800f826:	d003      	beq.n	800f830 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fa87 	bl	800fd3c <HAL_TIM_IC_CaptureCallback>
 800f82e:	e005      	b.n	800f83c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 fa79 	bl	800fd28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 fa8a 	bl	800fd50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	f003 0310 	and.w	r3, r3, #16
 800f84c:	2b10      	cmp	r3, #16
 800f84e:	d122      	bne.n	800f896 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	f003 0310 	and.w	r3, r3, #16
 800f85a:	2b10      	cmp	r3, #16
 800f85c:	d11b      	bne.n	800f896 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f06f 0210 	mvn.w	r2, #16
 800f866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2208      	movs	r2, #8
 800f86c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	69db      	ldr	r3, [r3, #28]
 800f874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d003      	beq.n	800f884 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 fa5d 	bl	800fd3c <HAL_TIM_IC_CaptureCallback>
 800f882:	e005      	b.n	800f890 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 fa4f 	bl	800fd28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 fa60 	bl	800fd50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	691b      	ldr	r3, [r3, #16]
 800f89c:	f003 0301 	and.w	r3, r3, #1
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d10e      	bne.n	800f8c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d107      	bne.n	800f8c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f06f 0201 	mvn.w	r2, #1
 800f8ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f7f3 f98d 	bl	8002bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	691b      	ldr	r3, [r3, #16]
 800f8c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8cc:	2b80      	cmp	r3, #128	; 0x80
 800f8ce:	d10e      	bne.n	800f8ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8da:	2b80      	cmp	r3, #128	; 0x80
 800f8dc:	d107      	bne.n	800f8ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f8e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fef3 	bl	80106d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	691b      	ldr	r3, [r3, #16]
 800f8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8fc:	d10e      	bne.n	800f91c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f908:	2b80      	cmp	r3, #128	; 0x80
 800f90a:	d107      	bne.n	800f91c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 fee6 	bl	80106e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	691b      	ldr	r3, [r3, #16]
 800f922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f926:	2b40      	cmp	r3, #64	; 0x40
 800f928:	d10e      	bne.n	800f948 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f934:	2b40      	cmp	r3, #64	; 0x40
 800f936:	d107      	bne.n	800f948 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 fa0e 	bl	800fd64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	f003 0320 	and.w	r3, r3, #32
 800f952:	2b20      	cmp	r3, #32
 800f954:	d10e      	bne.n	800f974 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	f003 0320 	and.w	r3, r3, #32
 800f960:	2b20      	cmp	r3, #32
 800f962:	d107      	bne.n	800f974 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f06f 0220 	mvn.w	r2, #32
 800f96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 fea6 	bl	80106c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f974:	bf00      	nop
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d101      	bne.n	800f996 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f992:	2302      	movs	r3, #2
 800f994:	e0fd      	b.n	800fb92 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2201      	movs	r2, #1
 800f99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b14      	cmp	r3, #20
 800f9a2:	f200 80f0 	bhi.w	800fb86 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f9a6:	a201      	add	r2, pc, #4	; (adr r2, 800f9ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ac:	0800fa01 	.word	0x0800fa01
 800f9b0:	0800fb87 	.word	0x0800fb87
 800f9b4:	0800fb87 	.word	0x0800fb87
 800f9b8:	0800fb87 	.word	0x0800fb87
 800f9bc:	0800fa41 	.word	0x0800fa41
 800f9c0:	0800fb87 	.word	0x0800fb87
 800f9c4:	0800fb87 	.word	0x0800fb87
 800f9c8:	0800fb87 	.word	0x0800fb87
 800f9cc:	0800fa83 	.word	0x0800fa83
 800f9d0:	0800fb87 	.word	0x0800fb87
 800f9d4:	0800fb87 	.word	0x0800fb87
 800f9d8:	0800fb87 	.word	0x0800fb87
 800f9dc:	0800fac3 	.word	0x0800fac3
 800f9e0:	0800fb87 	.word	0x0800fb87
 800f9e4:	0800fb87 	.word	0x0800fb87
 800f9e8:	0800fb87 	.word	0x0800fb87
 800f9ec:	0800fb05 	.word	0x0800fb05
 800f9f0:	0800fb87 	.word	0x0800fb87
 800f9f4:	0800fb87 	.word	0x0800fb87
 800f9f8:	0800fb87 	.word	0x0800fb87
 800f9fc:	0800fb45 	.word	0x0800fb45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	68b9      	ldr	r1, [r7, #8]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f000 fa56 	bl	800feb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	699a      	ldr	r2, [r3, #24]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f042 0208 	orr.w	r2, r2, #8
 800fa1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	699a      	ldr	r2, [r3, #24]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f022 0204 	bic.w	r2, r2, #4
 800fa2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6999      	ldr	r1, [r3, #24]
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	691a      	ldr	r2, [r3, #16]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	430a      	orrs	r2, r1
 800fa3c:	619a      	str	r2, [r3, #24]
      break;
 800fa3e:	e0a3      	b.n	800fb88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	68b9      	ldr	r1, [r7, #8]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f000 faa8 	bl	800ff9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	699a      	ldr	r2, [r3, #24]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	699a      	ldr	r2, [r3, #24]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	6999      	ldr	r1, [r3, #24]
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	021a      	lsls	r2, r3, #8
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	430a      	orrs	r2, r1
 800fa7e:	619a      	str	r2, [r3, #24]
      break;
 800fa80:	e082      	b.n	800fb88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	68b9      	ldr	r1, [r7, #8]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f000 faff 	bl	801008c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	69da      	ldr	r2, [r3, #28]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f042 0208 	orr.w	r2, r2, #8
 800fa9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	69da      	ldr	r2, [r3, #28]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f022 0204 	bic.w	r2, r2, #4
 800faac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	69d9      	ldr	r1, [r3, #28]
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	691a      	ldr	r2, [r3, #16]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	430a      	orrs	r2, r1
 800fabe:	61da      	str	r2, [r3, #28]
      break;
 800fac0:	e062      	b.n	800fb88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	68b9      	ldr	r1, [r7, #8]
 800fac8:	4618      	mov	r0, r3
 800faca:	f000 fb55 	bl	8010178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	69da      	ldr	r2, [r3, #28]
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fadc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	69da      	ldr	r2, [r3, #28]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	69d9      	ldr	r1, [r3, #28]
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	021a      	lsls	r2, r3, #8
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	430a      	orrs	r2, r1
 800fb00:	61da      	str	r2, [r3, #28]
      break;
 800fb02:	e041      	b.n	800fb88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68b9      	ldr	r1, [r7, #8]
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f000 fb8c 	bl	8010228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f042 0208 	orr.w	r2, r2, #8
 800fb1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f022 0204 	bic.w	r2, r2, #4
 800fb2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	691a      	ldr	r2, [r3, #16]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	430a      	orrs	r2, r1
 800fb40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb42:	e021      	b.n	800fb88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68b9      	ldr	r1, [r7, #8]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f000 fbbe 	bl	80102cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	021a      	lsls	r2, r3, #8
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	430a      	orrs	r2, r1
 800fb82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb84:	e000      	b.n	800fb88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800fb86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop

0800fb9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d101      	bne.n	800fbb4 <HAL_TIM_ConfigClockSource+0x18>
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	e0b3      	b.n	800fd1c <HAL_TIM_ConfigClockSource+0x180>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	4b55      	ldr	r3, [pc, #340]	; (800fd24 <HAL_TIM_ConfigClockSource+0x188>)
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fbda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbec:	d03e      	beq.n	800fc6c <HAL_TIM_ConfigClockSource+0xd0>
 800fbee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbf2:	f200 8087 	bhi.w	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fbf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbfa:	f000 8085 	beq.w	800fd08 <HAL_TIM_ConfigClockSource+0x16c>
 800fbfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc02:	d87f      	bhi.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fc04:	2b70      	cmp	r3, #112	; 0x70
 800fc06:	d01a      	beq.n	800fc3e <HAL_TIM_ConfigClockSource+0xa2>
 800fc08:	2b70      	cmp	r3, #112	; 0x70
 800fc0a:	d87b      	bhi.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fc0c:	2b60      	cmp	r3, #96	; 0x60
 800fc0e:	d050      	beq.n	800fcb2 <HAL_TIM_ConfigClockSource+0x116>
 800fc10:	2b60      	cmp	r3, #96	; 0x60
 800fc12:	d877      	bhi.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fc14:	2b50      	cmp	r3, #80	; 0x50
 800fc16:	d03c      	beq.n	800fc92 <HAL_TIM_ConfigClockSource+0xf6>
 800fc18:	2b50      	cmp	r3, #80	; 0x50
 800fc1a:	d873      	bhi.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fc1c:	2b40      	cmp	r3, #64	; 0x40
 800fc1e:	d058      	beq.n	800fcd2 <HAL_TIM_ConfigClockSource+0x136>
 800fc20:	2b40      	cmp	r3, #64	; 0x40
 800fc22:	d86f      	bhi.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fc24:	2b30      	cmp	r3, #48	; 0x30
 800fc26:	d064      	beq.n	800fcf2 <HAL_TIM_ConfigClockSource+0x156>
 800fc28:	2b30      	cmp	r3, #48	; 0x30
 800fc2a:	d86b      	bhi.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fc2c:	2b20      	cmp	r3, #32
 800fc2e:	d060      	beq.n	800fcf2 <HAL_TIM_ConfigClockSource+0x156>
 800fc30:	2b20      	cmp	r3, #32
 800fc32:	d867      	bhi.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d05c      	beq.n	800fcf2 <HAL_TIM_ConfigClockSource+0x156>
 800fc38:	2b10      	cmp	r3, #16
 800fc3a:	d05a      	beq.n	800fcf2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800fc3c:	e062      	b.n	800fd04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6818      	ldr	r0, [r3, #0]
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	6899      	ldr	r1, [r3, #8]
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	685a      	ldr	r2, [r3, #4]
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	f000 fc0b 	bl	8010468 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fc60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	609a      	str	r2, [r3, #8]
      break;
 800fc6a:	e04e      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6818      	ldr	r0, [r3, #0]
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	6899      	ldr	r1, [r3, #8]
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	f000 fbf4 	bl	8010468 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	689a      	ldr	r2, [r3, #8]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fc8e:	609a      	str	r2, [r3, #8]
      break;
 800fc90:	e03b      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6818      	ldr	r0, [r3, #0]
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	6859      	ldr	r1, [r3, #4]
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	f000 fb68 	bl	8010374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2150      	movs	r1, #80	; 0x50
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f000 fbc1 	bl	8010432 <TIM_ITRx_SetConfig>
      break;
 800fcb0:	e02b      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6818      	ldr	r0, [r3, #0]
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	6859      	ldr	r1, [r3, #4]
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	f000 fb87 	bl	80103d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2160      	movs	r1, #96	; 0x60
 800fcca:	4618      	mov	r0, r3
 800fccc:	f000 fbb1 	bl	8010432 <TIM_ITRx_SetConfig>
      break;
 800fcd0:	e01b      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6818      	ldr	r0, [r3, #0]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	6859      	ldr	r1, [r3, #4]
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	461a      	mov	r2, r3
 800fce0:	f000 fb48 	bl	8010374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2140      	movs	r1, #64	; 0x40
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 fba1 	bl	8010432 <TIM_ITRx_SetConfig>
      break;
 800fcf0:	e00b      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	f000 fb98 	bl	8010432 <TIM_ITRx_SetConfig>
        break;
 800fd02:	e002      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800fd04:	bf00      	nop
 800fd06:	e000      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800fd08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd1a:	2300      	movs	r3, #0
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	fffeff88 	.word	0xfffeff88

0800fd28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd30:	bf00      	nop
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b083      	sub	sp, #12
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd44:	bf00      	nop
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a40      	ldr	r2, [pc, #256]	; (800fe8c <TIM_Base_SetConfig+0x114>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d013      	beq.n	800fdb8 <TIM_Base_SetConfig+0x40>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd96:	d00f      	beq.n	800fdb8 <TIM_Base_SetConfig+0x40>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	4a3d      	ldr	r2, [pc, #244]	; (800fe90 <TIM_Base_SetConfig+0x118>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d00b      	beq.n	800fdb8 <TIM_Base_SetConfig+0x40>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4a3c      	ldr	r2, [pc, #240]	; (800fe94 <TIM_Base_SetConfig+0x11c>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d007      	beq.n	800fdb8 <TIM_Base_SetConfig+0x40>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4a3b      	ldr	r2, [pc, #236]	; (800fe98 <TIM_Base_SetConfig+0x120>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d003      	beq.n	800fdb8 <TIM_Base_SetConfig+0x40>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	4a3a      	ldr	r2, [pc, #232]	; (800fe9c <TIM_Base_SetConfig+0x124>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d108      	bne.n	800fdca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4a2f      	ldr	r2, [pc, #188]	; (800fe8c <TIM_Base_SetConfig+0x114>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d02b      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdd8:	d027      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4a2c      	ldr	r2, [pc, #176]	; (800fe90 <TIM_Base_SetConfig+0x118>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d023      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	4a2b      	ldr	r2, [pc, #172]	; (800fe94 <TIM_Base_SetConfig+0x11c>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d01f      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a2a      	ldr	r2, [pc, #168]	; (800fe98 <TIM_Base_SetConfig+0x120>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d01b      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4a29      	ldr	r2, [pc, #164]	; (800fe9c <TIM_Base_SetConfig+0x124>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d017      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a28      	ldr	r2, [pc, #160]	; (800fea0 <TIM_Base_SetConfig+0x128>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d013      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a27      	ldr	r2, [pc, #156]	; (800fea4 <TIM_Base_SetConfig+0x12c>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d00f      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4a26      	ldr	r2, [pc, #152]	; (800fea8 <TIM_Base_SetConfig+0x130>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d00b      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4a25      	ldr	r2, [pc, #148]	; (800feac <TIM_Base_SetConfig+0x134>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d007      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a24      	ldr	r2, [pc, #144]	; (800feb0 <TIM_Base_SetConfig+0x138>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d003      	beq.n	800fe2a <TIM_Base_SetConfig+0xb2>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4a23      	ldr	r2, [pc, #140]	; (800feb4 <TIM_Base_SetConfig+0x13c>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d108      	bne.n	800fe3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	695b      	ldr	r3, [r3, #20]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	689a      	ldr	r2, [r3, #8]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4a0a      	ldr	r2, [pc, #40]	; (800fe8c <TIM_Base_SetConfig+0x114>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d003      	beq.n	800fe70 <TIM_Base_SetConfig+0xf8>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a0c      	ldr	r2, [pc, #48]	; (800fe9c <TIM_Base_SetConfig+0x124>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d103      	bne.n	800fe78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	691a      	ldr	r2, [r3, #16]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	615a      	str	r2, [r3, #20]
}
 800fe7e:	bf00      	nop
 800fe80:	3714      	adds	r7, #20
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	40010000 	.word	0x40010000
 800fe90:	40000400 	.word	0x40000400
 800fe94:	40000800 	.word	0x40000800
 800fe98:	40000c00 	.word	0x40000c00
 800fe9c:	40010400 	.word	0x40010400
 800fea0:	40014000 	.word	0x40014000
 800fea4:	40014400 	.word	0x40014400
 800fea8:	40014800 	.word	0x40014800
 800feac:	40001800 	.word	0x40001800
 800feb0:	40001c00 	.word	0x40001c00
 800feb4:	40002000 	.word	0x40002000

0800feb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6a1b      	ldr	r3, [r3, #32]
 800fec6:	f023 0201 	bic.w	r2, r3, #1
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a1b      	ldr	r3, [r3, #32]
 800fed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	699b      	ldr	r3, [r3, #24]
 800fede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	4b2b      	ldr	r3, [pc, #172]	; (800ff90 <TIM_OC1_SetConfig+0xd8>)
 800fee4:	4013      	ands	r3, r2
 800fee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f023 0303 	bic.w	r3, r3, #3
 800feee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	f023 0302 	bic.w	r3, r3, #2
 800ff00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	697a      	ldr	r2, [r7, #20]
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4a21      	ldr	r2, [pc, #132]	; (800ff94 <TIM_OC1_SetConfig+0xdc>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d003      	beq.n	800ff1c <TIM_OC1_SetConfig+0x64>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4a20      	ldr	r2, [pc, #128]	; (800ff98 <TIM_OC1_SetConfig+0xe0>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d10c      	bne.n	800ff36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	f023 0308 	bic.w	r3, r3, #8
 800ff22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	697a      	ldr	r2, [r7, #20]
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	f023 0304 	bic.w	r3, r3, #4
 800ff34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4a16      	ldr	r2, [pc, #88]	; (800ff94 <TIM_OC1_SetConfig+0xdc>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d003      	beq.n	800ff46 <TIM_OC1_SetConfig+0x8e>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4a15      	ldr	r2, [pc, #84]	; (800ff98 <TIM_OC1_SetConfig+0xe0>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d111      	bne.n	800ff6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	695b      	ldr	r3, [r3, #20]
 800ff5a:	693a      	ldr	r2, [r7, #16]
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	4313      	orrs	r3, r2
 800ff68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	693a      	ldr	r2, [r7, #16]
 800ff6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	697a      	ldr	r2, [r7, #20]
 800ff82:	621a      	str	r2, [r3, #32]
}
 800ff84:	bf00      	nop
 800ff86:	371c      	adds	r7, #28
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	fffeff8f 	.word	0xfffeff8f
 800ff94:	40010000 	.word	0x40010000
 800ff98:	40010400 	.word	0x40010400

0800ff9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b087      	sub	sp, #28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a1b      	ldr	r3, [r3, #32]
 800ffaa:	f023 0210 	bic.w	r2, r3, #16
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a1b      	ldr	r3, [r3, #32]
 800ffb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	699b      	ldr	r3, [r3, #24]
 800ffc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	4b2e      	ldr	r3, [pc, #184]	; (8010080 <TIM_OC2_SetConfig+0xe4>)
 800ffc8:	4013      	ands	r3, r2
 800ffca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	021b      	lsls	r3, r3, #8
 800ffda:	68fa      	ldr	r2, [r7, #12]
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	f023 0320 	bic.w	r3, r3, #32
 800ffe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	011b      	lsls	r3, r3, #4
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a23      	ldr	r2, [pc, #140]	; (8010084 <TIM_OC2_SetConfig+0xe8>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d003      	beq.n	8010004 <TIM_OC2_SetConfig+0x68>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4a22      	ldr	r2, [pc, #136]	; (8010088 <TIM_OC2_SetConfig+0xec>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d10d      	bne.n	8010020 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801000a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	011b      	lsls	r3, r3, #4
 8010012:	697a      	ldr	r2, [r7, #20]
 8010014:	4313      	orrs	r3, r2
 8010016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801001e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4a18      	ldr	r2, [pc, #96]	; (8010084 <TIM_OC2_SetConfig+0xe8>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d003      	beq.n	8010030 <TIM_OC2_SetConfig+0x94>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	4a17      	ldr	r2, [pc, #92]	; (8010088 <TIM_OC2_SetConfig+0xec>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d113      	bne.n	8010058 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801003e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	4313      	orrs	r3, r2
 801004a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	693a      	ldr	r2, [r7, #16]
 8010054:	4313      	orrs	r3, r2
 8010056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	693a      	ldr	r2, [r7, #16]
 801005c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	697a      	ldr	r2, [r7, #20]
 8010070:	621a      	str	r2, [r3, #32]
}
 8010072:	bf00      	nop
 8010074:	371c      	adds	r7, #28
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	feff8fff 	.word	0xfeff8fff
 8010084:	40010000 	.word	0x40010000
 8010088:	40010400 	.word	0x40010400

0801008c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801008c:	b480      	push	{r7}
 801008e:	b087      	sub	sp, #28
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6a1b      	ldr	r3, [r3, #32]
 801009a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6a1b      	ldr	r3, [r3, #32]
 80100a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	69db      	ldr	r3, [r3, #28]
 80100b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80100b4:	68fa      	ldr	r2, [r7, #12]
 80100b6:	4b2d      	ldr	r3, [pc, #180]	; (801016c <TIM_OC3_SetConfig+0xe0>)
 80100b8:	4013      	ands	r3, r2
 80100ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f023 0303 	bic.w	r3, r3, #3
 80100c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	4313      	orrs	r3, r2
 80100cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80100d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	021b      	lsls	r3, r3, #8
 80100dc:	697a      	ldr	r2, [r7, #20]
 80100de:	4313      	orrs	r3, r2
 80100e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4a22      	ldr	r2, [pc, #136]	; (8010170 <TIM_OC3_SetConfig+0xe4>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d003      	beq.n	80100f2 <TIM_OC3_SetConfig+0x66>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4a21      	ldr	r2, [pc, #132]	; (8010174 <TIM_OC3_SetConfig+0xe8>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d10d      	bne.n	801010e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	021b      	lsls	r3, r3, #8
 8010100:	697a      	ldr	r2, [r7, #20]
 8010102:	4313      	orrs	r3, r2
 8010104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801010c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4a17      	ldr	r2, [pc, #92]	; (8010170 <TIM_OC3_SetConfig+0xe4>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d003      	beq.n	801011e <TIM_OC3_SetConfig+0x92>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4a16      	ldr	r2, [pc, #88]	; (8010174 <TIM_OC3_SetConfig+0xe8>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d113      	bne.n	8010146 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801012c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	695b      	ldr	r3, [r3, #20]
 8010132:	011b      	lsls	r3, r3, #4
 8010134:	693a      	ldr	r2, [r7, #16]
 8010136:	4313      	orrs	r3, r2
 8010138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	699b      	ldr	r3, [r3, #24]
 801013e:	011b      	lsls	r3, r3, #4
 8010140:	693a      	ldr	r2, [r7, #16]
 8010142:	4313      	orrs	r3, r2
 8010144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	693a      	ldr	r2, [r7, #16]
 801014a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	697a      	ldr	r2, [r7, #20]
 801015e:	621a      	str	r2, [r3, #32]
}
 8010160:	bf00      	nop
 8010162:	371c      	adds	r7, #28
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	fffeff8f 	.word	0xfffeff8f
 8010170:	40010000 	.word	0x40010000
 8010174:	40010400 	.word	0x40010400

08010178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010178:	b480      	push	{r7}
 801017a:	b087      	sub	sp, #28
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a1b      	ldr	r3, [r3, #32]
 8010186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6a1b      	ldr	r3, [r3, #32]
 8010192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	69db      	ldr	r3, [r3, #28]
 801019e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	4b1e      	ldr	r3, [pc, #120]	; (801021c <TIM_OC4_SetConfig+0xa4>)
 80101a4:	4013      	ands	r3, r2
 80101a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	021b      	lsls	r3, r3, #8
 80101b6:	68fa      	ldr	r2, [r7, #12]
 80101b8:	4313      	orrs	r3, r2
 80101ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80101c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	031b      	lsls	r3, r3, #12
 80101ca:	693a      	ldr	r2, [r7, #16]
 80101cc:	4313      	orrs	r3, r2
 80101ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4a13      	ldr	r2, [pc, #76]	; (8010220 <TIM_OC4_SetConfig+0xa8>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d003      	beq.n	80101e0 <TIM_OC4_SetConfig+0x68>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4a12      	ldr	r2, [pc, #72]	; (8010224 <TIM_OC4_SetConfig+0xac>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d109      	bne.n	80101f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	695b      	ldr	r3, [r3, #20]
 80101ec:	019b      	lsls	r3, r3, #6
 80101ee:	697a      	ldr	r2, [r7, #20]
 80101f0:	4313      	orrs	r3, r2
 80101f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	693a      	ldr	r2, [r7, #16]
 801020c:	621a      	str	r2, [r3, #32]
}
 801020e:	bf00      	nop
 8010210:	371c      	adds	r7, #28
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop
 801021c:	feff8fff 	.word	0xfeff8fff
 8010220:	40010000 	.word	0x40010000
 8010224:	40010400 	.word	0x40010400

08010228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010228:	b480      	push	{r7}
 801022a:	b087      	sub	sp, #28
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6a1b      	ldr	r3, [r3, #32]
 8010236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801024e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	4b1b      	ldr	r3, [pc, #108]	; (80102c0 <TIM_OC5_SetConfig+0x98>)
 8010254:	4013      	ands	r3, r2
 8010256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	4313      	orrs	r3, r2
 8010260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	041b      	lsls	r3, r3, #16
 8010270:	693a      	ldr	r2, [r7, #16]
 8010272:	4313      	orrs	r3, r2
 8010274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a12      	ldr	r2, [pc, #72]	; (80102c4 <TIM_OC5_SetConfig+0x9c>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d003      	beq.n	8010286 <TIM_OC5_SetConfig+0x5e>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a11      	ldr	r2, [pc, #68]	; (80102c8 <TIM_OC5_SetConfig+0xa0>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d109      	bne.n	801029a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801028c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	695b      	ldr	r3, [r3, #20]
 8010292:	021b      	lsls	r3, r3, #8
 8010294:	697a      	ldr	r2, [r7, #20]
 8010296:	4313      	orrs	r3, r2
 8010298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	697a      	ldr	r2, [r7, #20]
 801029e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	693a      	ldr	r2, [r7, #16]
 80102b2:	621a      	str	r2, [r3, #32]
}
 80102b4:	bf00      	nop
 80102b6:	371c      	adds	r7, #28
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr
 80102c0:	fffeff8f 	.word	0xfffeff8f
 80102c4:	40010000 	.word	0x40010000
 80102c8:	40010400 	.word	0x40010400

080102cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b087      	sub	sp, #28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	6a1b      	ldr	r3, [r3, #32]
 80102da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a1b      	ldr	r3, [r3, #32]
 80102e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	4b1c      	ldr	r3, [pc, #112]	; (8010368 <TIM_OC6_SetConfig+0x9c>)
 80102f8:	4013      	ands	r3, r2
 80102fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	021b      	lsls	r3, r3, #8
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	4313      	orrs	r3, r2
 8010306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801030e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	051b      	lsls	r3, r3, #20
 8010316:	693a      	ldr	r2, [r7, #16]
 8010318:	4313      	orrs	r3, r2
 801031a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	4a13      	ldr	r2, [pc, #76]	; (801036c <TIM_OC6_SetConfig+0xa0>)
 8010320:	4293      	cmp	r3, r2
 8010322:	d003      	beq.n	801032c <TIM_OC6_SetConfig+0x60>
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4a12      	ldr	r2, [pc, #72]	; (8010370 <TIM_OC6_SetConfig+0xa4>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d109      	bne.n	8010340 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	695b      	ldr	r3, [r3, #20]
 8010338:	029b      	lsls	r3, r3, #10
 801033a:	697a      	ldr	r2, [r7, #20]
 801033c:	4313      	orrs	r3, r2
 801033e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	697a      	ldr	r2, [r7, #20]
 8010344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	685a      	ldr	r2, [r3, #4]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	693a      	ldr	r2, [r7, #16]
 8010358:	621a      	str	r2, [r3, #32]
}
 801035a:	bf00      	nop
 801035c:	371c      	adds	r7, #28
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr
 8010366:	bf00      	nop
 8010368:	feff8fff 	.word	0xfeff8fff
 801036c:	40010000 	.word	0x40010000
 8010370:	40010400 	.word	0x40010400

08010374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010374:	b480      	push	{r7}
 8010376:	b087      	sub	sp, #28
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	6a1b      	ldr	r3, [r3, #32]
 8010384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6a1b      	ldr	r3, [r3, #32]
 801038a:	f023 0201 	bic.w	r2, r3, #1
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	699b      	ldr	r3, [r3, #24]
 8010396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801039e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	011b      	lsls	r3, r3, #4
 80103a4:	693a      	ldr	r2, [r7, #16]
 80103a6:	4313      	orrs	r3, r2
 80103a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	f023 030a 	bic.w	r3, r3, #10
 80103b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80103b2:	697a      	ldr	r2, [r7, #20]
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	4313      	orrs	r3, r2
 80103b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	693a      	ldr	r2, [r7, #16]
 80103be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	621a      	str	r2, [r3, #32]
}
 80103c6:	bf00      	nop
 80103c8:	371c      	adds	r7, #28
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr

080103d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80103d2:	b480      	push	{r7}
 80103d4:	b087      	sub	sp, #28
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	60f8      	str	r0, [r7, #12]
 80103da:	60b9      	str	r1, [r7, #8]
 80103dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6a1b      	ldr	r3, [r3, #32]
 80103e2:	f023 0210 	bic.w	r2, r3, #16
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	699b      	ldr	r3, [r3, #24]
 80103ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6a1b      	ldr	r3, [r3, #32]
 80103f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80103fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	031b      	lsls	r3, r3, #12
 8010402:	697a      	ldr	r2, [r7, #20]
 8010404:	4313      	orrs	r3, r2
 8010406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801040e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	011b      	lsls	r3, r3, #4
 8010414:	693a      	ldr	r2, [r7, #16]
 8010416:	4313      	orrs	r3, r2
 8010418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	697a      	ldr	r2, [r7, #20]
 801041e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	693a      	ldr	r2, [r7, #16]
 8010424:	621a      	str	r2, [r3, #32]
}
 8010426:	bf00      	nop
 8010428:	371c      	adds	r7, #28
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr

08010432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010432:	b480      	push	{r7}
 8010434:	b085      	sub	sp, #20
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	4313      	orrs	r3, r2
 8010450:	f043 0307 	orr.w	r3, r3, #7
 8010454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	609a      	str	r2, [r3, #8]
}
 801045c:	bf00      	nop
 801045e:	3714      	adds	r7, #20
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010468:	b480      	push	{r7}
 801046a:	b087      	sub	sp, #28
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	021a      	lsls	r2, r3, #8
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	431a      	orrs	r2, r3
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	4313      	orrs	r3, r2
 8010490:	697a      	ldr	r2, [r7, #20]
 8010492:	4313      	orrs	r3, r2
 8010494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	697a      	ldr	r2, [r7, #20]
 801049a:	609a      	str	r2, [r3, #8]
}
 801049c:	bf00      	nop
 801049e:	371c      	adds	r7, #28
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80104a8:	b480      	push	{r7}
 80104aa:	b085      	sub	sp, #20
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d101      	bne.n	80104c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80104bc:	2302      	movs	r3, #2
 80104be:	e06d      	b.n	801059c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2201      	movs	r2, #1
 80104c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2202      	movs	r2, #2
 80104cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a30      	ldr	r2, [pc, #192]	; (80105a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d004      	beq.n	80104f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a2f      	ldr	r2, [pc, #188]	; (80105ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d108      	bne.n	8010506 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80104fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	4313      	orrs	r3, r2
 8010504:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801050c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	4313      	orrs	r3, r2
 8010516:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a20      	ldr	r2, [pc, #128]	; (80105a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d022      	beq.n	8010570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010532:	d01d      	beq.n	8010570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4a1d      	ldr	r2, [pc, #116]	; (80105b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d018      	beq.n	8010570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4a1c      	ldr	r2, [pc, #112]	; (80105b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d013      	beq.n	8010570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a1a      	ldr	r2, [pc, #104]	; (80105b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d00e      	beq.n	8010570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4a15      	ldr	r2, [pc, #84]	; (80105ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d009      	beq.n	8010570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a16      	ldr	r2, [pc, #88]	; (80105bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d004      	beq.n	8010570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	4a15      	ldr	r2, [pc, #84]	; (80105c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d10c      	bne.n	801058a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010576:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	68ba      	ldr	r2, [r7, #8]
 801057e:	4313      	orrs	r3, r2
 8010580:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68ba      	ldr	r2, [r7, #8]
 8010588:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2201      	movs	r2, #1
 801058e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801059a:	2300      	movs	r3, #0
}
 801059c:	4618      	mov	r0, r3
 801059e:	3714      	adds	r7, #20
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr
 80105a8:	40010000 	.word	0x40010000
 80105ac:	40010400 	.word	0x40010400
 80105b0:	40000400 	.word	0x40000400
 80105b4:	40000800 	.word	0x40000800
 80105b8:	40000c00 	.word	0x40000c00
 80105bc:	40014000 	.word	0x40014000
 80105c0:	40001800 	.word	0x40001800

080105c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80105ce:	2300      	movs	r3, #0
 80105d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d101      	bne.n	80105e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80105dc:	2302      	movs	r3, #2
 80105de:	e065      	b.n	80106ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	4313      	orrs	r3, r2
 80105f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	4313      	orrs	r3, r2
 8010602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	4313      	orrs	r3, r2
 8010610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4313      	orrs	r3, r2
 801061e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	691b      	ldr	r3, [r3, #16]
 801062a:	4313      	orrs	r3, r2
 801062c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	695b      	ldr	r3, [r3, #20]
 8010638:	4313      	orrs	r3, r2
 801063a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010646:	4313      	orrs	r3, r2
 8010648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	699b      	ldr	r3, [r3, #24]
 8010654:	041b      	lsls	r3, r3, #16
 8010656:	4313      	orrs	r3, r2
 8010658:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	4a16      	ldr	r2, [pc, #88]	; (80106b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d004      	beq.n	801066e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4a14      	ldr	r2, [pc, #80]	; (80106bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d115      	bne.n	801069a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010678:	051b      	lsls	r3, r3, #20
 801067a:	4313      	orrs	r3, r2
 801067c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	69db      	ldr	r3, [r3, #28]
 8010688:	4313      	orrs	r3, r2
 801068a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	6a1b      	ldr	r3, [r3, #32]
 8010696:	4313      	orrs	r3, r2
 8010698:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	68fa      	ldr	r2, [r7, #12]
 80106a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106aa:	2300      	movs	r3, #0
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3714      	adds	r7, #20
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr
 80106b8:	40010000 	.word	0x40010000
 80106bc:	40010400 	.word	0x40010400

080106c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d101      	bne.n	801070e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801070a:	2301      	movs	r3, #1
 801070c:	e040      	b.n	8010790 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7f3 f85e 	bl	80037e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2224      	movs	r2, #36	; 0x24
 8010728:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f022 0201 	bic.w	r2, r2, #1
 8010738:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 f8c0 	bl	80108c0 <UART_SetConfig>
 8010740:	4603      	mov	r3, r0
 8010742:	2b01      	cmp	r3, #1
 8010744:	d101      	bne.n	801074a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010746:	2301      	movs	r3, #1
 8010748:	e022      	b.n	8010790 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 fb16 	bl	8010d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	685a      	ldr	r2, [r3, #4]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	689a      	ldr	r2, [r3, #8]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f042 0201 	orr.w	r2, r2, #1
 8010786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fb9d 	bl	8010ec8 <UART_CheckIdleState>
 801078e:	4603      	mov	r3, r0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08a      	sub	sp, #40	; 0x28
 801079c:	af02      	add	r7, sp, #8
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	603b      	str	r3, [r7, #0]
 80107a4:	4613      	mov	r3, r2
 80107a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107ac:	2b20      	cmp	r3, #32
 80107ae:	f040 8081 	bne.w	80108b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d002      	beq.n	80107be <HAL_UART_Transmit+0x26>
 80107b8:	88fb      	ldrh	r3, [r7, #6]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d101      	bne.n	80107c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80107be:	2301      	movs	r3, #1
 80107c0:	e079      	b.n	80108b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	d101      	bne.n	80107d0 <HAL_UART_Transmit+0x38>
 80107cc:	2302      	movs	r3, #2
 80107ce:	e072      	b.n	80108b6 <HAL_UART_Transmit+0x11e>
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2200      	movs	r2, #0
 80107dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2221      	movs	r2, #33	; 0x21
 80107e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80107e6:	f7f5 fc1b 	bl	8006020 <HAL_GetTick>
 80107ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	88fa      	ldrh	r2, [r7, #6]
 80107f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	88fa      	ldrh	r2, [r7, #6]
 80107f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	689b      	ldr	r3, [r3, #8]
 8010800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010804:	d108      	bne.n	8010818 <HAL_UART_Transmit+0x80>
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	691b      	ldr	r3, [r3, #16]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d104      	bne.n	8010818 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801080e:	2300      	movs	r3, #0
 8010810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	61bb      	str	r3, [r7, #24]
 8010816:	e003      	b.n	8010820 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801081c:	2300      	movs	r3, #0
 801081e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2200      	movs	r2, #0
 8010824:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8010828:	e02c      	b.n	8010884 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2200      	movs	r2, #0
 8010832:	2180      	movs	r1, #128	; 0x80
 8010834:	68f8      	ldr	r0, [r7, #12]
 8010836:	f000 fb7a 	bl	8010f2e <UART_WaitOnFlagUntilTimeout>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8010840:	2303      	movs	r3, #3
 8010842:	e038      	b.n	80108b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d10b      	bne.n	8010862 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	881b      	ldrh	r3, [r3, #0]
 801084e:	461a      	mov	r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010858:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	3302      	adds	r3, #2
 801085e:	61bb      	str	r3, [r7, #24]
 8010860:	e007      	b.n	8010872 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	781a      	ldrb	r2, [r3, #0]
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801086c:	69fb      	ldr	r3, [r7, #28]
 801086e:	3301      	adds	r3, #1
 8010870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010878:	b29b      	uxth	r3, r3
 801087a:	3b01      	subs	r3, #1
 801087c:	b29a      	uxth	r2, r3
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801088a:	b29b      	uxth	r3, r3
 801088c:	2b00      	cmp	r3, #0
 801088e:	d1cc      	bne.n	801082a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	9300      	str	r3, [sp, #0]
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	2200      	movs	r2, #0
 8010898:	2140      	movs	r1, #64	; 0x40
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f000 fb47 	bl	8010f2e <UART_WaitOnFlagUntilTimeout>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d001      	beq.n	80108aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80108a6:	2303      	movs	r3, #3
 80108a8:	e005      	b.n	80108b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2220      	movs	r2, #32
 80108ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80108b0:	2300      	movs	r3, #0
 80108b2:	e000      	b.n	80108b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80108b4:	2302      	movs	r3, #2
  }
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3720      	adds	r7, #32
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
	...

080108c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	689a      	ldr	r2, [r3, #8]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	691b      	ldr	r3, [r3, #16]
 80108d4:	431a      	orrs	r2, r3
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	695b      	ldr	r3, [r3, #20]
 80108da:	431a      	orrs	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	69db      	ldr	r3, [r3, #28]
 80108e0:	4313      	orrs	r3, r2
 80108e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	4ba7      	ldr	r3, [pc, #668]	; (8010b88 <UART_SetConfig+0x2c8>)
 80108ec:	4013      	ands	r3, r2
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	6812      	ldr	r2, [r2, #0]
 80108f2:	6979      	ldr	r1, [r7, #20]
 80108f4:	430b      	orrs	r3, r1
 80108f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	68da      	ldr	r2, [r3, #12]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	430a      	orrs	r2, r1
 801090c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	699b      	ldr	r3, [r3, #24]
 8010912:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a1b      	ldr	r3, [r3, #32]
 8010918:	697a      	ldr	r2, [r7, #20]
 801091a:	4313      	orrs	r3, r2
 801091c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	697a      	ldr	r2, [r7, #20]
 801092e:	430a      	orrs	r2, r1
 8010930:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4a95      	ldr	r2, [pc, #596]	; (8010b8c <UART_SetConfig+0x2cc>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d120      	bne.n	801097e <UART_SetConfig+0xbe>
 801093c:	4b94      	ldr	r3, [pc, #592]	; (8010b90 <UART_SetConfig+0x2d0>)
 801093e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010942:	f003 0303 	and.w	r3, r3, #3
 8010946:	2b03      	cmp	r3, #3
 8010948:	d816      	bhi.n	8010978 <UART_SetConfig+0xb8>
 801094a:	a201      	add	r2, pc, #4	; (adr r2, 8010950 <UART_SetConfig+0x90>)
 801094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010950:	08010961 	.word	0x08010961
 8010954:	0801096d 	.word	0x0801096d
 8010958:	08010967 	.word	0x08010967
 801095c:	08010973 	.word	0x08010973
 8010960:	2301      	movs	r3, #1
 8010962:	77fb      	strb	r3, [r7, #31]
 8010964:	e14f      	b.n	8010c06 <UART_SetConfig+0x346>
 8010966:	2302      	movs	r3, #2
 8010968:	77fb      	strb	r3, [r7, #31]
 801096a:	e14c      	b.n	8010c06 <UART_SetConfig+0x346>
 801096c:	2304      	movs	r3, #4
 801096e:	77fb      	strb	r3, [r7, #31]
 8010970:	e149      	b.n	8010c06 <UART_SetConfig+0x346>
 8010972:	2308      	movs	r3, #8
 8010974:	77fb      	strb	r3, [r7, #31]
 8010976:	e146      	b.n	8010c06 <UART_SetConfig+0x346>
 8010978:	2310      	movs	r3, #16
 801097a:	77fb      	strb	r3, [r7, #31]
 801097c:	e143      	b.n	8010c06 <UART_SetConfig+0x346>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4a84      	ldr	r2, [pc, #528]	; (8010b94 <UART_SetConfig+0x2d4>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d132      	bne.n	80109ee <UART_SetConfig+0x12e>
 8010988:	4b81      	ldr	r3, [pc, #516]	; (8010b90 <UART_SetConfig+0x2d0>)
 801098a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801098e:	f003 030c 	and.w	r3, r3, #12
 8010992:	2b0c      	cmp	r3, #12
 8010994:	d828      	bhi.n	80109e8 <UART_SetConfig+0x128>
 8010996:	a201      	add	r2, pc, #4	; (adr r2, 801099c <UART_SetConfig+0xdc>)
 8010998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801099c:	080109d1 	.word	0x080109d1
 80109a0:	080109e9 	.word	0x080109e9
 80109a4:	080109e9 	.word	0x080109e9
 80109a8:	080109e9 	.word	0x080109e9
 80109ac:	080109dd 	.word	0x080109dd
 80109b0:	080109e9 	.word	0x080109e9
 80109b4:	080109e9 	.word	0x080109e9
 80109b8:	080109e9 	.word	0x080109e9
 80109bc:	080109d7 	.word	0x080109d7
 80109c0:	080109e9 	.word	0x080109e9
 80109c4:	080109e9 	.word	0x080109e9
 80109c8:	080109e9 	.word	0x080109e9
 80109cc:	080109e3 	.word	0x080109e3
 80109d0:	2300      	movs	r3, #0
 80109d2:	77fb      	strb	r3, [r7, #31]
 80109d4:	e117      	b.n	8010c06 <UART_SetConfig+0x346>
 80109d6:	2302      	movs	r3, #2
 80109d8:	77fb      	strb	r3, [r7, #31]
 80109da:	e114      	b.n	8010c06 <UART_SetConfig+0x346>
 80109dc:	2304      	movs	r3, #4
 80109de:	77fb      	strb	r3, [r7, #31]
 80109e0:	e111      	b.n	8010c06 <UART_SetConfig+0x346>
 80109e2:	2308      	movs	r3, #8
 80109e4:	77fb      	strb	r3, [r7, #31]
 80109e6:	e10e      	b.n	8010c06 <UART_SetConfig+0x346>
 80109e8:	2310      	movs	r3, #16
 80109ea:	77fb      	strb	r3, [r7, #31]
 80109ec:	e10b      	b.n	8010c06 <UART_SetConfig+0x346>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4a69      	ldr	r2, [pc, #420]	; (8010b98 <UART_SetConfig+0x2d8>)
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d120      	bne.n	8010a3a <UART_SetConfig+0x17a>
 80109f8:	4b65      	ldr	r3, [pc, #404]	; (8010b90 <UART_SetConfig+0x2d0>)
 80109fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010a02:	2b30      	cmp	r3, #48	; 0x30
 8010a04:	d013      	beq.n	8010a2e <UART_SetConfig+0x16e>
 8010a06:	2b30      	cmp	r3, #48	; 0x30
 8010a08:	d814      	bhi.n	8010a34 <UART_SetConfig+0x174>
 8010a0a:	2b20      	cmp	r3, #32
 8010a0c:	d009      	beq.n	8010a22 <UART_SetConfig+0x162>
 8010a0e:	2b20      	cmp	r3, #32
 8010a10:	d810      	bhi.n	8010a34 <UART_SetConfig+0x174>
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d002      	beq.n	8010a1c <UART_SetConfig+0x15c>
 8010a16:	2b10      	cmp	r3, #16
 8010a18:	d006      	beq.n	8010a28 <UART_SetConfig+0x168>
 8010a1a:	e00b      	b.n	8010a34 <UART_SetConfig+0x174>
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	77fb      	strb	r3, [r7, #31]
 8010a20:	e0f1      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a22:	2302      	movs	r3, #2
 8010a24:	77fb      	strb	r3, [r7, #31]
 8010a26:	e0ee      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a28:	2304      	movs	r3, #4
 8010a2a:	77fb      	strb	r3, [r7, #31]
 8010a2c:	e0eb      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a2e:	2308      	movs	r3, #8
 8010a30:	77fb      	strb	r3, [r7, #31]
 8010a32:	e0e8      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a34:	2310      	movs	r3, #16
 8010a36:	77fb      	strb	r3, [r7, #31]
 8010a38:	e0e5      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a57      	ldr	r2, [pc, #348]	; (8010b9c <UART_SetConfig+0x2dc>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d120      	bne.n	8010a86 <UART_SetConfig+0x1c6>
 8010a44:	4b52      	ldr	r3, [pc, #328]	; (8010b90 <UART_SetConfig+0x2d0>)
 8010a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8010a50:	d013      	beq.n	8010a7a <UART_SetConfig+0x1ba>
 8010a52:	2bc0      	cmp	r3, #192	; 0xc0
 8010a54:	d814      	bhi.n	8010a80 <UART_SetConfig+0x1c0>
 8010a56:	2b80      	cmp	r3, #128	; 0x80
 8010a58:	d009      	beq.n	8010a6e <UART_SetConfig+0x1ae>
 8010a5a:	2b80      	cmp	r3, #128	; 0x80
 8010a5c:	d810      	bhi.n	8010a80 <UART_SetConfig+0x1c0>
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d002      	beq.n	8010a68 <UART_SetConfig+0x1a8>
 8010a62:	2b40      	cmp	r3, #64	; 0x40
 8010a64:	d006      	beq.n	8010a74 <UART_SetConfig+0x1b4>
 8010a66:	e00b      	b.n	8010a80 <UART_SetConfig+0x1c0>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	77fb      	strb	r3, [r7, #31]
 8010a6c:	e0cb      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a6e:	2302      	movs	r3, #2
 8010a70:	77fb      	strb	r3, [r7, #31]
 8010a72:	e0c8      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a74:	2304      	movs	r3, #4
 8010a76:	77fb      	strb	r3, [r7, #31]
 8010a78:	e0c5      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a7a:	2308      	movs	r3, #8
 8010a7c:	77fb      	strb	r3, [r7, #31]
 8010a7e:	e0c2      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a80:	2310      	movs	r3, #16
 8010a82:	77fb      	strb	r3, [r7, #31]
 8010a84:	e0bf      	b.n	8010c06 <UART_SetConfig+0x346>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a45      	ldr	r2, [pc, #276]	; (8010ba0 <UART_SetConfig+0x2e0>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d125      	bne.n	8010adc <UART_SetConfig+0x21c>
 8010a90:	4b3f      	ldr	r3, [pc, #252]	; (8010b90 <UART_SetConfig+0x2d0>)
 8010a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a9e:	d017      	beq.n	8010ad0 <UART_SetConfig+0x210>
 8010aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010aa4:	d817      	bhi.n	8010ad6 <UART_SetConfig+0x216>
 8010aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010aaa:	d00b      	beq.n	8010ac4 <UART_SetConfig+0x204>
 8010aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ab0:	d811      	bhi.n	8010ad6 <UART_SetConfig+0x216>
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d003      	beq.n	8010abe <UART_SetConfig+0x1fe>
 8010ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010aba:	d006      	beq.n	8010aca <UART_SetConfig+0x20a>
 8010abc:	e00b      	b.n	8010ad6 <UART_SetConfig+0x216>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	77fb      	strb	r3, [r7, #31]
 8010ac2:	e0a0      	b.n	8010c06 <UART_SetConfig+0x346>
 8010ac4:	2302      	movs	r3, #2
 8010ac6:	77fb      	strb	r3, [r7, #31]
 8010ac8:	e09d      	b.n	8010c06 <UART_SetConfig+0x346>
 8010aca:	2304      	movs	r3, #4
 8010acc:	77fb      	strb	r3, [r7, #31]
 8010ace:	e09a      	b.n	8010c06 <UART_SetConfig+0x346>
 8010ad0:	2308      	movs	r3, #8
 8010ad2:	77fb      	strb	r3, [r7, #31]
 8010ad4:	e097      	b.n	8010c06 <UART_SetConfig+0x346>
 8010ad6:	2310      	movs	r3, #16
 8010ad8:	77fb      	strb	r3, [r7, #31]
 8010ada:	e094      	b.n	8010c06 <UART_SetConfig+0x346>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a30      	ldr	r2, [pc, #192]	; (8010ba4 <UART_SetConfig+0x2e4>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d125      	bne.n	8010b32 <UART_SetConfig+0x272>
 8010ae6:	4b2a      	ldr	r3, [pc, #168]	; (8010b90 <UART_SetConfig+0x2d0>)
 8010ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010aec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010af4:	d017      	beq.n	8010b26 <UART_SetConfig+0x266>
 8010af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010afa:	d817      	bhi.n	8010b2c <UART_SetConfig+0x26c>
 8010afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b00:	d00b      	beq.n	8010b1a <UART_SetConfig+0x25a>
 8010b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b06:	d811      	bhi.n	8010b2c <UART_SetConfig+0x26c>
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d003      	beq.n	8010b14 <UART_SetConfig+0x254>
 8010b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b10:	d006      	beq.n	8010b20 <UART_SetConfig+0x260>
 8010b12:	e00b      	b.n	8010b2c <UART_SetConfig+0x26c>
 8010b14:	2301      	movs	r3, #1
 8010b16:	77fb      	strb	r3, [r7, #31]
 8010b18:	e075      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b1a:	2302      	movs	r3, #2
 8010b1c:	77fb      	strb	r3, [r7, #31]
 8010b1e:	e072      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b20:	2304      	movs	r3, #4
 8010b22:	77fb      	strb	r3, [r7, #31]
 8010b24:	e06f      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b26:	2308      	movs	r3, #8
 8010b28:	77fb      	strb	r3, [r7, #31]
 8010b2a:	e06c      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b2c:	2310      	movs	r3, #16
 8010b2e:	77fb      	strb	r3, [r7, #31]
 8010b30:	e069      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4a1c      	ldr	r2, [pc, #112]	; (8010ba8 <UART_SetConfig+0x2e8>)
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d137      	bne.n	8010bac <UART_SetConfig+0x2ec>
 8010b3c:	4b14      	ldr	r3, [pc, #80]	; (8010b90 <UART_SetConfig+0x2d0>)
 8010b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010b46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010b4a:	d017      	beq.n	8010b7c <UART_SetConfig+0x2bc>
 8010b4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010b50:	d817      	bhi.n	8010b82 <UART_SetConfig+0x2c2>
 8010b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b56:	d00b      	beq.n	8010b70 <UART_SetConfig+0x2b0>
 8010b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b5c:	d811      	bhi.n	8010b82 <UART_SetConfig+0x2c2>
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d003      	beq.n	8010b6a <UART_SetConfig+0x2aa>
 8010b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b66:	d006      	beq.n	8010b76 <UART_SetConfig+0x2b6>
 8010b68:	e00b      	b.n	8010b82 <UART_SetConfig+0x2c2>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	77fb      	strb	r3, [r7, #31]
 8010b6e:	e04a      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b70:	2302      	movs	r3, #2
 8010b72:	77fb      	strb	r3, [r7, #31]
 8010b74:	e047      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b76:	2304      	movs	r3, #4
 8010b78:	77fb      	strb	r3, [r7, #31]
 8010b7a:	e044      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b7c:	2308      	movs	r3, #8
 8010b7e:	77fb      	strb	r3, [r7, #31]
 8010b80:	e041      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b82:	2310      	movs	r3, #16
 8010b84:	77fb      	strb	r3, [r7, #31]
 8010b86:	e03e      	b.n	8010c06 <UART_SetConfig+0x346>
 8010b88:	efff69f3 	.word	0xefff69f3
 8010b8c:	40011000 	.word	0x40011000
 8010b90:	40023800 	.word	0x40023800
 8010b94:	40004400 	.word	0x40004400
 8010b98:	40004800 	.word	0x40004800
 8010b9c:	40004c00 	.word	0x40004c00
 8010ba0:	40005000 	.word	0x40005000
 8010ba4:	40011400 	.word	0x40011400
 8010ba8:	40007800 	.word	0x40007800
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4a71      	ldr	r2, [pc, #452]	; (8010d78 <UART_SetConfig+0x4b8>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d125      	bne.n	8010c02 <UART_SetConfig+0x342>
 8010bb6:	4b71      	ldr	r3, [pc, #452]	; (8010d7c <UART_SetConfig+0x4bc>)
 8010bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010bc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010bc4:	d017      	beq.n	8010bf6 <UART_SetConfig+0x336>
 8010bc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010bca:	d817      	bhi.n	8010bfc <UART_SetConfig+0x33c>
 8010bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bd0:	d00b      	beq.n	8010bea <UART_SetConfig+0x32a>
 8010bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bd6:	d811      	bhi.n	8010bfc <UART_SetConfig+0x33c>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d003      	beq.n	8010be4 <UART_SetConfig+0x324>
 8010bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010be0:	d006      	beq.n	8010bf0 <UART_SetConfig+0x330>
 8010be2:	e00b      	b.n	8010bfc <UART_SetConfig+0x33c>
 8010be4:	2300      	movs	r3, #0
 8010be6:	77fb      	strb	r3, [r7, #31]
 8010be8:	e00d      	b.n	8010c06 <UART_SetConfig+0x346>
 8010bea:	2302      	movs	r3, #2
 8010bec:	77fb      	strb	r3, [r7, #31]
 8010bee:	e00a      	b.n	8010c06 <UART_SetConfig+0x346>
 8010bf0:	2304      	movs	r3, #4
 8010bf2:	77fb      	strb	r3, [r7, #31]
 8010bf4:	e007      	b.n	8010c06 <UART_SetConfig+0x346>
 8010bf6:	2308      	movs	r3, #8
 8010bf8:	77fb      	strb	r3, [r7, #31]
 8010bfa:	e004      	b.n	8010c06 <UART_SetConfig+0x346>
 8010bfc:	2310      	movs	r3, #16
 8010bfe:	77fb      	strb	r3, [r7, #31]
 8010c00:	e001      	b.n	8010c06 <UART_SetConfig+0x346>
 8010c02:	2310      	movs	r3, #16
 8010c04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	69db      	ldr	r3, [r3, #28]
 8010c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c0e:	d15b      	bne.n	8010cc8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8010c10:	7ffb      	ldrb	r3, [r7, #31]
 8010c12:	2b08      	cmp	r3, #8
 8010c14:	d827      	bhi.n	8010c66 <UART_SetConfig+0x3a6>
 8010c16:	a201      	add	r2, pc, #4	; (adr r2, 8010c1c <UART_SetConfig+0x35c>)
 8010c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c1c:	08010c41 	.word	0x08010c41
 8010c20:	08010c49 	.word	0x08010c49
 8010c24:	08010c51 	.word	0x08010c51
 8010c28:	08010c67 	.word	0x08010c67
 8010c2c:	08010c57 	.word	0x08010c57
 8010c30:	08010c67 	.word	0x08010c67
 8010c34:	08010c67 	.word	0x08010c67
 8010c38:	08010c67 	.word	0x08010c67
 8010c3c:	08010c5f 	.word	0x08010c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c40:	f7fb fd9e 	bl	800c780 <HAL_RCC_GetPCLK1Freq>
 8010c44:	61b8      	str	r0, [r7, #24]
        break;
 8010c46:	e013      	b.n	8010c70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c48:	f7fb fdae 	bl	800c7a8 <HAL_RCC_GetPCLK2Freq>
 8010c4c:	61b8      	str	r0, [r7, #24]
        break;
 8010c4e:	e00f      	b.n	8010c70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c50:	4b4b      	ldr	r3, [pc, #300]	; (8010d80 <UART_SetConfig+0x4c0>)
 8010c52:	61bb      	str	r3, [r7, #24]
        break;
 8010c54:	e00c      	b.n	8010c70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c56:	f7fb fcd1 	bl	800c5fc <HAL_RCC_GetSysClockFreq>
 8010c5a:	61b8      	str	r0, [r7, #24]
        break;
 8010c5c:	e008      	b.n	8010c70 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c62:	61bb      	str	r3, [r7, #24]
        break;
 8010c64:	e004      	b.n	8010c70 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8010c66:	2300      	movs	r3, #0
 8010c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	77bb      	strb	r3, [r7, #30]
        break;
 8010c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d074      	beq.n	8010d60 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010c76:	69bb      	ldr	r3, [r7, #24]
 8010c78:	005a      	lsls	r2, r3, #1
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	085b      	lsrs	r3, r3, #1
 8010c80:	441a      	add	r2, r3
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	2b0f      	cmp	r3, #15
 8010c92:	d916      	bls.n	8010cc2 <UART_SetConfig+0x402>
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c9a:	d212      	bcs.n	8010cc2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	f023 030f 	bic.w	r3, r3, #15
 8010ca4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	085b      	lsrs	r3, r3, #1
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	f003 0307 	and.w	r3, r3, #7
 8010cb0:	b29a      	uxth	r2, r3
 8010cb2:	89fb      	ldrh	r3, [r7, #14]
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	89fa      	ldrh	r2, [r7, #14]
 8010cbe:	60da      	str	r2, [r3, #12]
 8010cc0:	e04e      	b.n	8010d60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	77bb      	strb	r3, [r7, #30]
 8010cc6:	e04b      	b.n	8010d60 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010cc8:	7ffb      	ldrb	r3, [r7, #31]
 8010cca:	2b08      	cmp	r3, #8
 8010ccc:	d827      	bhi.n	8010d1e <UART_SetConfig+0x45e>
 8010cce:	a201      	add	r2, pc, #4	; (adr r2, 8010cd4 <UART_SetConfig+0x414>)
 8010cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd4:	08010cf9 	.word	0x08010cf9
 8010cd8:	08010d01 	.word	0x08010d01
 8010cdc:	08010d09 	.word	0x08010d09
 8010ce0:	08010d1f 	.word	0x08010d1f
 8010ce4:	08010d0f 	.word	0x08010d0f
 8010ce8:	08010d1f 	.word	0x08010d1f
 8010cec:	08010d1f 	.word	0x08010d1f
 8010cf0:	08010d1f 	.word	0x08010d1f
 8010cf4:	08010d17 	.word	0x08010d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010cf8:	f7fb fd42 	bl	800c780 <HAL_RCC_GetPCLK1Freq>
 8010cfc:	61b8      	str	r0, [r7, #24]
        break;
 8010cfe:	e013      	b.n	8010d28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d00:	f7fb fd52 	bl	800c7a8 <HAL_RCC_GetPCLK2Freq>
 8010d04:	61b8      	str	r0, [r7, #24]
        break;
 8010d06:	e00f      	b.n	8010d28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d08:	4b1d      	ldr	r3, [pc, #116]	; (8010d80 <UART_SetConfig+0x4c0>)
 8010d0a:	61bb      	str	r3, [r7, #24]
        break;
 8010d0c:	e00c      	b.n	8010d28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d0e:	f7fb fc75 	bl	800c5fc <HAL_RCC_GetSysClockFreq>
 8010d12:	61b8      	str	r0, [r7, #24]
        break;
 8010d14:	e008      	b.n	8010d28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d1a:	61bb      	str	r3, [r7, #24]
        break;
 8010d1c:	e004      	b.n	8010d28 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010d22:	2301      	movs	r3, #1
 8010d24:	77bb      	strb	r3, [r7, #30]
        break;
 8010d26:	bf00      	nop
    }

    if (pclk != 0U)
 8010d28:	69bb      	ldr	r3, [r7, #24]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d018      	beq.n	8010d60 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	685b      	ldr	r3, [r3, #4]
 8010d32:	085a      	lsrs	r2, r3, #1
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	441a      	add	r2, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	2b0f      	cmp	r3, #15
 8010d48:	d908      	bls.n	8010d5c <UART_SetConfig+0x49c>
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d50:	d204      	bcs.n	8010d5c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	693a      	ldr	r2, [r7, #16]
 8010d58:	60da      	str	r2, [r3, #12]
 8010d5a:	e001      	b.n	8010d60 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010d6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3720      	adds	r7, #32
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	40007c00 	.word	0x40007c00
 8010d7c:	40023800 	.word	0x40023800
 8010d80:	00f42400 	.word	0x00f42400

08010d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d90:	f003 0301 	and.w	r3, r3, #1
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00a      	beq.n	8010dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	430a      	orrs	r2, r1
 8010dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db2:	f003 0302 	and.w	r3, r3, #2
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00a      	beq.n	8010dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	430a      	orrs	r2, r1
 8010dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd4:	f003 0304 	and.w	r3, r3, #4
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00a      	beq.n	8010df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	430a      	orrs	r2, r1
 8010df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df6:	f003 0308 	and.w	r3, r3, #8
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00a      	beq.n	8010e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	430a      	orrs	r2, r1
 8010e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e18:	f003 0310 	and.w	r3, r3, #16
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00a      	beq.n	8010e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	430a      	orrs	r2, r1
 8010e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e3a:	f003 0320 	and.w	r3, r3, #32
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00a      	beq.n	8010e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	430a      	orrs	r2, r1
 8010e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d01a      	beq.n	8010e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	685b      	ldr	r3, [r3, #4]
 8010e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	430a      	orrs	r2, r1
 8010e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e82:	d10a      	bne.n	8010e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	430a      	orrs	r2, r1
 8010e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d00a      	beq.n	8010ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	430a      	orrs	r2, r1
 8010eba:	605a      	str	r2, [r3, #4]
  }
}
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b086      	sub	sp, #24
 8010ecc:	af02      	add	r7, sp, #8
 8010ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ed8:	f7f5 f8a2 	bl	8006020 <HAL_GetTick>
 8010edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f003 0308 	and.w	r3, r3, #8
 8010ee8:	2b08      	cmp	r3, #8
 8010eea:	d10e      	bne.n	8010f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 f817 	bl	8010f2e <UART_WaitOnFlagUntilTimeout>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d001      	beq.n	8010f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f06:	2303      	movs	r3, #3
 8010f08:	e00d      	b.n	8010f26 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2220      	movs	r2, #32
 8010f0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2220      	movs	r2, #32
 8010f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010f24:	2300      	movs	r3, #0
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}

08010f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b084      	sub	sp, #16
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	60f8      	str	r0, [r7, #12]
 8010f36:	60b9      	str	r1, [r7, #8]
 8010f38:	603b      	str	r3, [r7, #0]
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f3e:	e05e      	b.n	8010ffe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f46:	d05a      	beq.n	8010ffe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f48:	f7f5 f86a 	bl	8006020 <HAL_GetTick>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	1ad3      	subs	r3, r2, r3
 8010f52:	69ba      	ldr	r2, [r7, #24]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d302      	bcc.n	8010f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d11b      	bne.n	8010f96 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010f6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	689a      	ldr	r2, [r3, #8]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f022 0201 	bic.w	r2, r2, #1
 8010f7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2220      	movs	r2, #32
 8010f82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2220      	movs	r2, #32
 8010f88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010f92:	2303      	movs	r3, #3
 8010f94:	e043      	b.n	801101e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f003 0304 	and.w	r3, r3, #4
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d02c      	beq.n	8010ffe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	69db      	ldr	r3, [r3, #28]
 8010faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010fb2:	d124      	bne.n	8010ffe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010fbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010fcc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	689a      	ldr	r2, [r3, #8]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f022 0201 	bic.w	r2, r2, #1
 8010fdc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2220      	movs	r2, #32
 8010fe2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2220      	movs	r2, #32
 8010fe8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2220      	movs	r2, #32
 8010fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010ffa:	2303      	movs	r3, #3
 8010ffc:	e00f      	b.n	801101e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	69da      	ldr	r2, [r3, #28]
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	4013      	ands	r3, r2
 8011008:	68ba      	ldr	r2, [r7, #8]
 801100a:	429a      	cmp	r2, r3
 801100c:	bf0c      	ite	eq
 801100e:	2301      	moveq	r3, #1
 8011010:	2300      	movne	r3, #0
 8011012:	b2db      	uxtb	r3, r3
 8011014:	461a      	mov	r2, r3
 8011016:	79fb      	ldrb	r3, [r7, #7]
 8011018:	429a      	cmp	r2, r3
 801101a:	d091      	beq.n	8010f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
	...

08011028 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011028:	b480      	push	{r7}
 801102a:	b085      	sub	sp, #20
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8011032:	2300      	movs	r3, #0
 8011034:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8011036:	2300      	movs	r3, #0
 8011038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	2b01      	cmp	r3, #1
 8011040:	d027      	beq.n	8011092 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	4b2f      	ldr	r3, [pc, #188]	; (8011108 <FMC_SDRAM_Init+0xe0>)
 801104c:	4013      	ands	r3, r2
 801104e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011058:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 801105e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8011064:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 801106a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8011070:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8011076:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 801107c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8011082:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8011084:	68fa      	ldr	r2, [r7, #12]
 8011086:	4313      	orrs	r3, r2
 8011088:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	68fa      	ldr	r2, [r7, #12]
 801108e:	601a      	str	r2, [r3, #0]
 8011090:	e032      	b.n	80110f8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801109e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80110a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80110ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80110b0:	68fa      	ldr	r2, [r7, #12]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	4b12      	ldr	r3, [pc, #72]	; (8011108 <FMC_SDRAM_Init+0xe0>)
 80110c0:	4013      	ands	r3, r2
 80110c2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80110cc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80110d2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80110d8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80110de:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80110e4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80110e6:	68ba      	ldr	r2, [r7, #8]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	68fa      	ldr	r2, [r7, #12]
 80110f0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	68ba      	ldr	r2, [r7, #8]
 80110f6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80110f8:	2300      	movs	r3, #0
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3714      	adds	r7, #20
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr
 8011106:	bf00      	nop
 8011108:	ffff8000 	.word	0xffff8000

0801110c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801110c:	b480      	push	{r7}
 801110e:	b087      	sub	sp, #28
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8011118:	2300      	movs	r3, #0
 801111a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 801111c:	2300      	movs	r3, #0
 801111e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d02e      	beq.n	8011184 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	689b      	ldr	r3, [r3, #8]
 801112a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011132:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	3b01      	subs	r3, #1
 8011140:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011142:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	689b      	ldr	r3, [r3, #8]
 8011148:	3b01      	subs	r3, #1
 801114a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 801114c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	3b01      	subs	r3, #1
 8011154:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8011156:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	3b01      	subs	r3, #1
 801115e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8011160:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	3b01      	subs	r3, #1
 8011168:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 801116a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	699b      	ldr	r3, [r3, #24]
 8011170:	3b01      	subs	r3, #1
 8011172:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8011174:	4313      	orrs	r3, r2
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	4313      	orrs	r3, r2
 801117a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	697a      	ldr	r2, [r7, #20]
 8011180:	609a      	str	r2, [r3, #8]
 8011182:	e039      	b.n	80111f8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	689b      	ldr	r3, [r3, #8]
 8011188:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801118a:	697a      	ldr	r2, [r7, #20]
 801118c:	4b1e      	ldr	r3, [pc, #120]	; (8011208 <FMC_SDRAM_Timing_Init+0xfc>)
 801118e:	4013      	ands	r3, r2
 8011190:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	3b01      	subs	r3, #1
 8011198:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	695b      	ldr	r3, [r3, #20]
 801119e:	3b01      	subs	r3, #1
 80111a0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80111a2:	4313      	orrs	r3, r2
 80111a4:	697a      	ldr	r2, [r7, #20]
 80111a6:	4313      	orrs	r3, r2
 80111a8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80111b6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	3b01      	subs	r3, #1
 80111c4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	689b      	ldr	r3, [r3, #8]
 80111cc:	3b01      	subs	r3, #1
 80111ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80111d0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	691b      	ldr	r3, [r3, #16]
 80111d6:	3b01      	subs	r3, #1
 80111d8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80111da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	699b      	ldr	r3, [r3, #24]
 80111e0:	3b01      	subs	r3, #1
 80111e2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80111e4:	4313      	orrs	r3, r2
 80111e6:	693a      	ldr	r2, [r7, #16]
 80111e8:	4313      	orrs	r3, r2
 80111ea:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	697a      	ldr	r2, [r7, #20]
 80111f0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	693a      	ldr	r2, [r7, #16]
 80111f6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	371c      	adds	r7, #28
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	ff0f0fff 	.word	0xff0f0fff

0801120c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 801120c:	b480      	push	{r7}
 801120e:	b085      	sub	sp, #20
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	691a      	ldr	r2, [r3, #16]
 801121c:	4b0c      	ldr	r3, [pc, #48]	; (8011250 <FMC_SDRAM_SendCommand+0x44>)
 801121e:	4013      	ands	r3, r2
 8011220:	68ba      	ldr	r2, [r7, #8]
 8011222:	6811      	ldr	r1, [r2, #0]
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	6852      	ldr	r2, [r2, #4]
 8011228:	4311      	orrs	r1, r2
 801122a:	68ba      	ldr	r2, [r7, #8]
 801122c:	6892      	ldr	r2, [r2, #8]
 801122e:	3a01      	subs	r2, #1
 8011230:	0152      	lsls	r2, r2, #5
 8011232:	4311      	orrs	r1, r2
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	68d2      	ldr	r2, [r2, #12]
 8011238:	0252      	lsls	r2, r2, #9
 801123a:	430a      	orrs	r2, r1
 801123c:	431a      	orrs	r2, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	3714      	adds	r7, #20
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	ffc00000 	.word	0xffc00000

08011254 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	695a      	ldr	r2, [r3, #20]
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	005b      	lsls	r3, r3, #1
 8011266:	431a      	orrs	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 801126c:	2300      	movs	r3, #0
}
 801126e:	4618      	mov	r0, r3
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
	...

0801127c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801127c:	b084      	sub	sp, #16
 801127e:	b480      	push	{r7}
 8011280:	b085      	sub	sp, #20
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
 8011286:	f107 001c 	add.w	r0, r7, #28
 801128a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801128e:	2300      	movs	r3, #0
 8011290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011292:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011294:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011296:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801129a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801129e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80112a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80112a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80112a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80112a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	4313      	orrs	r3, r2
 80112ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	685a      	ldr	r2, [r3, #4]
 80112b2:	4b07      	ldr	r3, [pc, #28]	; (80112d0 <SDMMC_Init+0x54>)
 80112b4:	4013      	ands	r3, r2
 80112b6:	68fa      	ldr	r2, [r7, #12]
 80112b8:	431a      	orrs	r2, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80112be:	2300      	movs	r3, #0
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3714      	adds	r7, #20
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	b004      	add	sp, #16
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	ffff8100 	.word	0xffff8100

080112d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	370c      	adds	r7, #12
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr

080112ee <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b082      	sub	sp, #8
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2203      	movs	r2, #3
 80112fa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80112fc:	2002      	movs	r0, #2
 80112fe:	f7f4 fe9b 	bl	8006038 <HAL_Delay>
  
  return HAL_OK;
 8011302:	2300      	movs	r3, #0
}
 8011304:	4618      	mov	r0, r3
 8011306:	3708      	adds	r7, #8
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f003 0303 	and.w	r3, r3, #3
}
 801131c:	4618      	mov	r0, r3
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011346:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801134c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011352:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011354:	68fa      	ldr	r2, [r7, #12]
 8011356:	4313      	orrs	r3, r2
 8011358:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	68da      	ldr	r2, [r3, #12]
 801135e:	4b06      	ldr	r3, [pc, #24]	; (8011378 <SDMMC_SendCommand+0x50>)
 8011360:	4013      	ands	r3, r2
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	431a      	orrs	r2, r3
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	3714      	adds	r7, #20
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr
 8011378:	fffff000 	.word	0xfffff000

0801137c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	691b      	ldr	r3, [r3, #16]
 8011388:	b2db      	uxtb	r3, r3
}
 801138a:	4618      	mov	r0, r3
 801138c:	370c      	adds	r7, #12
 801138e:	46bd      	mov	sp, r7
 8011390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011394:	4770      	bx	lr

08011396 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011396:	b480      	push	{r7}
 8011398:	b085      	sub	sp, #20
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
 801139e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	3314      	adds	r3, #20
 80113a4:	461a      	mov	r2, r3
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	4413      	add	r3, r2
 80113aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
}  
 80113b0:	4618      	mov	r0, r3
 80113b2:	3714      	adds	r7, #20
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	685a      	ldr	r2, [r3, #4]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80113e2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80113e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80113ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	4313      	orrs	r3, r2
 80113f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	431a      	orrs	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011406:	2300      	movs	r3, #0

}
 8011408:	4618      	mov	r0, r3
 801140a:	3714      	adds	r7, #20
 801140c:	46bd      	mov	sp, r7
 801140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011412:	4770      	bx	lr

08011414 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b088      	sub	sp, #32
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011422:	2310      	movs	r3, #16
 8011424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011426:	2340      	movs	r3, #64	; 0x40
 8011428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801142a:	2300      	movs	r3, #0
 801142c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011434:	f107 0308 	add.w	r3, r7, #8
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7ff ff74 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011440:	f241 3288 	movw	r2, #5000	; 0x1388
 8011444:	2110      	movs	r1, #16
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 fa46 	bl	80118d8 <SDMMC_GetCmdResp1>
 801144c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801144e:	69fb      	ldr	r3, [r7, #28]
}
 8011450:	4618      	mov	r0, r3
 8011452:	3720      	adds	r7, #32
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b088      	sub	sp, #32
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011466:	2311      	movs	r3, #17
 8011468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801146a:	2340      	movs	r3, #64	; 0x40
 801146c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801146e:	2300      	movs	r3, #0
 8011470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011478:	f107 0308 	add.w	r3, r7, #8
 801147c:	4619      	mov	r1, r3
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7ff ff52 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011484:	f241 3288 	movw	r2, #5000	; 0x1388
 8011488:	2111      	movs	r1, #17
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 fa24 	bl	80118d8 <SDMMC_GetCmdResp1>
 8011490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011492:	69fb      	ldr	r3, [r7, #28]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3720      	adds	r7, #32
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b088      	sub	sp, #32
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80114aa:	2312      	movs	r3, #18
 80114ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114ae:	2340      	movs	r3, #64	; 0x40
 80114b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114b2:	2300      	movs	r3, #0
 80114b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114bc:	f107 0308 	add.w	r3, r7, #8
 80114c0:	4619      	mov	r1, r3
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7ff ff30 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80114c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80114cc:	2112      	movs	r1, #18
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f000 fa02 	bl	80118d8 <SDMMC_GetCmdResp1>
 80114d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114d6:	69fb      	ldr	r3, [r7, #28]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3720      	adds	r7, #32
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b088      	sub	sp, #32
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80114ee:	2318      	movs	r3, #24
 80114f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114f2:	2340      	movs	r3, #64	; 0x40
 80114f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114f6:	2300      	movs	r3, #0
 80114f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011500:	f107 0308 	add.w	r3, r7, #8
 8011504:	4619      	mov	r1, r3
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f7ff ff0e 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801150c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011510:	2118      	movs	r1, #24
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 f9e0 	bl	80118d8 <SDMMC_GetCmdResp1>
 8011518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801151a:	69fb      	ldr	r3, [r7, #28]
}
 801151c:	4618      	mov	r0, r3
 801151e:	3720      	adds	r7, #32
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b088      	sub	sp, #32
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011532:	2319      	movs	r3, #25
 8011534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011536:	2340      	movs	r3, #64	; 0x40
 8011538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801153a:	2300      	movs	r3, #0
 801153c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801153e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011544:	f107 0308 	add.w	r3, r7, #8
 8011548:	4619      	mov	r1, r3
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7ff feec 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011550:	f241 3288 	movw	r2, #5000	; 0x1388
 8011554:	2119      	movs	r1, #25
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 f9be 	bl	80118d8 <SDMMC_GetCmdResp1>
 801155c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801155e:	69fb      	ldr	r3, [r7, #28]
}
 8011560:	4618      	mov	r0, r3
 8011562:	3720      	adds	r7, #32
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}

08011568 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b088      	sub	sp, #32
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011570:	2300      	movs	r3, #0
 8011572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011574:	230c      	movs	r3, #12
 8011576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011578:	2340      	movs	r3, #64	; 0x40
 801157a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801157c:	2300      	movs	r3, #0
 801157e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011584:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011586:	f107 0308 	add.w	r3, r7, #8
 801158a:	4619      	mov	r1, r3
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7ff fecb 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011592:	4a05      	ldr	r2, [pc, #20]	; (80115a8 <SDMMC_CmdStopTransfer+0x40>)
 8011594:	210c      	movs	r1, #12
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f000 f99e 	bl	80118d8 <SDMMC_GetCmdResp1>
 801159c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801159e:	69fb      	ldr	r3, [r7, #28]
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3720      	adds	r7, #32
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	05f5e100 	.word	0x05f5e100

080115ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b08a      	sub	sp, #40	; 0x28
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80115bc:	2307      	movs	r3, #7
 80115be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115c0:	2340      	movs	r3, #64	; 0x40
 80115c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115c4:	2300      	movs	r3, #0
 80115c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115cc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115ce:	f107 0310 	add.w	r3, r7, #16
 80115d2:	4619      	mov	r1, r3
 80115d4:	68f8      	ldr	r0, [r7, #12]
 80115d6:	f7ff fea7 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80115da:	f241 3288 	movw	r2, #5000	; 0x1388
 80115de:	2107      	movs	r1, #7
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f000 f979 	bl	80118d8 <SDMMC_GetCmdResp1>
 80115e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3728      	adds	r7, #40	; 0x28
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b088      	sub	sp, #32
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80115fa:	2300      	movs	r3, #0
 80115fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80115fe:	2300      	movs	r3, #0
 8011600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011602:	2300      	movs	r3, #0
 8011604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011606:	2300      	movs	r3, #0
 8011608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801160a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801160e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011610:	f107 0308 	add.w	r3, r7, #8
 8011614:	4619      	mov	r1, r3
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7ff fe86 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 f92f 	bl	8011880 <SDMMC_GetCmdError>
 8011622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011624:	69fb      	ldr	r3, [r7, #28]
}
 8011626:	4618      	mov	r0, r3
 8011628:	3720      	adds	r7, #32
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801162e:	b580      	push	{r7, lr}
 8011630:	b088      	sub	sp, #32
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011636:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801163a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801163c:	2308      	movs	r3, #8
 801163e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011640:	2340      	movs	r3, #64	; 0x40
 8011642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011644:	2300      	movs	r3, #0
 8011646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801164c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801164e:	f107 0308 	add.w	r3, r7, #8
 8011652:	4619      	mov	r1, r3
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f7ff fe67 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 fb26 	bl	8011cac <SDMMC_GetCmdResp7>
 8011660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011662:	69fb      	ldr	r3, [r7, #28]
}
 8011664:	4618      	mov	r0, r3
 8011666:	3720      	adds	r7, #32
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}

0801166c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b088      	sub	sp, #32
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801167a:	2337      	movs	r3, #55	; 0x37
 801167c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801167e:	2340      	movs	r3, #64	; 0x40
 8011680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011682:	2300      	movs	r3, #0
 8011684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801168a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801168c:	f107 0308 	add.w	r3, r7, #8
 8011690:	4619      	mov	r1, r3
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7ff fe48 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011698:	f241 3288 	movw	r2, #5000	; 0x1388
 801169c:	2137      	movs	r1, #55	; 0x37
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f91a 	bl	80118d8 <SDMMC_GetCmdResp1>
 80116a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116a6:	69fb      	ldr	r3, [r7, #28]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3720      	adds	r7, #32
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b088      	sub	sp, #32
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80116ba:	683a      	ldr	r2, [r7, #0]
 80116bc:	4b0d      	ldr	r3, [pc, #52]	; (80116f4 <SDMMC_CmdAppOperCommand+0x44>)
 80116be:	4313      	orrs	r3, r2
 80116c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80116c2:	2329      	movs	r3, #41	; 0x29
 80116c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116c6:	2340      	movs	r3, #64	; 0x40
 80116c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116ca:	2300      	movs	r3, #0
 80116cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116d4:	f107 0308 	add.w	r3, r7, #8
 80116d8:	4619      	mov	r1, r3
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f7ff fe24 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f000 fa2f 	bl	8011b44 <SDMMC_GetCmdResp3>
 80116e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116e8:	69fb      	ldr	r3, [r7, #28]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3720      	adds	r7, #32
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	80100000 	.word	0x80100000

080116f8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b088      	sub	sp, #32
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011706:	2306      	movs	r3, #6
 8011708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801170a:	2340      	movs	r3, #64	; 0x40
 801170c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801170e:	2300      	movs	r3, #0
 8011710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011718:	f107 0308 	add.w	r3, r7, #8
 801171c:	4619      	mov	r1, r3
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f7ff fe02 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011724:	f241 3288 	movw	r2, #5000	; 0x1388
 8011728:	2106      	movs	r1, #6
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f8d4 	bl	80118d8 <SDMMC_GetCmdResp1>
 8011730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011732:	69fb      	ldr	r3, [r7, #28]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3720      	adds	r7, #32
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b088      	sub	sp, #32
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011744:	2300      	movs	r3, #0
 8011746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011748:	2333      	movs	r3, #51	; 0x33
 801174a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801174c:	2340      	movs	r3, #64	; 0x40
 801174e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011750:	2300      	movs	r3, #0
 8011752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011758:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801175a:	f107 0308 	add.w	r3, r7, #8
 801175e:	4619      	mov	r1, r3
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7ff fde1 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011766:	f241 3288 	movw	r2, #5000	; 0x1388
 801176a:	2133      	movs	r1, #51	; 0x33
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 f8b3 	bl	80118d8 <SDMMC_GetCmdResp1>
 8011772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011774:	69fb      	ldr	r3, [r7, #28]
}
 8011776:	4618      	mov	r0, r3
 8011778:	3720      	adds	r7, #32
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b088      	sub	sp, #32
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011786:	2300      	movs	r3, #0
 8011788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801178a:	2302      	movs	r3, #2
 801178c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801178e:	23c0      	movs	r3, #192	; 0xc0
 8011790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011792:	2300      	movs	r3, #0
 8011794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801179a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801179c:	f107 0308 	add.w	r3, r7, #8
 80117a0:	4619      	mov	r1, r3
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7ff fdc0 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f000 f983 	bl	8011ab4 <SDMMC_GetCmdResp2>
 80117ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117b0:	69fb      	ldr	r3, [r7, #28]
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3720      	adds	r7, #32
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}

080117ba <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80117ba:	b580      	push	{r7, lr}
 80117bc:	b088      	sub	sp, #32
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
 80117c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80117c8:	2309      	movs	r3, #9
 80117ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80117cc:	23c0      	movs	r3, #192	; 0xc0
 80117ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117d0:	2300      	movs	r3, #0
 80117d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117da:	f107 0308 	add.w	r3, r7, #8
 80117de:	4619      	mov	r1, r3
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f7ff fda1 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f000 f964 	bl	8011ab4 <SDMMC_GetCmdResp2>
 80117ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117ee:	69fb      	ldr	r3, [r7, #28]
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3720      	adds	r7, #32
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b088      	sub	sp, #32
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011802:	2300      	movs	r3, #0
 8011804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011806:	2303      	movs	r3, #3
 8011808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801180a:	2340      	movs	r3, #64	; 0x40
 801180c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801180e:	2300      	movs	r3, #0
 8011810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011816:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011818:	f107 0308 	add.w	r3, r7, #8
 801181c:	4619      	mov	r1, r3
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7ff fd82 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011824:	683a      	ldr	r2, [r7, #0]
 8011826:	2103      	movs	r1, #3
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f000 f9c9 	bl	8011bc0 <SDMMC_GetCmdResp6>
 801182e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011830:	69fb      	ldr	r3, [r7, #28]
}
 8011832:	4618      	mov	r0, r3
 8011834:	3720      	adds	r7, #32
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}

0801183a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b088      	sub	sp, #32
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011848:	230d      	movs	r3, #13
 801184a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801184c:	2340      	movs	r3, #64	; 0x40
 801184e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011850:	2300      	movs	r3, #0
 8011852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011858:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801185a:	f107 0308 	add.w	r3, r7, #8
 801185e:	4619      	mov	r1, r3
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7ff fd61 	bl	8011328 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011866:	f241 3288 	movw	r2, #5000	; 0x1388
 801186a:	210d      	movs	r1, #13
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 f833 	bl	80118d8 <SDMMC_GetCmdResp1>
 8011872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011874:	69fb      	ldr	r3, [r7, #28]
}
 8011876:	4618      	mov	r0, r3
 8011878:	3720      	adds	r7, #32
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
	...

08011880 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011888:	4b11      	ldr	r3, [pc, #68]	; (80118d0 <SDMMC_GetCmdError+0x50>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	4a11      	ldr	r2, [pc, #68]	; (80118d4 <SDMMC_GetCmdError+0x54>)
 801188e:	fba2 2303 	umull	r2, r3, r2, r3
 8011892:	0a5b      	lsrs	r3, r3, #9
 8011894:	f241 3288 	movw	r2, #5000	; 0x1388
 8011898:	fb02 f303 	mul.w	r3, r2, r3
 801189c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	1e5a      	subs	r2, r3, #1
 80118a2:	60fa      	str	r2, [r7, #12]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d102      	bne.n	80118ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118ac:	e009      	b.n	80118c2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d0f1      	beq.n	801189e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	22c5      	movs	r2, #197	; 0xc5
 80118be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop
 80118d0:	20000014 	.word	0x20000014
 80118d4:	10624dd3 	.word	0x10624dd3

080118d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b088      	sub	sp, #32
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	460b      	mov	r3, r1
 80118e2:	607a      	str	r2, [r7, #4]
 80118e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80118e6:	4b70      	ldr	r3, [pc, #448]	; (8011aa8 <SDMMC_GetCmdResp1+0x1d0>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a70      	ldr	r2, [pc, #448]	; (8011aac <SDMMC_GetCmdResp1+0x1d4>)
 80118ec:	fba2 2303 	umull	r2, r3, r2, r3
 80118f0:	0a5a      	lsrs	r2, r3, #9
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	fb02 f303 	mul.w	r3, r2, r3
 80118f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	1e5a      	subs	r2, r3, #1
 80118fe:	61fa      	str	r2, [r7, #28]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d102      	bne.n	801190a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011908:	e0c9      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801190e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011916:	2b00      	cmp	r3, #0
 8011918:	d0ef      	beq.n	80118fa <SDMMC_GetCmdResp1+0x22>
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011920:	2b00      	cmp	r3, #0
 8011922:	d1ea      	bne.n	80118fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011928:	f003 0304 	and.w	r3, r3, #4
 801192c:	2b00      	cmp	r3, #0
 801192e:	d004      	beq.n	801193a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2204      	movs	r2, #4
 8011934:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011936:	2304      	movs	r3, #4
 8011938:	e0b1      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801193e:	f003 0301 	and.w	r3, r3, #1
 8011942:	2b00      	cmp	r3, #0
 8011944:	d004      	beq.n	8011950 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2201      	movs	r2, #1
 801194a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801194c:	2301      	movs	r3, #1
 801194e:	e0a6      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	22c5      	movs	r2, #197	; 0xc5
 8011954:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f7ff fd10 	bl	801137c <SDMMC_GetCommandResponse>
 801195c:	4603      	mov	r3, r0
 801195e:	461a      	mov	r2, r3
 8011960:	7afb      	ldrb	r3, [r7, #11]
 8011962:	4293      	cmp	r3, r2
 8011964:	d001      	beq.n	801196a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011966:	2301      	movs	r3, #1
 8011968:	e099      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801196a:	2100      	movs	r1, #0
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f7ff fd12 	bl	8011396 <SDMMC_GetResponse>
 8011972:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011974:	697a      	ldr	r2, [r7, #20]
 8011976:	4b4e      	ldr	r3, [pc, #312]	; (8011ab0 <SDMMC_GetCmdResp1+0x1d8>)
 8011978:	4013      	ands	r3, r2
 801197a:	2b00      	cmp	r3, #0
 801197c:	d101      	bne.n	8011982 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801197e:	2300      	movs	r3, #0
 8011980:	e08d      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	2b00      	cmp	r3, #0
 8011986:	da02      	bge.n	801198e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801198c:	e087      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011994:	2b00      	cmp	r3, #0
 8011996:	d001      	beq.n	801199c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011998:	2340      	movs	r3, #64	; 0x40
 801199a:	e080      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d001      	beq.n	80119aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80119a6:	2380      	movs	r3, #128	; 0x80
 80119a8:	e079      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d002      	beq.n	80119ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80119b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119b8:	e071      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d002      	beq.n	80119ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80119c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119c8:	e069      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d002      	beq.n	80119da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80119d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119d8:	e061      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d002      	beq.n	80119ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80119e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119e8:	e059      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d002      	beq.n	80119fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80119f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119f8:	e051      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a08:	e049      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d002      	beq.n	8011a1a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011a14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011a18:	e041      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a28:	e039      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011a38:	e031      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d002      	beq.n	8011a4a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011a44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011a48:	e029      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d002      	beq.n	8011a5a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011a54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011a58:	e021      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d002      	beq.n	8011a6a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011a64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011a68:	e019      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d002      	beq.n	8011a7a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011a74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011a78:	e011      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d002      	beq.n	8011a8a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011a84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011a88:	e009      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	f003 0308 	and.w	r3, r3, #8
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d002      	beq.n	8011a9a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011a94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011a98:	e001      	b.n	8011a9e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3720      	adds	r7, #32
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	20000014 	.word	0x20000014
 8011aac:	10624dd3 	.word	0x10624dd3
 8011ab0:	fdffe008 	.word	0xfdffe008

08011ab4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b085      	sub	sp, #20
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011abc:	4b1f      	ldr	r3, [pc, #124]	; (8011b3c <SDMMC_GetCmdResp2+0x88>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4a1f      	ldr	r2, [pc, #124]	; (8011b40 <SDMMC_GetCmdResp2+0x8c>)
 8011ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8011ac6:	0a5b      	lsrs	r3, r3, #9
 8011ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011acc:	fb02 f303 	mul.w	r3, r2, r3
 8011ad0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	1e5a      	subs	r2, r3, #1
 8011ad6:	60fa      	str	r2, [r7, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d102      	bne.n	8011ae2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ae0:	e026      	b.n	8011b30 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ae6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d0ef      	beq.n	8011ad2 <SDMMC_GetCmdResp2+0x1e>
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1ea      	bne.n	8011ad2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b00:	f003 0304 	and.w	r3, r3, #4
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d004      	beq.n	8011b12 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2204      	movs	r2, #4
 8011b0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b0e:	2304      	movs	r3, #4
 8011b10:	e00e      	b.n	8011b30 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b16:	f003 0301 	and.w	r3, r3, #1
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d004      	beq.n	8011b28 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2201      	movs	r2, #1
 8011b22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b24:	2301      	movs	r3, #1
 8011b26:	e003      	b.n	8011b30 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	22c5      	movs	r2, #197	; 0xc5
 8011b2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b2e:	2300      	movs	r3, #0
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3714      	adds	r7, #20
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	20000014 	.word	0x20000014
 8011b40:	10624dd3 	.word	0x10624dd3

08011b44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b085      	sub	sp, #20
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b4c:	4b1a      	ldr	r3, [pc, #104]	; (8011bb8 <SDMMC_GetCmdResp3+0x74>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4a1a      	ldr	r2, [pc, #104]	; (8011bbc <SDMMC_GetCmdResp3+0x78>)
 8011b52:	fba2 2303 	umull	r2, r3, r2, r3
 8011b56:	0a5b      	lsrs	r3, r3, #9
 8011b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b5c:	fb02 f303 	mul.w	r3, r2, r3
 8011b60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	1e5a      	subs	r2, r3, #1
 8011b66:	60fa      	str	r2, [r7, #12]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d102      	bne.n	8011b72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b70:	e01b      	b.n	8011baa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d0ef      	beq.n	8011b62 <SDMMC_GetCmdResp3+0x1e>
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d1ea      	bne.n	8011b62 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b90:	f003 0304 	and.w	r3, r3, #4
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d004      	beq.n	8011ba2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2204      	movs	r2, #4
 8011b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b9e:	2304      	movs	r3, #4
 8011ba0:	e003      	b.n	8011baa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	22c5      	movs	r2, #197	; 0xc5
 8011ba6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop
 8011bb8:	20000014 	.word	0x20000014
 8011bbc:	10624dd3 	.word	0x10624dd3

08011bc0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b088      	sub	sp, #32
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	460b      	mov	r3, r1
 8011bca:	607a      	str	r2, [r7, #4]
 8011bcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011bce:	4b35      	ldr	r3, [pc, #212]	; (8011ca4 <SDMMC_GetCmdResp6+0xe4>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4a35      	ldr	r2, [pc, #212]	; (8011ca8 <SDMMC_GetCmdResp6+0xe8>)
 8011bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8011bd8:	0a5b      	lsrs	r3, r3, #9
 8011bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bde:	fb02 f303 	mul.w	r3, r2, r3
 8011be2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	1e5a      	subs	r2, r3, #1
 8011be8:	61fa      	str	r2, [r7, #28]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d102      	bne.n	8011bf4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bf2:	e052      	b.n	8011c9a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bf8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d0ef      	beq.n	8011be4 <SDMMC_GetCmdResp6+0x24>
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1ea      	bne.n	8011be4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c12:	f003 0304 	and.w	r3, r3, #4
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d004      	beq.n	8011c24 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2204      	movs	r2, #4
 8011c1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c20:	2304      	movs	r3, #4
 8011c22:	e03a      	b.n	8011c9a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c28:	f003 0301 	and.w	r3, r3, #1
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d004      	beq.n	8011c3a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2201      	movs	r2, #1
 8011c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c36:	2301      	movs	r3, #1
 8011c38:	e02f      	b.n	8011c9a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011c3a:	68f8      	ldr	r0, [r7, #12]
 8011c3c:	f7ff fb9e 	bl	801137c <SDMMC_GetCommandResponse>
 8011c40:	4603      	mov	r3, r0
 8011c42:	461a      	mov	r2, r3
 8011c44:	7afb      	ldrb	r3, [r7, #11]
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d001      	beq.n	8011c4e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e025      	b.n	8011c9a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	22c5      	movs	r2, #197	; 0xc5
 8011c52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011c54:	2100      	movs	r1, #0
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f7ff fb9d 	bl	8011396 <SDMMC_GetResponse>
 8011c5c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d106      	bne.n	8011c76 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	0c1b      	lsrs	r3, r3, #16
 8011c6c:	b29a      	uxth	r2, r3
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011c72:	2300      	movs	r3, #0
 8011c74:	e011      	b.n	8011c9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d002      	beq.n	8011c86 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011c84:	e009      	b.n	8011c9a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c94:	e001      	b.n	8011c9a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3720      	adds	r7, #32
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	20000014 	.word	0x20000014
 8011ca8:	10624dd3 	.word	0x10624dd3

08011cac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b085      	sub	sp, #20
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011cb4:	4b22      	ldr	r3, [pc, #136]	; (8011d40 <SDMMC_GetCmdResp7+0x94>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a22      	ldr	r2, [pc, #136]	; (8011d44 <SDMMC_GetCmdResp7+0x98>)
 8011cba:	fba2 2303 	umull	r2, r3, r2, r3
 8011cbe:	0a5b      	lsrs	r3, r3, #9
 8011cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cc4:	fb02 f303 	mul.w	r3, r2, r3
 8011cc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	1e5a      	subs	r2, r3, #1
 8011cce:	60fa      	str	r2, [r7, #12]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d102      	bne.n	8011cda <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011cd8:	e02c      	b.n	8011d34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d0ef      	beq.n	8011cca <SDMMC_GetCmdResp7+0x1e>
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1ea      	bne.n	8011cca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cf8:	f003 0304 	and.w	r3, r3, #4
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d004      	beq.n	8011d0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2204      	movs	r2, #4
 8011d04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011d06:	2304      	movs	r3, #4
 8011d08:	e014      	b.n	8011d34 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d0e:	f003 0301 	and.w	r3, r3, #1
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d004      	beq.n	8011d20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2201      	movs	r2, #1
 8011d1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e009      	b.n	8011d34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d002      	beq.n	8011d32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2240      	movs	r2, #64	; 0x40
 8011d30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011d32:	2300      	movs	r3, #0
  
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3714      	adds	r7, #20
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	20000014 	.word	0x20000014
 8011d44:	10624dd3 	.word	0x10624dd3

08011d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011d48:	b084      	sub	sp, #16
 8011d4a:	b580      	push	{r7, lr}
 8011d4c:	b084      	sub	sp, #16
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
 8011d52:	f107 001c 	add.w	r0, r7, #28
 8011d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d120      	bne.n	8011da2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	68da      	ldr	r2, [r3, #12]
 8011d70:	4b20      	ldr	r3, [pc, #128]	; (8011df4 <USB_CoreInit+0xac>)
 8011d72:	4013      	ands	r3, r2
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d86:	2b01      	cmp	r3, #1
 8011d88:	d105      	bne.n	8011d96 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 f942 	bl	8012020 <USB_CoreReset>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	73fb      	strb	r3, [r7, #15]
 8011da0:	e010      	b.n	8011dc4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f936 	bl	8012020 <USB_CoreReset>
 8011db4:	4603      	mov	r3, r0
 8011db6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8011dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d10b      	bne.n	8011de2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	689b      	ldr	r3, [r3, #8]
 8011dce:	f043 0206 	orr.w	r2, r3, #6
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	f043 0220 	orr.w	r2, r3, #32
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011dee:	b004      	add	sp, #16
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop
 8011df4:	ffbdffbf 	.word	0xffbdffbf

08011df8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b083      	sub	sp, #12
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	f043 0201 	orr.w	r2, r3, #1
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr

08011e1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e1a:	b480      	push	{r7}
 8011e1c:	b083      	sub	sp, #12
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	689b      	ldr	r3, [r3, #8]
 8011e26:	f023 0201 	bic.w	r2, r3, #1
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e2e:	2300      	movs	r3, #0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	370c      	adds	r7, #12
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	460b      	mov	r3, r1
 8011e46:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e54:	78fb      	ldrb	r3, [r7, #3]
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d106      	bne.n	8011e68 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	60da      	str	r2, [r3, #12]
 8011e66:	e00b      	b.n	8011e80 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e68:	78fb      	ldrb	r3, [r7, #3]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d106      	bne.n	8011e7c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	68db      	ldr	r3, [r3, #12]
 8011e72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	60da      	str	r2, [r3, #12]
 8011e7a:	e001      	b.n	8011e80 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e003      	b.n	8011e88 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011e80:	2032      	movs	r0, #50	; 0x32
 8011e82:	f7f4 f8d9 	bl	8006038 <HAL_Delay>

  return HAL_OK;
 8011e86:	2300      	movs	r3, #0
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3708      	adds	r7, #8
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b085      	sub	sp, #20
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	019b      	lsls	r3, r3, #6
 8011ea2:	f043 0220 	orr.w	r2, r3, #32
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	3301      	adds	r3, #1
 8011eae:	60fb      	str	r3, [r7, #12]
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	4a09      	ldr	r2, [pc, #36]	; (8011ed8 <USB_FlushTxFifo+0x48>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d901      	bls.n	8011ebc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011eb8:	2303      	movs	r3, #3
 8011eba:	e006      	b.n	8011eca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	691b      	ldr	r3, [r3, #16]
 8011ec0:	f003 0320 	and.w	r3, r3, #32
 8011ec4:	2b20      	cmp	r3, #32
 8011ec6:	d0f0      	beq.n	8011eaa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011ec8:	2300      	movs	r3, #0
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3714      	adds	r7, #20
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr
 8011ed6:	bf00      	nop
 8011ed8:	00030d40 	.word	0x00030d40

08011edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b085      	sub	sp, #20
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2210      	movs	r2, #16
 8011eec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	60fb      	str	r3, [r7, #12]
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	4a09      	ldr	r2, [pc, #36]	; (8011f1c <USB_FlushRxFifo+0x40>)
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	d901      	bls.n	8011f00 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011efc:	2303      	movs	r3, #3
 8011efe:	e006      	b.n	8011f0e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	691b      	ldr	r3, [r3, #16]
 8011f04:	f003 0310 	and.w	r3, r3, #16
 8011f08:	2b10      	cmp	r3, #16
 8011f0a:	d0f0      	beq.n	8011eee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3714      	adds	r7, #20
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	00030d40 	.word	0x00030d40

08011f20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b089      	sub	sp, #36	; 0x24
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	60f8      	str	r0, [r7, #12]
 8011f28:	60b9      	str	r1, [r7, #8]
 8011f2a:	4611      	mov	r1, r2
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	460b      	mov	r3, r1
 8011f30:	71fb      	strb	r3, [r7, #7]
 8011f32:	4613      	mov	r3, r2
 8011f34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d11a      	bne.n	8011f7c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011f46:	88bb      	ldrh	r3, [r7, #4]
 8011f48:	3303      	adds	r3, #3
 8011f4a:	089b      	lsrs	r3, r3, #2
 8011f4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011f4e:	2300      	movs	r3, #0
 8011f50:	61bb      	str	r3, [r7, #24]
 8011f52:	e00f      	b.n	8011f74 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011f54:	79fb      	ldrb	r3, [r7, #7]
 8011f56:	031a      	lsls	r2, r3, #12
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f60:	461a      	mov	r2, r3
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	3304      	adds	r3, #4
 8011f6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011f6e:	69bb      	ldr	r3, [r7, #24]
 8011f70:	3301      	adds	r3, #1
 8011f72:	61bb      	str	r3, [r7, #24]
 8011f74:	69ba      	ldr	r2, [r7, #24]
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d3eb      	bcc.n	8011f54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3724      	adds	r7, #36	; 0x24
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	b089      	sub	sp, #36	; 0x24
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	60f8      	str	r0, [r7, #12]
 8011f92:	60b9      	str	r1, [r7, #8]
 8011f94:	4613      	mov	r3, r2
 8011f96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011fa0:	88fb      	ldrh	r3, [r7, #6]
 8011fa2:	3303      	adds	r3, #3
 8011fa4:	089b      	lsrs	r3, r3, #2
 8011fa6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	61bb      	str	r3, [r7, #24]
 8011fac:	e00b      	b.n	8011fc6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	3304      	adds	r3, #4
 8011fbe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011fc0:	69bb      	ldr	r3, [r7, #24]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	61bb      	str	r3, [r7, #24]
 8011fc6:	69ba      	ldr	r2, [r7, #24]
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d3ef      	bcc.n	8011fae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011fce:	69fb      	ldr	r3, [r7, #28]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3724      	adds	r7, #36	; 0x24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b085      	sub	sp, #20
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	695b      	ldr	r3, [r3, #20]
 8011fe8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	699b      	ldr	r3, [r3, #24]
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	4013      	ands	r3, r2
 8011ff2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3714      	adds	r7, #20
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr

08012002 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012002:	b480      	push	{r7}
 8012004:	b083      	sub	sp, #12
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	695b      	ldr	r3, [r3, #20]
 801200e:	f003 0301 	and.w	r3, r3, #1
}
 8012012:	4618      	mov	r0, r3
 8012014:	370c      	adds	r7, #12
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr
	...

08012020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012020:	b480      	push	{r7}
 8012022:	b085      	sub	sp, #20
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012028:	2300      	movs	r3, #0
 801202a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	3301      	adds	r3, #1
 8012030:	60fb      	str	r3, [r7, #12]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	4a13      	ldr	r2, [pc, #76]	; (8012084 <USB_CoreReset+0x64>)
 8012036:	4293      	cmp	r3, r2
 8012038:	d901      	bls.n	801203e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801203a:	2303      	movs	r3, #3
 801203c:	e01b      	b.n	8012076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	691b      	ldr	r3, [r3, #16]
 8012042:	2b00      	cmp	r3, #0
 8012044:	daf2      	bge.n	801202c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012046:	2300      	movs	r3, #0
 8012048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	691b      	ldr	r3, [r3, #16]
 801204e:	f043 0201 	orr.w	r2, r3, #1
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	3301      	adds	r3, #1
 801205a:	60fb      	str	r3, [r7, #12]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	4a09      	ldr	r2, [pc, #36]	; (8012084 <USB_CoreReset+0x64>)
 8012060:	4293      	cmp	r3, r2
 8012062:	d901      	bls.n	8012068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012064:	2303      	movs	r3, #3
 8012066:	e006      	b.n	8012076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	691b      	ldr	r3, [r3, #16]
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b01      	cmp	r3, #1
 8012072:	d0f0      	beq.n	8012056 <USB_CoreReset+0x36>

  return HAL_OK;
 8012074:	2300      	movs	r3, #0
}
 8012076:	4618      	mov	r0, r3
 8012078:	3714      	adds	r7, #20
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop
 8012084:	00030d40 	.word	0x00030d40

08012088 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012088:	b084      	sub	sp, #16
 801208a:	b580      	push	{r7, lr}
 801208c:	b084      	sub	sp, #16
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	f107 001c 	add.w	r0, r7, #28
 8012096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80120a4:	461a      	mov	r2, r3
 80120a6:	2300      	movs	r3, #0
 80120a8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d018      	beq.n	80120f4 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d10a      	bne.n	80120de <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	68ba      	ldr	r2, [r7, #8]
 80120d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120d6:	f043 0304 	orr.w	r3, r3, #4
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	e014      	b.n	8012108 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	68ba      	ldr	r2, [r7, #8]
 80120e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120ec:	f023 0304 	bic.w	r3, r3, #4
 80120f0:	6013      	str	r3, [r2, #0]
 80120f2:	e009      	b.n	8012108 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	68ba      	ldr	r2, [r7, #8]
 80120fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012102:	f023 0304 	bic.w	r3, r3, #4
 8012106:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8012108:	2110      	movs	r1, #16
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ff fec0 	bl	8011e90 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff fee3 	bl	8011edc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8012116:	2300      	movs	r3, #0
 8012118:	60fb      	str	r3, [r7, #12]
 801211a:	e015      	b.n	8012148 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	015a      	lsls	r2, r3, #5
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	4413      	add	r3, r2
 8012124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012128:	461a      	mov	r2, r3
 801212a:	f04f 33ff 	mov.w	r3, #4294967295
 801212e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	015a      	lsls	r2, r3, #5
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	4413      	add	r3, r2
 8012138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801213c:	461a      	mov	r2, r3
 801213e:	2300      	movs	r3, #0
 8012140:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	3301      	adds	r3, #1
 8012146:	60fb      	str	r3, [r7, #12]
 8012148:	6a3b      	ldr	r3, [r7, #32]
 801214a:	68fa      	ldr	r2, [r7, #12]
 801214c:	429a      	cmp	r2, r3
 801214e:	d3e5      	bcc.n	801211c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8012150:	2101      	movs	r1, #1
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 f8ac 	bl	80122b0 <USB_DriveVbus>

  HAL_Delay(200U);
 8012158:	20c8      	movs	r0, #200	; 0xc8
 801215a:	f7f3 ff6d 	bl	8006038 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f04f 32ff 	mov.w	r2, #4294967295
 801216a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00b      	beq.n	8012190 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801217e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4a14      	ldr	r2, [pc, #80]	; (80121d4 <USB_HostInit+0x14c>)
 8012184:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4a13      	ldr	r2, [pc, #76]	; (80121d8 <USB_HostInit+0x150>)
 801218a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801218e:	e009      	b.n	80121a4 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2280      	movs	r2, #128	; 0x80
 8012194:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	4a10      	ldr	r2, [pc, #64]	; (80121dc <USB_HostInit+0x154>)
 801219a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	4a10      	ldr	r2, [pc, #64]	; (80121e0 <USB_HostInit+0x158>)
 80121a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80121a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d105      	bne.n	80121b6 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	699b      	ldr	r3, [r3, #24]
 80121ae:	f043 0210 	orr.w	r2, r3, #16
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	699a      	ldr	r2, [r3, #24]
 80121ba:	4b0a      	ldr	r3, [pc, #40]	; (80121e4 <USB_HostInit+0x15c>)
 80121bc:	4313      	orrs	r3, r2
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80121c2:	2300      	movs	r3, #0
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121ce:	b004      	add	sp, #16
 80121d0:	4770      	bx	lr
 80121d2:	bf00      	nop
 80121d4:	01000200 	.word	0x01000200
 80121d8:	00e00300 	.word	0x00e00300
 80121dc:	00600080 	.word	0x00600080
 80121e0:	004000e0 	.word	0x004000e0
 80121e4:	a3200008 	.word	0xa3200008

080121e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80121e8:	b480      	push	{r7}
 80121ea:	b085      	sub	sp, #20
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	460b      	mov	r3, r1
 80121f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	68fa      	ldr	r2, [r7, #12]
 8012202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012206:	f023 0303 	bic.w	r3, r3, #3
 801220a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	78fb      	ldrb	r3, [r7, #3]
 8012216:	f003 0303 	and.w	r3, r3, #3
 801221a:	68f9      	ldr	r1, [r7, #12]
 801221c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012220:	4313      	orrs	r3, r2
 8012222:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8012224:	78fb      	ldrb	r3, [r7, #3]
 8012226:	2b01      	cmp	r3, #1
 8012228:	d107      	bne.n	801223a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012230:	461a      	mov	r2, r3
 8012232:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8012236:	6053      	str	r3, [r2, #4]
 8012238:	e009      	b.n	801224e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801223a:	78fb      	ldrb	r3, [r7, #3]
 801223c:	2b02      	cmp	r3, #2
 801223e:	d106      	bne.n	801224e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012246:	461a      	mov	r2, r3
 8012248:	f241 7370 	movw	r3, #6000	; 0x1770
 801224c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801224e:	2300      	movs	r3, #0
}
 8012250:	4618      	mov	r0, r3
 8012252:	3714      	adds	r7, #20
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr

0801225c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8012268:	2300      	movs	r3, #0
 801226a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801227c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	68fa      	ldr	r2, [r7, #12]
 8012282:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8012286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801228a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801228c:	2064      	movs	r0, #100	; 0x64
 801228e:	f7f3 fed3 	bl	8006038 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801229a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801229e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80122a0:	200a      	movs	r0, #10
 80122a2:	f7f3 fec9 	bl	8006038 <HAL_Delay>

  return HAL_OK;
 80122a6:	2300      	movs	r3, #0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b085      	sub	sp, #20
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	460b      	mov	r3, r1
 80122ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80122c0:	2300      	movs	r3, #0
 80122c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80122d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d109      	bne.n	80122f4 <USB_DriveVbus+0x44>
 80122e0:	78fb      	ldrb	r3, [r7, #3]
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	d106      	bne.n	80122f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80122ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80122f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80122fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80122fe:	d109      	bne.n	8012314 <USB_DriveVbus+0x64>
 8012300:	78fb      	ldrb	r3, [r7, #3]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d106      	bne.n	8012314 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	68fa      	ldr	r2, [r7, #12]
 801230a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801230e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012312:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	3714      	adds	r7, #20
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr

08012322 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012322:	b480      	push	{r7}
 8012324:	b085      	sub	sp, #20
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801232e:	2300      	movs	r3, #0
 8012330:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	0c5b      	lsrs	r3, r3, #17
 8012340:	f003 0303 	and.w	r3, r3, #3
}
 8012344:	4618      	mov	r0, r3
 8012346:	3714      	adds	r7, #20
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr

08012350 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8012350:	b480      	push	{r7}
 8012352:	b085      	sub	sp, #20
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012362:	689b      	ldr	r3, [r3, #8]
 8012364:	b29b      	uxth	r3, r3
}
 8012366:	4618      	mov	r0, r3
 8012368:	3714      	adds	r7, #20
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr
	...

08012374 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b088      	sub	sp, #32
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	4608      	mov	r0, r1
 801237e:	4611      	mov	r1, r2
 8012380:	461a      	mov	r2, r3
 8012382:	4603      	mov	r3, r0
 8012384:	70fb      	strb	r3, [r7, #3]
 8012386:	460b      	mov	r3, r1
 8012388:	70bb      	strb	r3, [r7, #2]
 801238a:	4613      	mov	r3, r2
 801238c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8012396:	78fb      	ldrb	r3, [r7, #3]
 8012398:	015a      	lsls	r2, r3, #5
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	4413      	add	r3, r2
 801239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123a2:	461a      	mov	r2, r3
 80123a4:	f04f 33ff 	mov.w	r3, #4294967295
 80123a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80123aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d87e      	bhi.n	80124b0 <USB_HC_Init+0x13c>
 80123b2:	a201      	add	r2, pc, #4	; (adr r2, 80123b8 <USB_HC_Init+0x44>)
 80123b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b8:	080123c9 	.word	0x080123c9
 80123bc:	08012473 	.word	0x08012473
 80123c0:	080123c9 	.word	0x080123c9
 80123c4:	08012435 	.word	0x08012435
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80123c8:	78fb      	ldrb	r3, [r7, #3]
 80123ca:	015a      	lsls	r2, r3, #5
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	4413      	add	r3, r2
 80123d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123d4:	461a      	mov	r2, r3
 80123d6:	f240 439d 	movw	r3, #1181	; 0x49d
 80123da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80123dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	da10      	bge.n	8012406 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80123e4:	78fb      	ldrb	r3, [r7, #3]
 80123e6:	015a      	lsls	r2, r3, #5
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	4413      	add	r3, r2
 80123ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123f0:	68db      	ldr	r3, [r3, #12]
 80123f2:	78fa      	ldrb	r2, [r7, #3]
 80123f4:	0151      	lsls	r1, r2, #5
 80123f6:	693a      	ldr	r2, [r7, #16]
 80123f8:	440a      	add	r2, r1
 80123fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80123fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012402:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8012404:	e057      	b.n	80124b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801240e:	2b00      	cmp	r3, #0
 8012410:	d051      	beq.n	80124b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8012412:	78fb      	ldrb	r3, [r7, #3]
 8012414:	015a      	lsls	r2, r3, #5
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	4413      	add	r3, r2
 801241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801241e:	68db      	ldr	r3, [r3, #12]
 8012420:	78fa      	ldrb	r2, [r7, #3]
 8012422:	0151      	lsls	r1, r2, #5
 8012424:	693a      	ldr	r2, [r7, #16]
 8012426:	440a      	add	r2, r1
 8012428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801242c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012430:	60d3      	str	r3, [r2, #12]
      break;
 8012432:	e040      	b.n	80124b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012434:	78fb      	ldrb	r3, [r7, #3]
 8012436:	015a      	lsls	r2, r3, #5
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	4413      	add	r3, r2
 801243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012440:	461a      	mov	r2, r3
 8012442:	f240 639d 	movw	r3, #1693	; 0x69d
 8012446:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012448:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801244c:	2b00      	cmp	r3, #0
 801244e:	da34      	bge.n	80124ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012450:	78fb      	ldrb	r3, [r7, #3]
 8012452:	015a      	lsls	r2, r3, #5
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	4413      	add	r3, r2
 8012458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801245c:	68db      	ldr	r3, [r3, #12]
 801245e:	78fa      	ldrb	r2, [r7, #3]
 8012460:	0151      	lsls	r1, r2, #5
 8012462:	693a      	ldr	r2, [r7, #16]
 8012464:	440a      	add	r2, r1
 8012466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801246e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8012470:	e023      	b.n	80124ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012472:	78fb      	ldrb	r3, [r7, #3]
 8012474:	015a      	lsls	r2, r3, #5
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	4413      	add	r3, r2
 801247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801247e:	461a      	mov	r2, r3
 8012480:	f240 2325 	movw	r3, #549	; 0x225
 8012484:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012486:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801248a:	2b00      	cmp	r3, #0
 801248c:	da17      	bge.n	80124be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801248e:	78fb      	ldrb	r3, [r7, #3]
 8012490:	015a      	lsls	r2, r3, #5
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	4413      	add	r3, r2
 8012496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	78fa      	ldrb	r2, [r7, #3]
 801249e:	0151      	lsls	r1, r2, #5
 80124a0:	693a      	ldr	r2, [r7, #16]
 80124a2:	440a      	add	r2, r1
 80124a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80124a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80124ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80124ae:	e006      	b.n	80124be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80124b0:	2301      	movs	r3, #1
 80124b2:	77fb      	strb	r3, [r7, #31]
      break;
 80124b4:	e004      	b.n	80124c0 <USB_HC_Init+0x14c>
      break;
 80124b6:	bf00      	nop
 80124b8:	e002      	b.n	80124c0 <USB_HC_Init+0x14c>
      break;
 80124ba:	bf00      	nop
 80124bc:	e000      	b.n	80124c0 <USB_HC_Init+0x14c>
      break;
 80124be:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80124c6:	699a      	ldr	r2, [r3, #24]
 80124c8:	78fb      	ldrb	r3, [r7, #3]
 80124ca:	f003 030f 	and.w	r3, r3, #15
 80124ce:	2101      	movs	r1, #1
 80124d0:	fa01 f303 	lsl.w	r3, r1, r3
 80124d4:	6939      	ldr	r1, [r7, #16]
 80124d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80124da:	4313      	orrs	r3, r2
 80124dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	699b      	ldr	r3, [r3, #24]
 80124e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80124ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	da03      	bge.n	80124fa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80124f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124f6:	61bb      	str	r3, [r7, #24]
 80124f8:	e001      	b.n	80124fe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80124fa:	2300      	movs	r3, #0
 80124fc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7ff ff0f 	bl	8012322 <USB_GetHostSpeed>
 8012504:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8012506:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801250a:	2b02      	cmp	r3, #2
 801250c:	d106      	bne.n	801251c <USB_HC_Init+0x1a8>
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2b02      	cmp	r3, #2
 8012512:	d003      	beq.n	801251c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8012514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012518:	617b      	str	r3, [r7, #20]
 801251a:	e001      	b.n	8012520 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801251c:	2300      	movs	r3, #0
 801251e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012520:	787b      	ldrb	r3, [r7, #1]
 8012522:	059b      	lsls	r3, r3, #22
 8012524:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012528:	78bb      	ldrb	r3, [r7, #2]
 801252a:	02db      	lsls	r3, r3, #11
 801252c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012530:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012532:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012536:	049b      	lsls	r3, r3, #18
 8012538:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801253c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801253e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012540:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012544:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801254a:	78fb      	ldrb	r3, [r7, #3]
 801254c:	0159      	lsls	r1, r3, #5
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	440b      	add	r3, r1
 8012552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012556:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801255c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 801255e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012562:	2b03      	cmp	r3, #3
 8012564:	d10f      	bne.n	8012586 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8012566:	78fb      	ldrb	r3, [r7, #3]
 8012568:	015a      	lsls	r2, r3, #5
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	4413      	add	r3, r2
 801256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	78fa      	ldrb	r2, [r7, #3]
 8012576:	0151      	lsls	r1, r2, #5
 8012578:	693a      	ldr	r2, [r7, #16]
 801257a:	440a      	add	r2, r1
 801257c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012584:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8012586:	7ffb      	ldrb	r3, [r7, #31]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3720      	adds	r7, #32
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b08c      	sub	sp, #48	; 0x30
 8012594:	af02      	add	r7, sp, #8
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	4613      	mov	r3, r2
 801259c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	785b      	ldrb	r3, [r3, #1]
 80125a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80125a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d02d      	beq.n	8012616 <USB_HC_StartXfer+0x86>
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	791b      	ldrb	r3, [r3, #4]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d129      	bne.n	8012616 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80125c2:	79fb      	ldrb	r3, [r7, #7]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d117      	bne.n	80125f8 <USB_HC_StartXfer+0x68>
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	79db      	ldrb	r3, [r3, #7]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d003      	beq.n	80125d8 <USB_HC_StartXfer+0x48>
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	79db      	ldrb	r3, [r3, #7]
 80125d4:	2b02      	cmp	r3, #2
 80125d6:	d10f      	bne.n	80125f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	015a      	lsls	r2, r3, #5
 80125dc:	6a3b      	ldr	r3, [r7, #32]
 80125de:	4413      	add	r3, r2
 80125e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	69fa      	ldr	r2, [r7, #28]
 80125e8:	0151      	lsls	r1, r2, #5
 80125ea:	6a3a      	ldr	r2, [r7, #32]
 80125ec:	440a      	add	r2, r1
 80125ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80125f8:	79fb      	ldrb	r3, [r7, #7]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d10b      	bne.n	8012616 <USB_HC_StartXfer+0x86>
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	795b      	ldrb	r3, [r3, #5]
 8012602:	2b01      	cmp	r3, #1
 8012604:	d107      	bne.n	8012616 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	785b      	ldrb	r3, [r3, #1]
 801260a:	4619      	mov	r1, r3
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f000 fa2f 	bl	8012a70 <USB_DoPing>
      return HAL_OK;
 8012612:	2300      	movs	r3, #0
 8012614:	e0f8      	b.n	8012808 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	695b      	ldr	r3, [r3, #20]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d018      	beq.n	8012650 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	695b      	ldr	r3, [r3, #20]
 8012622:	68ba      	ldr	r2, [r7, #8]
 8012624:	8912      	ldrh	r2, [r2, #8]
 8012626:	4413      	add	r3, r2
 8012628:	3b01      	subs	r3, #1
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	8912      	ldrh	r2, [r2, #8]
 801262e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012632:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8012634:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012636:	8b7b      	ldrh	r3, [r7, #26]
 8012638:	429a      	cmp	r2, r3
 801263a:	d90b      	bls.n	8012654 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 801263c:	8b7b      	ldrh	r3, [r7, #26]
 801263e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012640:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012642:	68ba      	ldr	r2, [r7, #8]
 8012644:	8912      	ldrh	r2, [r2, #8]
 8012646:	fb02 f203 	mul.w	r2, r2, r3
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	611a      	str	r2, [r3, #16]
 801264e:	e001      	b.n	8012654 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8012650:	2301      	movs	r3, #1
 8012652:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	78db      	ldrb	r3, [r3, #3]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d007      	beq.n	801266c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801265c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801265e:	68ba      	ldr	r2, [r7, #8]
 8012660:	8912      	ldrh	r2, [r2, #8]
 8012662:	fb02 f203 	mul.w	r2, r2, r3
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	611a      	str	r2, [r3, #16]
 801266a:	e003      	b.n	8012674 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	695a      	ldr	r2, [r3, #20]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	691b      	ldr	r3, [r3, #16]
 8012678:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801267c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801267e:	04d9      	lsls	r1, r3, #19
 8012680:	4b63      	ldr	r3, [pc, #396]	; (8012810 <USB_HC_StartXfer+0x280>)
 8012682:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012684:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	7a9b      	ldrb	r3, [r3, #10]
 801268a:	075b      	lsls	r3, r3, #29
 801268c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012690:	69f9      	ldr	r1, [r7, #28]
 8012692:	0148      	lsls	r0, r1, #5
 8012694:	6a39      	ldr	r1, [r7, #32]
 8012696:	4401      	add	r1, r0
 8012698:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801269c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801269e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80126a0:	79fb      	ldrb	r3, [r7, #7]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d009      	beq.n	80126ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	68d9      	ldr	r1, [r3, #12]
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	015a      	lsls	r2, r3, #5
 80126ae:	6a3b      	ldr	r3, [r7, #32]
 80126b0:	4413      	add	r3, r2
 80126b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126b6:	460a      	mov	r2, r1
 80126b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80126ba:	6a3b      	ldr	r3, [r7, #32]
 80126bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126c0:	689b      	ldr	r3, [r3, #8]
 80126c2:	f003 0301 	and.w	r3, r3, #1
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	bf0c      	ite	eq
 80126ca:	2301      	moveq	r3, #1
 80126cc:	2300      	movne	r3, #0
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	015a      	lsls	r2, r3, #5
 80126d6:	6a3b      	ldr	r3, [r7, #32]
 80126d8:	4413      	add	r3, r2
 80126da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	69fa      	ldr	r2, [r7, #28]
 80126e2:	0151      	lsls	r1, r2, #5
 80126e4:	6a3a      	ldr	r2, [r7, #32]
 80126e6:	440a      	add	r2, r1
 80126e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80126ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80126f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	015a      	lsls	r2, r3, #5
 80126f6:	6a3b      	ldr	r3, [r7, #32]
 80126f8:	4413      	add	r3, r2
 80126fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	7e7b      	ldrb	r3, [r7, #25]
 8012702:	075b      	lsls	r3, r3, #29
 8012704:	69f9      	ldr	r1, [r7, #28]
 8012706:	0148      	lsls	r0, r1, #5
 8012708:	6a39      	ldr	r1, [r7, #32]
 801270a:	4401      	add	r1, r0
 801270c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8012710:	4313      	orrs	r3, r2
 8012712:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	015a      	lsls	r2, r3, #5
 8012718:	6a3b      	ldr	r3, [r7, #32]
 801271a:	4413      	add	r3, r2
 801271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801272a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	78db      	ldrb	r3, [r3, #3]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d004      	beq.n	801273e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801273a:	613b      	str	r3, [r7, #16]
 801273c:	e003      	b.n	8012746 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012744:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801274c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	015a      	lsls	r2, r3, #5
 8012752:	6a3b      	ldr	r3, [r7, #32]
 8012754:	4413      	add	r3, r2
 8012756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801275a:	461a      	mov	r2, r3
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8012760:	79fb      	ldrb	r3, [r7, #7]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d001      	beq.n	801276a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8012766:	2300      	movs	r3, #0
 8012768:	e04e      	b.n	8012808 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	78db      	ldrb	r3, [r3, #3]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d149      	bne.n	8012806 <USB_HC_StartXfer+0x276>
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	695b      	ldr	r3, [r3, #20]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d045      	beq.n	8012806 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	79db      	ldrb	r3, [r3, #7]
 801277e:	2b03      	cmp	r3, #3
 8012780:	d830      	bhi.n	80127e4 <USB_HC_StartXfer+0x254>
 8012782:	a201      	add	r2, pc, #4	; (adr r2, 8012788 <USB_HC_StartXfer+0x1f8>)
 8012784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012788:	08012799 	.word	0x08012799
 801278c:	080127bd 	.word	0x080127bd
 8012790:	08012799 	.word	0x08012799
 8012794:	080127bd 	.word	0x080127bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	695b      	ldr	r3, [r3, #20]
 801279c:	3303      	adds	r3, #3
 801279e:	089b      	lsrs	r3, r3, #2
 80127a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80127a2:	8afa      	ldrh	r2, [r7, #22]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d91c      	bls.n	80127e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	699b      	ldr	r3, [r3, #24]
 80127b2:	f043 0220 	orr.w	r2, r3, #32
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80127ba:	e015      	b.n	80127e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	695b      	ldr	r3, [r3, #20]
 80127c0:	3303      	adds	r3, #3
 80127c2:	089b      	lsrs	r3, r3, #2
 80127c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80127c6:	8afa      	ldrh	r2, [r7, #22]
 80127c8:	6a3b      	ldr	r3, [r7, #32]
 80127ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80127ce:	691b      	ldr	r3, [r3, #16]
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d90a      	bls.n	80127ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	699b      	ldr	r3, [r3, #24]
 80127da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80127e2:	e003      	b.n	80127ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 80127e4:	bf00      	nop
 80127e6:	e002      	b.n	80127ee <USB_HC_StartXfer+0x25e>
        break;
 80127e8:	bf00      	nop
 80127ea:	e000      	b.n	80127ee <USB_HC_StartXfer+0x25e>
        break;
 80127ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	68d9      	ldr	r1, [r3, #12]
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	785a      	ldrb	r2, [r3, #1]
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	695b      	ldr	r3, [r3, #20]
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	2000      	movs	r0, #0
 80127fe:	9000      	str	r0, [sp, #0]
 8012800:	68f8      	ldr	r0, [r7, #12]
 8012802:	f7ff fb8d 	bl	8011f20 <USB_WritePacket>
  }

  return HAL_OK;
 8012806:	2300      	movs	r3, #0
}
 8012808:	4618      	mov	r0, r3
 801280a:	3728      	adds	r7, #40	; 0x28
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	1ff80000 	.word	0x1ff80000

08012814 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012814:	b480      	push	{r7}
 8012816:	b085      	sub	sp, #20
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012826:	695b      	ldr	r3, [r3, #20]
 8012828:	b29b      	uxth	r3, r3
}
 801282a:	4618      	mov	r0, r3
 801282c:	3714      	adds	r7, #20
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr

08012836 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8012836:	b480      	push	{r7}
 8012838:	b089      	sub	sp, #36	; 0x24
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
 801283e:	460b      	mov	r3, r1
 8012840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8012846:	78fb      	ldrb	r3, [r7, #3]
 8012848:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 801284a:	2300      	movs	r3, #0
 801284c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	015a      	lsls	r2, r3, #5
 8012852:	69bb      	ldr	r3, [r7, #24]
 8012854:	4413      	add	r3, r2
 8012856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	0c9b      	lsrs	r3, r3, #18
 801285e:	f003 0303 	and.w	r3, r3, #3
 8012862:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	015a      	lsls	r2, r3, #5
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	4413      	add	r3, r2
 801286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	0fdb      	lsrs	r3, r3, #31
 8012874:	f003 0301 	and.w	r3, r3, #1
 8012878:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	f003 0320 	and.w	r3, r3, #32
 8012882:	2b20      	cmp	r3, #32
 8012884:	d104      	bne.n	8012890 <USB_HC_Halt+0x5a>
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d101      	bne.n	8012890 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 801288c:	2300      	movs	r3, #0
 801288e:	e0e8      	b.n	8012a62 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d002      	beq.n	801289c <USB_HC_Halt+0x66>
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	2b02      	cmp	r3, #2
 801289a:	d173      	bne.n	8012984 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	015a      	lsls	r2, r3, #5
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	4413      	add	r3, r2
 80128a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	697a      	ldr	r2, [r7, #20]
 80128ac:	0151      	lsls	r1, r2, #5
 80128ae:	69ba      	ldr	r2, [r7, #24]
 80128b0:	440a      	add	r2, r1
 80128b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80128ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	f003 0320 	and.w	r3, r3, #32
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f040 80cb 	bne.w	8012a60 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d143      	bne.n	801295e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	015a      	lsls	r2, r3, #5
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	4413      	add	r3, r2
 80128de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	697a      	ldr	r2, [r7, #20]
 80128e6:	0151      	lsls	r1, r2, #5
 80128e8:	69ba      	ldr	r2, [r7, #24]
 80128ea:	440a      	add	r2, r1
 80128ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	015a      	lsls	r2, r3, #5
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	4413      	add	r3, r2
 80128fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	697a      	ldr	r2, [r7, #20]
 8012906:	0151      	lsls	r1, r2, #5
 8012908:	69ba      	ldr	r2, [r7, #24]
 801290a:	440a      	add	r2, r1
 801290c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012914:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	015a      	lsls	r2, r3, #5
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	4413      	add	r3, r2
 801291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	697a      	ldr	r2, [r7, #20]
 8012926:	0151      	lsls	r1, r2, #5
 8012928:	69ba      	ldr	r2, [r7, #24]
 801292a:	440a      	add	r2, r1
 801292c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012934:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	3301      	adds	r3, #1
 801293a:	61fb      	str	r3, [r7, #28]
 801293c:	69fb      	ldr	r3, [r7, #28]
 801293e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012942:	d81d      	bhi.n	8012980 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	015a      	lsls	r2, r3, #5
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	4413      	add	r3, r2
 801294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801295a:	d0ec      	beq.n	8012936 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801295c:	e080      	b.n	8012a60 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	015a      	lsls	r2, r3, #5
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	4413      	add	r3, r2
 8012966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	697a      	ldr	r2, [r7, #20]
 801296e:	0151      	lsls	r1, r2, #5
 8012970:	69ba      	ldr	r2, [r7, #24]
 8012972:	440a      	add	r2, r1
 8012974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801297c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801297e:	e06f      	b.n	8012a60 <USB_HC_Halt+0x22a>
            break;
 8012980:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012982:	e06d      	b.n	8012a60 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	015a      	lsls	r2, r3, #5
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	4413      	add	r3, r2
 801298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	697a      	ldr	r2, [r7, #20]
 8012994:	0151      	lsls	r1, r2, #5
 8012996:	69ba      	ldr	r2, [r7, #24]
 8012998:	440a      	add	r2, r1
 801299a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801299e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80129a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80129aa:	691b      	ldr	r3, [r3, #16]
 80129ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d143      	bne.n	8012a3c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	015a      	lsls	r2, r3, #5
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	4413      	add	r3, r2
 80129bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	697a      	ldr	r2, [r7, #20]
 80129c4:	0151      	lsls	r1, r2, #5
 80129c6:	69ba      	ldr	r2, [r7, #24]
 80129c8:	440a      	add	r2, r1
 80129ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80129ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	015a      	lsls	r2, r3, #5
 80129d8:	69bb      	ldr	r3, [r7, #24]
 80129da:	4413      	add	r3, r2
 80129dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	697a      	ldr	r2, [r7, #20]
 80129e4:	0151      	lsls	r1, r2, #5
 80129e6:	69ba      	ldr	r2, [r7, #24]
 80129e8:	440a      	add	r2, r1
 80129ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80129ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80129f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	015a      	lsls	r2, r3, #5
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	4413      	add	r3, r2
 80129fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	697a      	ldr	r2, [r7, #20]
 8012a04:	0151      	lsls	r1, r2, #5
 8012a06:	69ba      	ldr	r2, [r7, #24]
 8012a08:	440a      	add	r2, r1
 8012a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012a12:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	3301      	adds	r3, #1
 8012a18:	61fb      	str	r3, [r7, #28]
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012a20:	d81d      	bhi.n	8012a5e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	015a      	lsls	r2, r3, #5
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	4413      	add	r3, r2
 8012a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a38:	d0ec      	beq.n	8012a14 <USB_HC_Halt+0x1de>
 8012a3a:	e011      	b.n	8012a60 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	015a      	lsls	r2, r3, #5
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	4413      	add	r3, r2
 8012a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	697a      	ldr	r2, [r7, #20]
 8012a4c:	0151      	lsls	r1, r2, #5
 8012a4e:	69ba      	ldr	r2, [r7, #24]
 8012a50:	440a      	add	r2, r1
 8012a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012a5a:	6013      	str	r3, [r2, #0]
 8012a5c:	e000      	b.n	8012a60 <USB_HC_Halt+0x22a>
          break;
 8012a5e:	bf00      	nop
    }
  }

  return HAL_OK;
 8012a60:	2300      	movs	r3, #0
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3724      	adds	r7, #36	; 0x24
 8012a66:	46bd      	mov	sp, r7
 8012a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6c:	4770      	bx	lr
	...

08012a70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b087      	sub	sp, #28
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	460b      	mov	r3, r1
 8012a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012a80:	78fb      	ldrb	r3, [r7, #3]
 8012a82:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012a84:	2301      	movs	r3, #1
 8012a86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	04da      	lsls	r2, r3, #19
 8012a8c:	4b15      	ldr	r3, [pc, #84]	; (8012ae4 <USB_DoPing+0x74>)
 8012a8e:	4013      	ands	r3, r2
 8012a90:	693a      	ldr	r2, [r7, #16]
 8012a92:	0151      	lsls	r1, r2, #5
 8012a94:	697a      	ldr	r2, [r7, #20]
 8012a96:	440a      	add	r2, r1
 8012a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012aa0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	015a      	lsls	r2, r3, #5
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012ab8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012ac0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	015a      	lsls	r2, r3, #5
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	4413      	add	r3, r2
 8012aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ace:	461a      	mov	r2, r3
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012ad4:	2300      	movs	r3, #0
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	371c      	adds	r7, #28
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	1ff80000 	.word	0x1ff80000

08012ae8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b086      	sub	sp, #24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8012af4:	2300      	movs	r3, #0
 8012af6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7ff f98e 	bl	8011e1a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8012afe:	2110      	movs	r1, #16
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7ff f9c5 	bl	8011e90 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ff f9e8 	bl	8011edc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	613b      	str	r3, [r7, #16]
 8012b10:	e01f      	b.n	8012b52 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	015a      	lsls	r2, r3, #5
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	4413      	add	r3, r2
 8012b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012b38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	015a      	lsls	r2, r3, #5
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	4413      	add	r3, r2
 8012b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b46:	461a      	mov	r2, r3
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	3301      	adds	r3, #1
 8012b50:	613b      	str	r3, [r7, #16]
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	2b0f      	cmp	r3, #15
 8012b56:	d9dc      	bls.n	8012b12 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012b58:	2300      	movs	r3, #0
 8012b5a:	613b      	str	r3, [r7, #16]
 8012b5c:	e034      	b.n	8012bc8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	015a      	lsls	r2, r3, #5
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	4413      	add	r3, r2
 8012b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b74:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012b7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012b84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	015a      	lsls	r2, r3, #5
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b92:	461a      	mov	r2, r3
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	617b      	str	r3, [r7, #20]
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012ba4:	d80c      	bhi.n	8012bc0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	015a      	lsls	r2, r3, #5
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	4413      	add	r3, r2
 8012bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bbc:	d0ec      	beq.n	8012b98 <USB_StopHost+0xb0>
 8012bbe:	e000      	b.n	8012bc2 <USB_StopHost+0xda>
        break;
 8012bc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	3301      	adds	r3, #1
 8012bc6:	613b      	str	r3, [r7, #16]
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	2b0f      	cmp	r3, #15
 8012bcc:	d9c7      	bls.n	8012b5e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8012bda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f04f 32ff 	mov.w	r2, #4294967295
 8012be2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7ff f907 	bl	8011df8 <USB_EnableGlobalInt>

  return HAL_OK;
 8012bea:	2300      	movs	r3, #0
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3718      	adds	r7, #24
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012bf8:	4904      	ldr	r1, [pc, #16]	; (8012c0c <MX_FATFS_Init+0x18>)
 8012bfa:	4805      	ldr	r0, [pc, #20]	; (8012c10 <MX_FATFS_Init+0x1c>)
 8012bfc:	f002 fbf0 	bl	80153e0 <FATFS_LinkDriver>
 8012c00:	4603      	mov	r3, r0
 8012c02:	461a      	mov	r2, r3
 8012c04:	4b03      	ldr	r3, [pc, #12]	; (8012c14 <MX_FATFS_Init+0x20>)
 8012c06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012c08:	bf00      	nop
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	2004be70 	.word	0x2004be70
 8012c10:	0801ce80 	.word	0x0801ce80
 8012c14:	2004be6c 	.word	0x2004be6c

08012c18 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012c22:	f000 f87b 	bl	8012d1c <BSP_SD_IsDetected>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d001      	beq.n	8012c30 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012c2c:	2302      	movs	r3, #2
 8012c2e:	e012      	b.n	8012c56 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012c30:	480b      	ldr	r0, [pc, #44]	; (8012c60 <BSP_SD_Init+0x48>)
 8012c32:	f7fb fae4 	bl	800e1fe <HAL_SD_Init>
 8012c36:	4603      	mov	r3, r0
 8012c38:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012c3a:	79fb      	ldrb	r3, [r7, #7]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d109      	bne.n	8012c54 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012c40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012c44:	4806      	ldr	r0, [pc, #24]	; (8012c60 <BSP_SD_Init+0x48>)
 8012c46:	f7fb ff33 	bl	800eab0 <HAL_SD_ConfigWideBusOperation>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d001      	beq.n	8012c54 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012c50:	2301      	movs	r3, #1
 8012c52:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012c54:	79fb      	ldrb	r3, [r7, #7]
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3708      	adds	r7, #8
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	2000bc90 	.word	0x2000bc90

08012c64 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b086      	sub	sp, #24
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012c70:	2300      	movs	r3, #0
 8012c72:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	68ba      	ldr	r2, [r7, #8]
 8012c78:	68f9      	ldr	r1, [r7, #12]
 8012c7a:	4806      	ldr	r0, [pc, #24]	; (8012c94 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012c7c:	f7fb fb76 	bl	800e36c <HAL_SD_ReadBlocks_DMA>
 8012c80:	4603      	mov	r3, r0
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d001      	beq.n	8012c8a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012c86:	2301      	movs	r3, #1
 8012c88:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3718      	adds	r7, #24
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	2000bc90 	.word	0x2000bc90

08012c98 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	60b9      	str	r1, [r7, #8]
 8012ca2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	68ba      	ldr	r2, [r7, #8]
 8012cac:	68f9      	ldr	r1, [r7, #12]
 8012cae:	4806      	ldr	r0, [pc, #24]	; (8012cc8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012cb0:	f7fb fc3e 	bl	800e530 <HAL_SD_WriteBlocks_DMA>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d001      	beq.n	8012cbe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012cba:	2301      	movs	r3, #1
 8012cbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3718      	adds	r7, #24
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	2000bc90 	.word	0x2000bc90

08012ccc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012cd0:	4805      	ldr	r0, [pc, #20]	; (8012ce8 <BSP_SD_GetCardState+0x1c>)
 8012cd2:	f7fb ff87 	bl	800ebe4 <HAL_SD_GetCardState>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b04      	cmp	r3, #4
 8012cda:	bf14      	ite	ne
 8012cdc:	2301      	movne	r3, #1
 8012cde:	2300      	moveq	r3, #0
 8012ce0:	b2db      	uxtb	r3, r3
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	2000bc90 	.word	0x2000bc90

08012cec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012cf4:	6879      	ldr	r1, [r7, #4]
 8012cf6:	4803      	ldr	r0, [pc, #12]	; (8012d04 <BSP_SD_GetCardInfo+0x18>)
 8012cf8:	f7fb feae 	bl	800ea58 <HAL_SD_GetCardInfo>
}
 8012cfc:	bf00      	nop
 8012cfe:	3708      	adds	r7, #8
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}
 8012d04:	2000bc90 	.word	0x2000bc90

08012d08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012d10:	f000 f9b2 	bl	8013078 <BSP_SD_ReadCpltCallback>
}
 8012d14:	bf00      	nop
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012d22:	2301      	movs	r3, #1
 8012d24:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012d26:	f000 f80b 	bl	8012d40 <BSP_PlatformIsDetected>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d101      	bne.n	8012d34 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012d30:	2300      	movs	r3, #0
 8012d32:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012d34:	79fb      	ldrb	r3, [r7, #7]
 8012d36:	b2db      	uxtb	r3, r3
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012d46:	2301      	movs	r3, #1
 8012d48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d4e:	4806      	ldr	r0, [pc, #24]	; (8012d68 <BSP_PlatformIsDetected+0x28>)
 8012d50:	f7f5 fa4c 	bl	80081ec <HAL_GPIO_ReadPin>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d001      	beq.n	8012d5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	40020800 	.word	0x40020800

08012d6c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8012d74:	f002 fb80 	bl	8015478 <osKernelSysTick>
 8012d78:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8012d7a:	e006      	b.n	8012d8a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012d7c:	f7ff ffa6 	bl	8012ccc <BSP_SD_GetCardState>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d101      	bne.n	8012d8a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012d86:	2300      	movs	r3, #0
 8012d88:	e009      	b.n	8012d9e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8012d8a:	f002 fb75 	bl	8015478 <osKernelSysTick>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	1ad3      	subs	r3, r2, r3
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d8f0      	bhi.n	8012d7c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3710      	adds	r7, #16
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
	...

08012da8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	4603      	mov	r3, r0
 8012db0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012db2:	4b0b      	ldr	r3, [pc, #44]	; (8012de0 <SD_CheckStatus+0x38>)
 8012db4:	2201      	movs	r2, #1
 8012db6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012db8:	f7ff ff88 	bl	8012ccc <BSP_SD_GetCardState>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d107      	bne.n	8012dd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012dc2:	4b07      	ldr	r3, [pc, #28]	; (8012de0 <SD_CheckStatus+0x38>)
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	f023 0301 	bic.w	r3, r3, #1
 8012dcc:	b2da      	uxtb	r2, r3
 8012dce:	4b04      	ldr	r3, [pc, #16]	; (8012de0 <SD_CheckStatus+0x38>)
 8012dd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012dd2:	4b03      	ldr	r3, [pc, #12]	; (8012de0 <SD_CheckStatus+0x38>)
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	b2db      	uxtb	r3, r3
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}
 8012de0:	20000039 	.word	0x20000039

08012de4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012de4:	b590      	push	{r4, r7, lr}
 8012de6:	b087      	sub	sp, #28
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	4603      	mov	r3, r0
 8012dec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8012dee:	4b20      	ldr	r3, [pc, #128]	; (8012e70 <SD_initialize+0x8c>)
 8012df0:	2201      	movs	r2, #1
 8012df2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8012df4:	f002 fb34 	bl	8015460 <osKernelRunning>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d030      	beq.n	8012e60 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8012dfe:	f7ff ff0b 	bl	8012c18 <BSP_SD_Init>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d107      	bne.n	8012e18 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8012e08:	79fb      	ldrb	r3, [r7, #7]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7ff ffcc 	bl	8012da8 <SD_CheckStatus>
 8012e10:	4603      	mov	r3, r0
 8012e12:	461a      	mov	r2, r3
 8012e14:	4b16      	ldr	r3, [pc, #88]	; (8012e70 <SD_initialize+0x8c>)
 8012e16:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8012e18:	4b15      	ldr	r3, [pc, #84]	; (8012e70 <SD_initialize+0x8c>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	b2db      	uxtb	r3, r3
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d01e      	beq.n	8012e60 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8012e22:	4b14      	ldr	r3, [pc, #80]	; (8012e74 <SD_initialize+0x90>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d10e      	bne.n	8012e48 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8012e2a:	4b13      	ldr	r3, [pc, #76]	; (8012e78 <SD_initialize+0x94>)
 8012e2c:	f107 0408 	add.w	r4, r7, #8
 8012e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8012e36:	f107 0308 	add.w	r3, r7, #8
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f002 fc17 	bl	8015670 <osMessageCreate>
 8012e42:	4603      	mov	r3, r0
 8012e44:	4a0b      	ldr	r2, [pc, #44]	; (8012e74 <SD_initialize+0x90>)
 8012e46:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8012e48:	4b0a      	ldr	r3, [pc, #40]	; (8012e74 <SD_initialize+0x90>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d107      	bne.n	8012e60 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8012e50:	4b07      	ldr	r3, [pc, #28]	; (8012e70 <SD_initialize+0x8c>)
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	f043 0301 	orr.w	r3, r3, #1
 8012e5a:	b2da      	uxtb	r2, r3
 8012e5c:	4b04      	ldr	r3, [pc, #16]	; (8012e70 <SD_initialize+0x8c>)
 8012e5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012e60:	4b03      	ldr	r3, [pc, #12]	; (8012e70 <SD_initialize+0x8c>)
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	b2db      	uxtb	r3, r3
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	371c      	adds	r7, #28
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd90      	pop	{r4, r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	20000039 	.word	0x20000039
 8012e74:	20000384 	.word	0x20000384
 8012e78:	0801aee0 	.word	0x0801aee0

08012e7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012e86:	79fb      	ldrb	r3, [r7, #7]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7ff ff8d 	bl	8012da8 <SD_CheckStatus>
 8012e8e:	4603      	mov	r3, r0
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3708      	adds	r7, #8
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b08a      	sub	sp, #40	; 0x28
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60b9      	str	r1, [r7, #8]
 8012ea0:	607a      	str	r2, [r7, #4]
 8012ea2:	603b      	str	r3, [r7, #0]
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012eae:	f247 5030 	movw	r0, #30000	; 0x7530
 8012eb2:	f7ff ff5b 	bl	8012d6c <SD_CheckStatusWithTimeout>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	da02      	bge.n	8012ec2 <SD_read+0x2a>
  {
    return res;
 8012ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ec0:	e032      	b.n	8012f28 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	6879      	ldr	r1, [r7, #4]
 8012ec6:	68b8      	ldr	r0, [r7, #8]
 8012ec8:	f7ff fecc 	bl	8012c64 <BSP_SD_ReadBlocks_DMA>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8012ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d124      	bne.n	8012f24 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012eda:	4b15      	ldr	r3, [pc, #84]	; (8012f30 <SD_read+0x98>)
 8012edc:	6819      	ldr	r1, [r3, #0]
 8012ede:	f107 0314 	add.w	r3, r7, #20
 8012ee2:	f247 5230 	movw	r2, #30000	; 0x7530
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f002 fc2a 	bl	8015740 <osMessageGet>

    if (event.status == osEventMessage)
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	2b10      	cmp	r3, #16
 8012ef0:	d118      	bne.n	8012f24 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d115      	bne.n	8012f24 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8012ef8:	f002 fabe 	bl	8015478 <osKernelSysTick>
 8012efc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012efe:	e008      	b.n	8012f12 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012f00:	f7ff fee4 	bl	8012ccc <BSP_SD_GetCardState>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d103      	bne.n	8012f12 <SD_read+0x7a>
              {
                res = RES_OK;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8012f10:	e008      	b.n	8012f24 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012f12:	f002 fab1 	bl	8015478 <osKernelSysTick>
 8012f16:	4602      	mov	r2, r0
 8012f18:	6a3b      	ldr	r3, [r7, #32]
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012f20:	4293      	cmp	r3, r2
 8012f22:	d9ed      	bls.n	8012f00 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8012f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3728      	adds	r7, #40	; 0x28
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	20000384 	.word	0x20000384

08012f34 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b08a      	sub	sp, #40	; 0x28
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60b9      	str	r1, [r7, #8]
 8012f3c:	607a      	str	r2, [r7, #4]
 8012f3e:	603b      	str	r3, [r7, #0]
 8012f40:	4603      	mov	r3, r0
 8012f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012f44:	2301      	movs	r3, #1
 8012f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012f4a:	f247 5030 	movw	r0, #30000	; 0x7530
 8012f4e:	f7ff ff0d 	bl	8012d6c <SD_CheckStatusWithTimeout>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	da02      	bge.n	8012f5e <SD_write+0x2a>
  {
    return res;
 8012f58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f5c:	e02e      	b.n	8012fbc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012f5e:	683a      	ldr	r2, [r7, #0]
 8012f60:	6879      	ldr	r1, [r7, #4]
 8012f62:	68b8      	ldr	r0, [r7, #8]
 8012f64:	f7ff fe98 	bl	8012c98 <BSP_SD_WriteBlocks_DMA>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d124      	bne.n	8012fb8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8012f6e:	4b15      	ldr	r3, [pc, #84]	; (8012fc4 <SD_write+0x90>)
 8012f70:	6819      	ldr	r1, [r3, #0]
 8012f72:	f107 0314 	add.w	r3, r7, #20
 8012f76:	f247 5230 	movw	r2, #30000	; 0x7530
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f002 fbe0 	bl	8015740 <osMessageGet>

    if (event.status == osEventMessage)
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	2b10      	cmp	r3, #16
 8012f84:	d118      	bne.n	8012fb8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8012f86:	69bb      	ldr	r3, [r7, #24]
 8012f88:	2b02      	cmp	r3, #2
 8012f8a:	d115      	bne.n	8012fb8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8012f8c:	f002 fa74 	bl	8015478 <osKernelSysTick>
 8012f90:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012f92:	e008      	b.n	8012fa6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012f94:	f7ff fe9a 	bl	8012ccc <BSP_SD_GetCardState>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d103      	bne.n	8012fa6 <SD_write+0x72>
          {
            res = RES_OK;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012fa4:	e008      	b.n	8012fb8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8012fa6:	f002 fa67 	bl	8015478 <osKernelSysTick>
 8012faa:	4602      	mov	r2, r0
 8012fac:	6a3b      	ldr	r3, [r7, #32]
 8012fae:	1ad3      	subs	r3, r2, r3
 8012fb0:	f247 522f 	movw	r2, #29999	; 0x752f
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d9ed      	bls.n	8012f94 <SD_write+0x60>
    }

  }
#endif

  return res;
 8012fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3728      	adds	r7, #40	; 0x28
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	20000384 	.word	0x20000384

08012fc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b08c      	sub	sp, #48	; 0x30
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	4603      	mov	r3, r0
 8012fd0:	603a      	str	r2, [r7, #0]
 8012fd2:	71fb      	strb	r3, [r7, #7]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012fd8:	2301      	movs	r3, #1
 8012fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012fde:	4b25      	ldr	r3, [pc, #148]	; (8013074 <SD_ioctl+0xac>)
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	f003 0301 	and.w	r3, r3, #1
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d001      	beq.n	8012ff0 <SD_ioctl+0x28>
 8012fec:	2303      	movs	r3, #3
 8012fee:	e03c      	b.n	801306a <SD_ioctl+0xa2>

  switch (cmd)
 8012ff0:	79bb      	ldrb	r3, [r7, #6]
 8012ff2:	2b03      	cmp	r3, #3
 8012ff4:	d834      	bhi.n	8013060 <SD_ioctl+0x98>
 8012ff6:	a201      	add	r2, pc, #4	; (adr r2, 8012ffc <SD_ioctl+0x34>)
 8012ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ffc:	0801300d 	.word	0x0801300d
 8013000:	08013015 	.word	0x08013015
 8013004:	0801302d 	.word	0x0801302d
 8013008:	08013047 	.word	0x08013047
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013012:	e028      	b.n	8013066 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013014:	f107 030c 	add.w	r3, r7, #12
 8013018:	4618      	mov	r0, r3
 801301a:	f7ff fe67 	bl	8012cec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013024:	2300      	movs	r3, #0
 8013026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801302a:	e01c      	b.n	8013066 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801302c:	f107 030c 	add.w	r3, r7, #12
 8013030:	4618      	mov	r0, r3
 8013032:	f7ff fe5b 	bl	8012cec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013038:	b29a      	uxth	r2, r3
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801303e:	2300      	movs	r3, #0
 8013040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013044:	e00f      	b.n	8013066 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013046:	f107 030c 	add.w	r3, r7, #12
 801304a:	4618      	mov	r0, r3
 801304c:	f7ff fe4e 	bl	8012cec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013052:	0a5a      	lsrs	r2, r3, #9
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013058:	2300      	movs	r3, #0
 801305a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801305e:	e002      	b.n	8013066 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013060:	2304      	movs	r3, #4
 8013062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801306a:	4618      	mov	r0, r3
 801306c:	3730      	adds	r7, #48	; 0x30
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	20000039 	.word	0x20000039

08013078 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 801307c:	4b04      	ldr	r3, [pc, #16]	; (8013090 <BSP_SD_ReadCpltCallback+0x18>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2200      	movs	r2, #0
 8013082:	2101      	movs	r1, #1
 8013084:	4618      	mov	r0, r3
 8013086:	f002 fb1b 	bl	80156c0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801308a:	bf00      	nop
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	20000384 	.word	0x20000384

08013094 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8013094:	b480      	push	{r7}
 8013096:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8013098:	bf00      	nop
 801309a:	46bd      	mov	sp, r7
 801309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a0:	4770      	bx	lr

080130a2 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80130a2:	b590      	push	{r4, r7, lr}
 80130a4:	b089      	sub	sp, #36	; 0x24
 80130a6:	af04      	add	r7, sp, #16
 80130a8:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80130aa:	2301      	movs	r3, #1
 80130ac:	2202      	movs	r2, #2
 80130ae:	2102      	movs	r1, #2
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f000 fcb9 	bl	8013a28 <USBH_FindInterface>
 80130b6:	4603      	mov	r3, r0
 80130b8:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80130ba:	7bfb      	ldrb	r3, [r7, #15]
 80130bc:	2bff      	cmp	r3, #255	; 0xff
 80130be:	d002      	beq.n	80130c6 <USBH_CDC_InterfaceInit+0x24>
 80130c0:	7bfb      	ldrb	r3, [r7, #15]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d901      	bls.n	80130ca <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80130c6:	2302      	movs	r3, #2
 80130c8:	e13d      	b.n	8013346 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80130ca:	7bfb      	ldrb	r3, [r7, #15]
 80130cc:	4619      	mov	r1, r3
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 fc8e 	bl	80139f0 <USBH_SelectInterface>
 80130d4:	4603      	mov	r3, r0
 80130d6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80130d8:	7bbb      	ldrb	r3, [r7, #14]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d001      	beq.n	80130e2 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80130de:	2302      	movs	r3, #2
 80130e0:	e131      	b.n	8013346 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80130e8:	2050      	movs	r0, #80	; 0x50
 80130ea:	f006 fb2f 	bl	801974c <malloc>
 80130ee:	4603      	mov	r3, r0
 80130f0:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130f8:	69db      	ldr	r3, [r3, #28]
 80130fa:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d101      	bne.n	8013106 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8013102:	2302      	movs	r3, #2
 8013104:	e11f      	b.n	8013346 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8013106:	2250      	movs	r2, #80	; 0x50
 8013108:	2100      	movs	r1, #0
 801310a:	68b8      	ldr	r0, [r7, #8]
 801310c:	f006 fb3c 	bl	8019788 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8013110:	7bfb      	ldrb	r3, [r7, #15]
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	211a      	movs	r1, #26
 8013116:	fb01 f303 	mul.w	r3, r1, r3
 801311a:	4413      	add	r3, r2
 801311c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	b25b      	sxtb	r3, r3
 8013124:	2b00      	cmp	r3, #0
 8013126:	da15      	bge.n	8013154 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013128:	7bfb      	ldrb	r3, [r7, #15]
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	211a      	movs	r1, #26
 801312e:	fb01 f303 	mul.w	r3, r1, r3
 8013132:	4413      	add	r3, r2
 8013134:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013138:	781a      	ldrb	r2, [r3, #0]
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801313e:	7bfb      	ldrb	r3, [r7, #15]
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	211a      	movs	r1, #26
 8013144:	fb01 f303 	mul.w	r3, r1, r3
 8013148:	4413      	add	r3, r2
 801314a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801314e:	881a      	ldrh	r2, [r3, #0]
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	785b      	ldrb	r3, [r3, #1]
 8013158:	4619      	mov	r1, r3
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f002 f891 	bl	8015282 <USBH_AllocPipe>
 8013160:	4603      	mov	r3, r0
 8013162:	461a      	mov	r2, r3
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	7819      	ldrb	r1, [r3, #0]
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	7858      	ldrb	r0, [r3, #1]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	8952      	ldrh	r2, [r2, #10]
 8013180:	9202      	str	r2, [sp, #8]
 8013182:	2203      	movs	r2, #3
 8013184:	9201      	str	r2, [sp, #4]
 8013186:	9300      	str	r3, [sp, #0]
 8013188:	4623      	mov	r3, r4
 801318a:	4602      	mov	r2, r0
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f002 f849 	bl	8015224 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	2200      	movs	r2, #0
 8013198:	4619      	mov	r1, r3
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f005 f936 	bl	801840c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80131a0:	2300      	movs	r3, #0
 80131a2:	2200      	movs	r2, #0
 80131a4:	210a      	movs	r1, #10
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f000 fc3e 	bl	8013a28 <USBH_FindInterface>
 80131ac:	4603      	mov	r3, r0
 80131ae:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80131b0:	7bfb      	ldrb	r3, [r7, #15]
 80131b2:	2bff      	cmp	r3, #255	; 0xff
 80131b4:	d002      	beq.n	80131bc <USBH_CDC_InterfaceInit+0x11a>
 80131b6:	7bfb      	ldrb	r3, [r7, #15]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d901      	bls.n	80131c0 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80131bc:	2302      	movs	r3, #2
 80131be:	e0c2      	b.n	8013346 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80131c0:	7bfb      	ldrb	r3, [r7, #15]
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	211a      	movs	r1, #26
 80131c6:	fb01 f303 	mul.w	r3, r1, r3
 80131ca:	4413      	add	r3, r2
 80131cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	b25b      	sxtb	r3, r3
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	da16      	bge.n	8013206 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80131d8:	7bfb      	ldrb	r3, [r7, #15]
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	211a      	movs	r1, #26
 80131de:	fb01 f303 	mul.w	r3, r1, r3
 80131e2:	4413      	add	r3, r2
 80131e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80131e8:	781a      	ldrb	r2, [r3, #0]
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80131ee:	7bfb      	ldrb	r3, [r7, #15]
 80131f0:	687a      	ldr	r2, [r7, #4]
 80131f2:	211a      	movs	r1, #26
 80131f4:	fb01 f303 	mul.w	r3, r1, r3
 80131f8:	4413      	add	r3, r2
 80131fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80131fe:	881a      	ldrh	r2, [r3, #0]
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	835a      	strh	r2, [r3, #26]
 8013204:	e015      	b.n	8013232 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013206:	7bfb      	ldrb	r3, [r7, #15]
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	211a      	movs	r1, #26
 801320c:	fb01 f303 	mul.w	r3, r1, r3
 8013210:	4413      	add	r3, r2
 8013212:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013216:	781a      	ldrb	r2, [r3, #0]
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801321c:	7bfb      	ldrb	r3, [r7, #15]
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	211a      	movs	r1, #26
 8013222:	fb01 f303 	mul.w	r3, r1, r3
 8013226:	4413      	add	r3, r2
 8013228:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801322c:	881a      	ldrh	r2, [r3, #0]
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8013232:	7bfb      	ldrb	r3, [r7, #15]
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	211a      	movs	r1, #26
 8013238:	fb01 f303 	mul.w	r3, r1, r3
 801323c:	4413      	add	r3, r2
 801323e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	b25b      	sxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	da16      	bge.n	8013278 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801324a:	7bfb      	ldrb	r3, [r7, #15]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	211a      	movs	r1, #26
 8013250:	fb01 f303 	mul.w	r3, r1, r3
 8013254:	4413      	add	r3, r2
 8013256:	f203 3356 	addw	r3, r3, #854	; 0x356
 801325a:	781a      	ldrb	r2, [r3, #0]
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013260:	7bfb      	ldrb	r3, [r7, #15]
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	211a      	movs	r1, #26
 8013266:	fb01 f303 	mul.w	r3, r1, r3
 801326a:	4413      	add	r3, r2
 801326c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013270:	881a      	ldrh	r2, [r3, #0]
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	835a      	strh	r2, [r3, #26]
 8013276:	e015      	b.n	80132a4 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013278:	7bfb      	ldrb	r3, [r7, #15]
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	211a      	movs	r1, #26
 801327e:	fb01 f303 	mul.w	r3, r1, r3
 8013282:	4413      	add	r3, r2
 8013284:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013288:	781a      	ldrb	r2, [r3, #0]
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	211a      	movs	r1, #26
 8013294:	fb01 f303 	mul.w	r3, r1, r3
 8013298:	4413      	add	r3, r2
 801329a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801329e:	881a      	ldrh	r2, [r3, #0]
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	7b9b      	ldrb	r3, [r3, #14]
 80132a8:	4619      	mov	r1, r3
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f001 ffe9 	bl	8015282 <USBH_AllocPipe>
 80132b0:	4603      	mov	r3, r0
 80132b2:	461a      	mov	r2, r3
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	7bdb      	ldrb	r3, [r3, #15]
 80132bc:	4619      	mov	r1, r3
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f001 ffdf 	bl	8015282 <USBH_AllocPipe>
 80132c4:	4603      	mov	r3, r0
 80132c6:	461a      	mov	r2, r3
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	7b59      	ldrb	r1, [r3, #13]
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	7b98      	ldrb	r0, [r3, #14]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80132e0:	68ba      	ldr	r2, [r7, #8]
 80132e2:	8b12      	ldrh	r2, [r2, #24]
 80132e4:	9202      	str	r2, [sp, #8]
 80132e6:	2202      	movs	r2, #2
 80132e8:	9201      	str	r2, [sp, #4]
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	4623      	mov	r3, r4
 80132ee:	4602      	mov	r2, r0
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f001 ff97 	bl	8015224 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	7b19      	ldrb	r1, [r3, #12]
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	7bd8      	ldrb	r0, [r3, #15]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801330a:	68ba      	ldr	r2, [r7, #8]
 801330c:	8b52      	ldrh	r2, [r2, #26]
 801330e:	9202      	str	r2, [sp, #8]
 8013310:	2202      	movs	r2, #2
 8013312:	9201      	str	r2, [sp, #4]
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	4623      	mov	r3, r4
 8013318:	4602      	mov	r2, r0
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f001 ff82 	bl	8015224 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	2200      	movs	r2, #0
 8013324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	7b5b      	ldrb	r3, [r3, #13]
 801332c:	2200      	movs	r2, #0
 801332e:	4619      	mov	r1, r3
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f005 f86b 	bl	801840c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	7b1b      	ldrb	r3, [r3, #12]
 801333a:	2200      	movs	r2, #0
 801333c:	4619      	mov	r1, r3
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f005 f864 	bl	801840c <USBH_LL_SetToggle>

  return USBH_OK;
 8013344:	2300      	movs	r3, #0
}
 8013346:	4618      	mov	r0, r3
 8013348:	3714      	adds	r7, #20
 801334a:	46bd      	mov	sp, r7
 801334c:	bd90      	pop	{r4, r7, pc}

0801334e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801334e:	b580      	push	{r7, lr}
 8013350:	b084      	sub	sp, #16
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801335c:	69db      	ldr	r3, [r3, #28]
 801335e:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d00e      	beq.n	8013386 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	4619      	mov	r1, r3
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f001 ff77 	bl	8015262 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	4619      	mov	r1, r3
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f001 ffa2 	bl	80152c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2200      	movs	r2, #0
 8013384:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	7b1b      	ldrb	r3, [r3, #12]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00e      	beq.n	80133ac <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	7b1b      	ldrb	r3, [r3, #12]
 8013392:	4619      	mov	r1, r3
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f001 ff64 	bl	8015262 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	7b1b      	ldrb	r3, [r3, #12]
 801339e:	4619      	mov	r1, r3
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f001 ff8f 	bl	80152c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	2200      	movs	r2, #0
 80133aa:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	7b5b      	ldrb	r3, [r3, #13]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d00e      	beq.n	80133d2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	7b5b      	ldrb	r3, [r3, #13]
 80133b8:	4619      	mov	r1, r3
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f001 ff51 	bl	8015262 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	7b5b      	ldrb	r3, [r3, #13]
 80133c4:	4619      	mov	r1, r3
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f001 ff7c 	bl	80152c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	2200      	movs	r2, #0
 80133d0:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80133d8:	69db      	ldr	r3, [r3, #28]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00b      	beq.n	80133f6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80133e4:	69db      	ldr	r3, [r3, #28]
 80133e6:	4618      	mov	r0, r3
 80133e8:	f006 f9b8 	bl	801975c <free>
    phost->pActiveClass->pData = 0U;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80133f2:	2200      	movs	r2, #0
 80133f4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80133f6:	2300      	movs	r3, #0
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3710      	adds	r7, #16
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801340e:	69db      	ldr	r3, [r3, #28]
 8013410:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	3340      	adds	r3, #64	; 0x40
 8013416:	4619      	mov	r1, r3
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f000 f8b2 	bl	8013582 <GetLineCoding>
 801341e:	4603      	mov	r3, r0
 8013420:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8013422:	7afb      	ldrb	r3, [r7, #11]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d105      	bne.n	8013434 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801342e:	2102      	movs	r1, #2
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8013434:	7afb      	ldrb	r3, [r7, #11]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
	...

08013440 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013448:	2301      	movs	r3, #1
 801344a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 801344c:	2300      	movs	r3, #0
 801344e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013456:	69db      	ldr	r3, [r3, #28]
 8013458:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8013460:	2b04      	cmp	r3, #4
 8013462:	d877      	bhi.n	8013554 <USBH_CDC_Process+0x114>
 8013464:	a201      	add	r2, pc, #4	; (adr r2, 801346c <USBH_CDC_Process+0x2c>)
 8013466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801346a:	bf00      	nop
 801346c:	08013481 	.word	0x08013481
 8013470:	08013487 	.word	0x08013487
 8013474:	080134b7 	.word	0x080134b7
 8013478:	0801352b 	.word	0x0801352b
 801347c:	08013539 	.word	0x08013539
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8013480:	2300      	movs	r3, #0
 8013482:	73fb      	strb	r3, [r7, #15]
      break;
 8013484:	e06d      	b.n	8013562 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801348a:	4619      	mov	r1, r3
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f000 f897 	bl	80135c0 <SetLineCoding>
 8013492:	4603      	mov	r3, r0
 8013494:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013496:	7bbb      	ldrb	r3, [r7, #14]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d104      	bne.n	80134a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	2202      	movs	r2, #2
 80134a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80134a4:	e058      	b.n	8013558 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80134a6:	7bbb      	ldrb	r3, [r7, #14]
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d055      	beq.n	8013558 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	2204      	movs	r2, #4
 80134b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80134b4:	e050      	b.n	8013558 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	3340      	adds	r3, #64	; 0x40
 80134ba:	4619      	mov	r1, r3
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f000 f860 	bl	8013582 <GetLineCoding>
 80134c2:	4603      	mov	r3, r0
 80134c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80134c6:	7bbb      	ldrb	r3, [r7, #14]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d126      	bne.n	801351a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	2200      	movs	r2, #0
 80134d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134de:	791b      	ldrb	r3, [r3, #4]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d13b      	bne.n	801355c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80134f0:	429a      	cmp	r2, r3
 80134f2:	d133      	bne.n	801355c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013500:	429a      	cmp	r2, r3
 8013502:	d12b      	bne.n	801355c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801350c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801350e:	429a      	cmp	r2, r3
 8013510:	d124      	bne.n	801355c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f000 f982 	bl	801381c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013518:	e020      	b.n	801355c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801351a:	7bbb      	ldrb	r3, [r7, #14]
 801351c:	2b01      	cmp	r3, #1
 801351e:	d01d      	beq.n	801355c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	2204      	movs	r2, #4
 8013524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8013528:	e018      	b.n	801355c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f000 f867 	bl	80135fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f000 f8f6 	bl	8013722 <CDC_ProcessReception>
      break;
 8013536:	e014      	b.n	8013562 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8013538:	2100      	movs	r1, #0
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f001 f951 	bl	80147e2 <USBH_ClrFeature>
 8013540:	4603      	mov	r3, r0
 8013542:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013544:	7bbb      	ldrb	r3, [r7, #14]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d10a      	bne.n	8013560 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	2200      	movs	r2, #0
 801354e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8013552:	e005      	b.n	8013560 <USBH_CDC_Process+0x120>

    default:
      break;
 8013554:	bf00      	nop
 8013556:	e004      	b.n	8013562 <USBH_CDC_Process+0x122>
      break;
 8013558:	bf00      	nop
 801355a:	e002      	b.n	8013562 <USBH_CDC_Process+0x122>
      break;
 801355c:	bf00      	nop
 801355e:	e000      	b.n	8013562 <USBH_CDC_Process+0x122>
      break;
 8013560:	bf00      	nop

  }

  return status;
 8013562:	7bfb      	ldrb	r3, [r7, #15]
}
 8013564:	4618      	mov	r0, r3
 8013566:	3710      	adds	r7, #16
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8013574:	2300      	movs	r3, #0
}
 8013576:	4618      	mov	r0, r3
 8013578:	370c      	adds	r7, #12
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr

08013582 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b082      	sub	sp, #8
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
 801358a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	22a1      	movs	r2, #161	; 0xa1
 8013590:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2221      	movs	r2, #33	; 0x21
 8013596:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2200      	movs	r2, #0
 801359c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2200      	movs	r2, #0
 80135a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2207      	movs	r2, #7
 80135a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	2207      	movs	r2, #7
 80135ae:	4619      	mov	r1, r3
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f001 faf6 	bl	8014ba2 <USBH_CtlReq>
 80135b6:	4603      	mov	r3, r0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2221      	movs	r2, #33	; 0x21
 80135ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2220      	movs	r2, #32
 80135d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2200      	movs	r2, #0
 80135da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2200      	movs	r2, #0
 80135e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2207      	movs	r2, #7
 80135e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	2207      	movs	r2, #7
 80135ec:	4619      	mov	r1, r3
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f001 fad7 	bl	8014ba2 <USBH_CtlReq>
 80135f4:	4603      	mov	r3, r0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80135fe:	b580      	push	{r7, lr}
 8013600:	b086      	sub	sp, #24
 8013602:	af02      	add	r7, sp, #8
 8013604:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801360c:	69db      	ldr	r3, [r3, #28]
 801360e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013610:	2300      	movs	r3, #0
 8013612:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801361a:	2b01      	cmp	r3, #1
 801361c:	d002      	beq.n	8013624 <CDC_ProcessTransmission+0x26>
 801361e:	2b02      	cmp	r3, #2
 8013620:	d023      	beq.n	801366a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8013622:	e07a      	b.n	801371a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013628:	68fa      	ldr	r2, [r7, #12]
 801362a:	8b12      	ldrh	r2, [r2, #24]
 801362c:	4293      	cmp	r3, r2
 801362e:	d90b      	bls.n	8013648 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	69d9      	ldr	r1, [r3, #28]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	8b1a      	ldrh	r2, [r3, #24]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	7b5b      	ldrb	r3, [r3, #13]
 801363c:	2001      	movs	r0, #1
 801363e:	9000      	str	r0, [sp, #0]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f001 fdac 	bl	801519e <USBH_BulkSendData>
 8013646:	e00b      	b.n	8013660 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8013650:	b29a      	uxth	r2, r3
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	7b5b      	ldrb	r3, [r3, #13]
 8013656:	2001      	movs	r0, #1
 8013658:	9000      	str	r0, [sp, #0]
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f001 fd9f 	bl	801519e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2202      	movs	r2, #2
 8013664:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8013668:	e057      	b.n	801371a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	7b5b      	ldrb	r3, [r3, #13]
 801366e:	4619      	mov	r1, r3
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f004 fea1 	bl	80183b8 <USBH_LL_GetURBState>
 8013676:	4603      	mov	r3, r0
 8013678:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801367a:	7afb      	ldrb	r3, [r7, #11]
 801367c:	2b01      	cmp	r3, #1
 801367e:	d136      	bne.n	80136ee <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013684:	68fa      	ldr	r2, [r7, #12]
 8013686:	8b12      	ldrh	r2, [r2, #24]
 8013688:	4293      	cmp	r3, r2
 801368a:	d90e      	bls.n	80136aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013690:	68fa      	ldr	r2, [r7, #12]
 8013692:	8b12      	ldrh	r2, [r2, #24]
 8013694:	1a9a      	subs	r2, r3, r2
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	69db      	ldr	r3, [r3, #28]
 801369e:	68fa      	ldr	r2, [r7, #12]
 80136a0:	8b12      	ldrh	r2, [r2, #24]
 80136a2:	441a      	add	r2, r3
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	61da      	str	r2, [r3, #28]
 80136a8:	e002      	b.n	80136b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2200      	movs	r2, #0
 80136ae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d004      	beq.n	80136c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2201      	movs	r2, #1
 80136bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80136c0:	e006      	b.n	80136d0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2200      	movs	r2, #0
 80136c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f000 f892 	bl	80137f4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2204      	movs	r2, #4
 80136d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80136e4:	2200      	movs	r2, #0
 80136e6:	4619      	mov	r1, r3
 80136e8:	f001 ffea 	bl	80156c0 <osMessagePut>
      break;
 80136ec:	e014      	b.n	8013718 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80136ee:	7afb      	ldrb	r3, [r7, #11]
 80136f0:	2b02      	cmp	r3, #2
 80136f2:	d111      	bne.n	8013718 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2201      	movs	r2, #1
 80136f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2204      	movs	r2, #4
 8013700:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013710:	2200      	movs	r2, #0
 8013712:	4619      	mov	r1, r3
 8013714:	f001 ffd4 	bl	80156c0 <osMessagePut>
      break;
 8013718:	bf00      	nop
  }
}
 801371a:	bf00      	nop
 801371c:	3710      	adds	r7, #16
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}

08013722 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8013722:	b580      	push	{r7, lr}
 8013724:	b086      	sub	sp, #24
 8013726:	af00      	add	r7, sp, #0
 8013728:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013730:	69db      	ldr	r3, [r3, #28]
 8013732:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013734:	2300      	movs	r3, #0
 8013736:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801373e:	2b03      	cmp	r3, #3
 8013740:	d002      	beq.n	8013748 <CDC_ProcessReception+0x26>
 8013742:	2b04      	cmp	r3, #4
 8013744:	d00e      	beq.n	8013764 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8013746:	e051      	b.n	80137ec <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	6a19      	ldr	r1, [r3, #32]
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	8b5a      	ldrh	r2, [r3, #26]
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	7b1b      	ldrb	r3, [r3, #12]
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f001 fd47 	bl	80151e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	2204      	movs	r2, #4
 801375e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8013762:	e043      	b.n	80137ec <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	7b1b      	ldrb	r3, [r3, #12]
 8013768:	4619      	mov	r1, r3
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f004 fe24 	bl	80183b8 <USBH_LL_GetURBState>
 8013770:	4603      	mov	r3, r0
 8013772:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8013774:	7cfb      	ldrb	r3, [r7, #19]
 8013776:	2b01      	cmp	r3, #1
 8013778:	d137      	bne.n	80137ea <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	7b1b      	ldrb	r3, [r3, #12]
 801377e:	4619      	mov	r1, r3
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f004 fd87 	bl	8018294 <USBH_LL_GetLastXferSize>
 8013786:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	429a      	cmp	r2, r3
 8013790:	d016      	beq.n	80137c0 <CDC_ProcessReception+0x9e>
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	8b5b      	ldrh	r3, [r3, #26]
 8013796:	461a      	mov	r2, r3
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	4293      	cmp	r3, r2
 801379c:	d910      	bls.n	80137c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	1ad2      	subs	r2, r2, r3
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	6a1a      	ldr	r2, [r3, #32]
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	441a      	add	r2, r3
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2203      	movs	r2, #3
 80137ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80137be:	e006      	b.n	80137ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2200      	movs	r2, #0
 80137c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 f81d 	bl	8013808 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2204      	movs	r2, #4
 80137d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80137e2:	2200      	movs	r2, #0
 80137e4:	4619      	mov	r1, r3
 80137e6:	f001 ff6b 	bl	80156c0 <osMessagePut>
      break;
 80137ea:	bf00      	nop
  }
}
 80137ec:	bf00      	nop
 80137ee:	3718      	adds	r7, #24
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80137fc:	bf00      	nop
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013810:	bf00      	nop
 8013812:	370c      	adds	r7, #12
 8013814:	46bd      	mov	sp, r7
 8013816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381a:	4770      	bx	lr

0801381c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013824:	bf00      	nop
 8013826:	370c      	adds	r7, #12
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8013830:	b5b0      	push	{r4, r5, r7, lr}
 8013832:	b090      	sub	sp, #64	; 0x40
 8013834:	af00      	add	r7, sp, #0
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	4613      	mov	r3, r2
 801383c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d101      	bne.n	8013848 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8013844:	2302      	movs	r3, #2
 8013846:	e04d      	b.n	80138e4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	79fa      	ldrb	r2, [r7, #7]
 801384c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	2200      	movs	r2, #0
 8013854:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	2200      	movs	r2, #0
 801385c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f000 f847 	bl	80138f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2200      	movs	r2, #0
 801386a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2200      	movs	r2, #0
 8013872:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2200      	movs	r2, #0
 801387a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	2200      	movs	r2, #0
 8013882:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d003      	beq.n	8013894 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	68ba      	ldr	r2, [r7, #8]
 8013890:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013894:	4b15      	ldr	r3, [pc, #84]	; (80138ec <USBH_Init+0xbc>)
 8013896:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801389a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801389c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80138a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80138a4:	2100      	movs	r1, #0
 80138a6:	4618      	mov	r0, r3
 80138a8:	f001 fee2 	bl	8015670 <osMessageCreate>
 80138ac:	4602      	mov	r2, r0
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80138b4:	4b0e      	ldr	r3, [pc, #56]	; (80138f0 <USBH_Init+0xc0>)
 80138b6:	f107 0414 	add.w	r4, r7, #20
 80138ba:	461d      	mov	r5, r3
 80138bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80138c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80138c8:	f107 0314 	add.w	r3, r7, #20
 80138cc:	68f9      	ldr	r1, [r7, #12]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f001 fde2 	bl	8015498 <osThreadCreate>
 80138d4:	4602      	mov	r2, r0
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80138dc:	68f8      	ldr	r0, [r7, #12]
 80138de:	f004 fc25 	bl	801812c <USBH_LL_Init>

  return USBH_OK;
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3740      	adds	r7, #64	; 0x40
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bdb0      	pop	{r4, r5, r7, pc}
 80138ec:	0801af00 	.word	0x0801af00
 80138f0:	0801af10 	.word	0x0801af10

080138f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b085      	sub	sp, #20
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80138fc:	2300      	movs	r3, #0
 80138fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013900:	2300      	movs	r3, #0
 8013902:	60fb      	str	r3, [r7, #12]
 8013904:	e009      	b.n	801391a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	33e0      	adds	r3, #224	; 0xe0
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	4413      	add	r3, r2
 8013910:	2200      	movs	r2, #0
 8013912:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	3301      	adds	r3, #1
 8013918:	60fb      	str	r3, [r7, #12]
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2b0e      	cmp	r3, #14
 801391e:	d9f2      	bls.n	8013906 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013920:	2300      	movs	r3, #0
 8013922:	60fb      	str	r3, [r7, #12]
 8013924:	e009      	b.n	801393a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	4413      	add	r3, r2
 801392c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013930:	2200      	movs	r2, #0
 8013932:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	3301      	adds	r3, #1
 8013938:	60fb      	str	r3, [r7, #12]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013940:	d3f1      	bcc.n	8013926 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2200      	movs	r2, #0
 8013946:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2201      	movs	r2, #1
 8013952:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2200      	movs	r2, #0
 8013958:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2201      	movs	r2, #1
 8013960:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2240      	movs	r2, #64	; 0x40
 8013966:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2200      	movs	r2, #0
 8013972:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2201      	movs	r2, #1
 801397a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2200      	movs	r2, #0
 801398a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801398e:	2300      	movs	r3, #0
}
 8013990:	4618      	mov	r0, r3
 8013992:	3714      	adds	r7, #20
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr

0801399c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801399c:	b480      	push	{r7}
 801399e:	b085      	sub	sp, #20
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80139a6:	2300      	movs	r3, #0
 80139a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d016      	beq.n	80139de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d10e      	bne.n	80139d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80139c0:	1c59      	adds	r1, r3, #1
 80139c2:	687a      	ldr	r2, [r7, #4]
 80139c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	33de      	adds	r3, #222	; 0xde
 80139cc:	6839      	ldr	r1, [r7, #0]
 80139ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80139d2:	2300      	movs	r3, #0
 80139d4:	73fb      	strb	r3, [r7, #15]
 80139d6:	e004      	b.n	80139e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80139d8:	2302      	movs	r3, #2
 80139da:	73fb      	strb	r3, [r7, #15]
 80139dc:	e001      	b.n	80139e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80139de:	2302      	movs	r3, #2
 80139e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80139e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3714      	adds	r7, #20
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr

080139f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	460b      	mov	r3, r1
 80139fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80139fc:	2300      	movs	r3, #0
 80139fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8013a06:	78fa      	ldrb	r2, [r7, #3]
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d204      	bcs.n	8013a16 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	78fa      	ldrb	r2, [r7, #3]
 8013a10:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8013a14:	e001      	b.n	8013a1a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013a16:	2302      	movs	r3, #2
 8013a18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3714      	adds	r7, #20
 8013a20:	46bd      	mov	sp, r7
 8013a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a26:	4770      	bx	lr

08013a28 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	b087      	sub	sp, #28
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	4608      	mov	r0, r1
 8013a32:	4611      	mov	r1, r2
 8013a34:	461a      	mov	r2, r3
 8013a36:	4603      	mov	r3, r0
 8013a38:	70fb      	strb	r3, [r7, #3]
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	70bb      	strb	r3, [r7, #2]
 8013a3e:	4613      	mov	r3, r2
 8013a40:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013a42:	2300      	movs	r3, #0
 8013a44:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8013a46:	2300      	movs	r3, #0
 8013a48:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013a50:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013a52:	e025      	b.n	8013aa0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8013a54:	7dfb      	ldrb	r3, [r7, #23]
 8013a56:	221a      	movs	r2, #26
 8013a58:	fb02 f303 	mul.w	r3, r2, r3
 8013a5c:	3308      	adds	r3, #8
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	4413      	add	r3, r2
 8013a62:	3302      	adds	r3, #2
 8013a64:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	795b      	ldrb	r3, [r3, #5]
 8013a6a:	78fa      	ldrb	r2, [r7, #3]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d002      	beq.n	8013a76 <USBH_FindInterface+0x4e>
 8013a70:	78fb      	ldrb	r3, [r7, #3]
 8013a72:	2bff      	cmp	r3, #255	; 0xff
 8013a74:	d111      	bne.n	8013a9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013a7a:	78ba      	ldrb	r2, [r7, #2]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d002      	beq.n	8013a86 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013a80:	78bb      	ldrb	r3, [r7, #2]
 8013a82:	2bff      	cmp	r3, #255	; 0xff
 8013a84:	d109      	bne.n	8013a9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013a8a:	787a      	ldrb	r2, [r7, #1]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d002      	beq.n	8013a96 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013a90:	787b      	ldrb	r3, [r7, #1]
 8013a92:	2bff      	cmp	r3, #255	; 0xff
 8013a94:	d101      	bne.n	8013a9a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8013a96:	7dfb      	ldrb	r3, [r7, #23]
 8013a98:	e006      	b.n	8013aa8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013a9a:	7dfb      	ldrb	r3, [r7, #23]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013aa0:	7dfb      	ldrb	r3, [r7, #23]
 8013aa2:	2b01      	cmp	r3, #1
 8013aa4:	d9d6      	bls.n	8013a54 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8013aa6:	23ff      	movs	r3, #255	; 0xff
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	371c      	adds	r7, #28
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f004 fb71 	bl	80181a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8013ac2:	2101      	movs	r1, #1
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f004 fc8a 	bl	80183de <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013aca:	2300      	movs	r3, #0
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b088      	sub	sp, #32
 8013ad8:	af04      	add	r7, sp, #16
 8013ada:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013adc:	2302      	movs	r3, #2
 8013ade:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d102      	bne.n	8013af6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2203      	movs	r2, #3
 8013af4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	2b0b      	cmp	r3, #11
 8013afe:	f200 823c 	bhi.w	8013f7a <USBH_Process+0x4a6>
 8013b02:	a201      	add	r2, pc, #4	; (adr r2, 8013b08 <USBH_Process+0x34>)
 8013b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b08:	08013b39 	.word	0x08013b39
 8013b0c:	08013b87 	.word	0x08013b87
 8013b10:	08013c0b 	.word	0x08013c0b
 8013b14:	08013ef9 	.word	0x08013ef9
 8013b18:	08013f7b 	.word	0x08013f7b
 8013b1c:	08013ccb 	.word	0x08013ccb
 8013b20:	08013e83 	.word	0x08013e83
 8013b24:	08013d1d 	.word	0x08013d1d
 8013b28:	08013d59 	.word	0x08013d59
 8013b2c:	08013d93 	.word	0x08013d93
 8013b30:	08013ddb 	.word	0x08013ddb
 8013b34:	08013ee1 	.word	0x08013ee1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	f000 821c 	beq.w	8013f7e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2201      	movs	r2, #1
 8013b4a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013b4c:	20c8      	movs	r0, #200	; 0xc8
 8013b4e:	f004 fc8d 	bl	801846c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f004 fb83 	bl	801825e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2200      	movs	r2, #0
 8013b64:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4619      	mov	r1, r3
 8013b80:	f001 fd9e 	bl	80156c0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013b84:	e1fb      	b.n	8013f7e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d107      	bne.n	8013ba0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2200      	movs	r2, #0
 8013b94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2202      	movs	r2, #2
 8013b9c:	701a      	strb	r2, [r3, #0]
 8013b9e:	e025      	b.n	8013bec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013ba6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013baa:	d914      	bls.n	8013bd6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	b2da      	uxtb	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013bc2:	2b03      	cmp	r3, #3
 8013bc4:	d903      	bls.n	8013bce <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	220d      	movs	r2, #13
 8013bca:	701a      	strb	r2, [r3, #0]
 8013bcc:	e00e      	b.n	8013bec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	701a      	strb	r2, [r3, #0]
 8013bd4:	e00a      	b.n	8013bec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013bdc:	f103 020a 	add.w	r2, r3, #10
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8013be6:	200a      	movs	r0, #10
 8013be8:	f004 fc40 	bl	801846c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2201      	movs	r2, #1
 8013bf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013c00:	2200      	movs	r2, #0
 8013c02:	4619      	mov	r1, r3
 8013c04:	f001 fd5c 	bl	80156c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013c08:	e1c0      	b.n	8013f8c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d005      	beq.n	8013c20 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013c1a:	2104      	movs	r1, #4
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8013c20:	2064      	movs	r0, #100	; 0x64
 8013c22:	f004 fc23 	bl	801846c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f004 faf2 	bl	8018210 <USBH_LL_GetSpeed>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	461a      	mov	r2, r3
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2205      	movs	r2, #5
 8013c3a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f001 fb1f 	bl	8015282 <USBH_AllocPipe>
 8013c44:	4603      	mov	r3, r0
 8013c46:	461a      	mov	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013c4c:	2180      	movs	r1, #128	; 0x80
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f001 fb17 	bl	8015282 <USBH_AllocPipe>
 8013c54:	4603      	mov	r3, r0
 8013c56:	461a      	mov	r2, r3
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	7919      	ldrb	r1, [r3, #4]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013c70:	b292      	uxth	r2, r2
 8013c72:	9202      	str	r2, [sp, #8]
 8013c74:	2200      	movs	r2, #0
 8013c76:	9201      	str	r2, [sp, #4]
 8013c78:	9300      	str	r3, [sp, #0]
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2280      	movs	r2, #128	; 0x80
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f001 fad0 	bl	8015224 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	7959      	ldrb	r1, [r3, #5]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013c94:	687a      	ldr	r2, [r7, #4]
 8013c96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8013c98:	b292      	uxth	r2, r2
 8013c9a:	9202      	str	r2, [sp, #8]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	9201      	str	r2, [sp, #4]
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f001 fabc 	bl	8015224 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2201      	movs	r2, #1
 8013cb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	f001 fcfc 	bl	80156c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013cc8:	e160      	b.n	8013f8c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f000 f964 	bl	8013f98 <USBH_HandleEnum>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8013cd4:	7bbb      	ldrb	r3, [r7, #14]
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f040 8152 	bne.w	8013f82 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	d103      	bne.n	8013cf8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2208      	movs	r2, #8
 8013cf4:	701a      	strb	r2, [r3, #0]
 8013cf6:	e002      	b.n	8013cfe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2207      	movs	r2, #7
 8013cfc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2205      	movs	r2, #5
 8013d02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013d12:	2200      	movs	r2, #0
 8013d14:	4619      	mov	r1, r3
 8013d16:	f001 fcd3 	bl	80156c0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013d1a:	e132      	b.n	8013f82 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f000 812f 	beq.w	8013f86 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013d2e:	2101      	movs	r1, #1
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2208      	movs	r2, #8
 8013d38:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2205      	movs	r2, #5
 8013d3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013d4e:	2200      	movs	r2, #0
 8013d50:	4619      	mov	r1, r3
 8013d52:	f001 fcb5 	bl	80156c0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8013d56:	e116      	b.n	8013f86 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	4619      	mov	r1, r3
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f000 fcf6 	bl	8014754 <USBH_SetCfg>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d102      	bne.n	8013d74 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2209      	movs	r2, #9
 8013d72:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2201      	movs	r2, #1
 8013d78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013d88:	2200      	movs	r2, #0
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	f001 fc98 	bl	80156c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013d90:	e0fc      	b.n	8013f8c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8013d98:	f003 0320 	and.w	r3, r3, #32
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d00a      	beq.n	8013db6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8013da0:	2101      	movs	r1, #1
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 fcf9 	bl	801479a <USBH_SetFeature>
 8013da8:	4603      	mov	r3, r0
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d106      	bne.n	8013dbc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	220a      	movs	r2, #10
 8013db2:	701a      	strb	r2, [r3, #0]
 8013db4:	e002      	b.n	8013dbc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	220a      	movs	r2, #10
 8013dba:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	f001 fc74 	bl	80156c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013dd8:	e0d8      	b.n	8013f8c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d03f      	beq.n	8013e64 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2200      	movs	r2, #0
 8013de8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013dec:	2300      	movs	r3, #0
 8013dee:	73fb      	strb	r3, [r7, #15]
 8013df0:	e016      	b.n	8013e20 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8013df2:	7bfa      	ldrb	r2, [r7, #15]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	32de      	adds	r2, #222	; 0xde
 8013df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dfc:	791a      	ldrb	r2, [r3, #4]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d108      	bne.n	8013e1a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8013e08:	7bfa      	ldrb	r2, [r7, #15]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	32de      	adds	r2, #222	; 0xde
 8013e0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8013e18:	e005      	b.n	8013e26 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013e1a:	7bfb      	ldrb	r3, [r7, #15]
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	73fb      	strb	r3, [r7, #15]
 8013e20:	7bfb      	ldrb	r3, [r7, #15]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d0e5      	beq.n	8013df2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d016      	beq.n	8013e5e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e36:	689b      	ldr	r3, [r3, #8]
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	4798      	blx	r3
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d109      	bne.n	8013e56 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2206      	movs	r2, #6
 8013e46:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013e4e:	2103      	movs	r1, #3
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	4798      	blx	r3
 8013e54:	e006      	b.n	8013e64 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	220d      	movs	r2, #13
 8013e5a:	701a      	strb	r2, [r3, #0]
 8013e5c:	e002      	b.n	8013e64 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	220d      	movs	r2, #13
 8013e62:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2205      	movs	r2, #5
 8013e68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013e78:	2200      	movs	r2, #0
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	f001 fc20 	bl	80156c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013e80:	e084      	b.n	8013f8c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d017      	beq.n	8013ebc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013e92:	691b      	ldr	r3, [r3, #16]
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	4798      	blx	r3
 8013e98:	4603      	mov	r3, r0
 8013e9a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013e9c:	7bbb      	ldrb	r3, [r7, #14]
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d103      	bne.n	8013eac <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	220b      	movs	r2, #11
 8013ea8:	701a      	strb	r2, [r3, #0]
 8013eaa:	e00a      	b.n	8013ec2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8013eac:	7bbb      	ldrb	r3, [r7, #14]
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	2b02      	cmp	r3, #2
 8013eb2:	d106      	bne.n	8013ec2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	220d      	movs	r2, #13
 8013eb8:	701a      	strb	r2, [r3, #0]
 8013eba:	e002      	b.n	8013ec2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	220d      	movs	r2, #13
 8013ec0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2205      	movs	r2, #5
 8013ec6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	4619      	mov	r1, r3
 8013eda:	f001 fbf1 	bl	80156c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013ede:	e055      	b.n	8013f8c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d04f      	beq.n	8013f8a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013ef0:	695b      	ldr	r3, [r3, #20]
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	4798      	blx	r3
      }
      break;
 8013ef6:	e048      	b.n	8013f8a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2200      	movs	r2, #0
 8013efc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7ff fcf7 	bl	80138f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d009      	beq.n	8013f24 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2200      	movs	r2, #0
 8013f20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d005      	beq.n	8013f3a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013f34:	2105      	movs	r1, #5
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d107      	bne.n	8013f56 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f7ff fdb0 	bl	8013ab4 <USBH_Start>
 8013f54:	e002      	b.n	8013f5c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f004 f924 	bl	80181a4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2201      	movs	r2, #1
 8013f60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f70:	2200      	movs	r2, #0
 8013f72:	4619      	mov	r1, r3
 8013f74:	f001 fba4 	bl	80156c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013f78:	e008      	b.n	8013f8c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8013f7a:	bf00      	nop
 8013f7c:	e006      	b.n	8013f8c <USBH_Process+0x4b8>
      break;
 8013f7e:	bf00      	nop
 8013f80:	e004      	b.n	8013f8c <USBH_Process+0x4b8>
      break;
 8013f82:	bf00      	nop
 8013f84:	e002      	b.n	8013f8c <USBH_Process+0x4b8>
    break;
 8013f86:	bf00      	nop
 8013f88:	e000      	b.n	8013f8c <USBH_Process+0x4b8>
      break;
 8013f8a:	bf00      	nop
  }
  return USBH_OK;
 8013f8c:	2300      	movs	r3, #0
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3710      	adds	r7, #16
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop

08013f98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b088      	sub	sp, #32
 8013f9c:	af04      	add	r7, sp, #16
 8013f9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	785b      	ldrb	r3, [r3, #1]
 8013fac:	2b07      	cmp	r3, #7
 8013fae:	f200 8208 	bhi.w	80143c2 <USBH_HandleEnum+0x42a>
 8013fb2:	a201      	add	r2, pc, #4	; (adr r2, 8013fb8 <USBH_HandleEnum+0x20>)
 8013fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb8:	08013fd9 	.word	0x08013fd9
 8013fbc:	08014097 	.word	0x08014097
 8013fc0:	08014101 	.word	0x08014101
 8013fc4:	0801418f 	.word	0x0801418f
 8013fc8:	080141f9 	.word	0x080141f9
 8013fcc:	08014269 	.word	0x08014269
 8013fd0:	08014305 	.word	0x08014305
 8013fd4:	08014383 	.word	0x08014383
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013fd8:	2108      	movs	r1, #8
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f000 faea 	bl	80145b4 <USBH_Get_DevDesc>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013fe4:	7bbb      	ldrb	r3, [r7, #14]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d130      	bne.n	801404c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	7919      	ldrb	r1, [r3, #4]
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801400e:	b292      	uxth	r2, r2
 8014010:	9202      	str	r2, [sp, #8]
 8014012:	2200      	movs	r2, #0
 8014014:	9201      	str	r2, [sp, #4]
 8014016:	9300      	str	r3, [sp, #0]
 8014018:	4603      	mov	r3, r0
 801401a:	2280      	movs	r2, #128	; 0x80
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f001 f901 	bl	8015224 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	7959      	ldrb	r1, [r3, #5]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014036:	b292      	uxth	r2, r2
 8014038:	9202      	str	r2, [sp, #8]
 801403a:	2200      	movs	r2, #0
 801403c:	9201      	str	r2, [sp, #4]
 801403e:	9300      	str	r3, [sp, #0]
 8014040:	4603      	mov	r3, r0
 8014042:	2200      	movs	r2, #0
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f001 f8ed 	bl	8015224 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801404a:	e1bc      	b.n	80143c6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801404c:	7bbb      	ldrb	r3, [r7, #14]
 801404e:	2b03      	cmp	r3, #3
 8014050:	f040 81b9 	bne.w	80143c6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801405a:	3301      	adds	r3, #1
 801405c:	b2da      	uxtb	r2, r3
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801406a:	2b03      	cmp	r3, #3
 801406c:	d903      	bls.n	8014076 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	220d      	movs	r2, #13
 8014072:	701a      	strb	r2, [r3, #0]
      break;
 8014074:	e1a7      	b.n	80143c6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	795b      	ldrb	r3, [r3, #5]
 801407a:	4619      	mov	r1, r3
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f001 f921 	bl	80152c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	791b      	ldrb	r3, [r3, #4]
 8014086:	4619      	mov	r1, r3
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f001 f91b 	bl	80152c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2200      	movs	r2, #0
 8014092:	701a      	strb	r2, [r3, #0]
      break;
 8014094:	e197      	b.n	80143c6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8014096:	2112      	movs	r1, #18
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f000 fa8b 	bl	80145b4 <USBH_Get_DevDesc>
 801409e:	4603      	mov	r3, r0
 80140a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80140a2:	7bbb      	ldrb	r3, [r7, #14]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d103      	bne.n	80140b0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2202      	movs	r2, #2
 80140ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80140ae:	e18c      	b.n	80143ca <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80140b0:	7bbb      	ldrb	r3, [r7, #14]
 80140b2:	2b03      	cmp	r3, #3
 80140b4:	f040 8189 	bne.w	80143ca <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80140be:	3301      	adds	r3, #1
 80140c0:	b2da      	uxtb	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80140ce:	2b03      	cmp	r3, #3
 80140d0:	d903      	bls.n	80140da <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	220d      	movs	r2, #13
 80140d6:	701a      	strb	r2, [r3, #0]
      break;
 80140d8:	e177      	b.n	80143ca <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	795b      	ldrb	r3, [r3, #5]
 80140de:	4619      	mov	r1, r3
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f001 f8ef 	bl	80152c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	791b      	ldrb	r3, [r3, #4]
 80140ea:	4619      	mov	r1, r3
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f001 f8e9 	bl	80152c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2200      	movs	r2, #0
 80140fc:	701a      	strb	r2, [r3, #0]
      break;
 80140fe:	e164      	b.n	80143ca <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8014100:	2101      	movs	r1, #1
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 fb02 	bl	801470c <USBH_SetAddress>
 8014108:	4603      	mov	r3, r0
 801410a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801410c:	7bbb      	ldrb	r3, [r7, #14]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d132      	bne.n	8014178 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8014112:	2002      	movs	r0, #2
 8014114:	f004 f9aa 	bl	801846c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2201      	movs	r2, #1
 801411c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2203      	movs	r2, #3
 8014124:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	7919      	ldrb	r1, [r3, #4]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801413a:	b292      	uxth	r2, r2
 801413c:	9202      	str	r2, [sp, #8]
 801413e:	2200      	movs	r2, #0
 8014140:	9201      	str	r2, [sp, #4]
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	4603      	mov	r3, r0
 8014146:	2280      	movs	r2, #128	; 0x80
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f001 f86b 	bl	8015224 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	7959      	ldrb	r1, [r3, #5]
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014162:	b292      	uxth	r2, r2
 8014164:	9202      	str	r2, [sp, #8]
 8014166:	2200      	movs	r2, #0
 8014168:	9201      	str	r2, [sp, #4]
 801416a:	9300      	str	r3, [sp, #0]
 801416c:	4603      	mov	r3, r0
 801416e:	2200      	movs	r2, #0
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f001 f857 	bl	8015224 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8014176:	e12a      	b.n	80143ce <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014178:	7bbb      	ldrb	r3, [r7, #14]
 801417a:	2b03      	cmp	r3, #3
 801417c:	f040 8127 	bne.w	80143ce <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	220d      	movs	r2, #13
 8014184:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2200      	movs	r2, #0
 801418a:	705a      	strb	r2, [r3, #1]
      break;
 801418c:	e11f      	b.n	80143ce <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801418e:	2109      	movs	r1, #9
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f000 fa37 	bl	8014604 <USBH_Get_CfgDesc>
 8014196:	4603      	mov	r3, r0
 8014198:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801419a:	7bbb      	ldrb	r3, [r7, #14]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d103      	bne.n	80141a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2204      	movs	r2, #4
 80141a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80141a6:	e114      	b.n	80143d2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80141a8:	7bbb      	ldrb	r3, [r7, #14]
 80141aa:	2b03      	cmp	r3, #3
 80141ac:	f040 8111 	bne.w	80143d2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80141b6:	3301      	adds	r3, #1
 80141b8:	b2da      	uxtb	r2, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80141c6:	2b03      	cmp	r3, #3
 80141c8:	d903      	bls.n	80141d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	220d      	movs	r2, #13
 80141ce:	701a      	strb	r2, [r3, #0]
      break;
 80141d0:	e0ff      	b.n	80143d2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	795b      	ldrb	r3, [r3, #5]
 80141d6:	4619      	mov	r1, r3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f001 f873 	bl	80152c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	791b      	ldrb	r3, [r3, #4]
 80141e2:	4619      	mov	r1, r3
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f001 f86d 	bl	80152c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2200      	movs	r2, #0
 80141ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2200      	movs	r2, #0
 80141f4:	701a      	strb	r2, [r3, #0]
      break;
 80141f6:	e0ec      	b.n	80143d2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80141fe:	4619      	mov	r1, r3
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f000 f9ff 	bl	8014604 <USBH_Get_CfgDesc>
 8014206:	4603      	mov	r3, r0
 8014208:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801420a:	7bbb      	ldrb	r3, [r7, #14]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d103      	bne.n	8014218 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2205      	movs	r2, #5
 8014214:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014216:	e0de      	b.n	80143d6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014218:	7bbb      	ldrb	r3, [r7, #14]
 801421a:	2b03      	cmp	r3, #3
 801421c:	f040 80db 	bne.w	80143d6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014226:	3301      	adds	r3, #1
 8014228:	b2da      	uxtb	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014236:	2b03      	cmp	r3, #3
 8014238:	d903      	bls.n	8014242 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	220d      	movs	r2, #13
 801423e:	701a      	strb	r2, [r3, #0]
      break;
 8014240:	e0c9      	b.n	80143d6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	795b      	ldrb	r3, [r3, #5]
 8014246:	4619      	mov	r1, r3
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f001 f83b 	bl	80152c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	791b      	ldrb	r3, [r3, #4]
 8014252:	4619      	mov	r1, r3
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f001 f835 	bl	80152c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2200      	movs	r2, #0
 801425e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2200      	movs	r2, #0
 8014264:	701a      	strb	r2, [r3, #0]
      break;
 8014266:	e0b6      	b.n	80143d6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801426e:	2b00      	cmp	r3, #0
 8014270:	d036      	beq.n	80142e0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801427e:	23ff      	movs	r3, #255	; 0xff
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f000 f9e3 	bl	801464c <USBH_Get_StringDesc>
 8014286:	4603      	mov	r3, r0
 8014288:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801428a:	7bbb      	ldrb	r3, [r7, #14]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d111      	bne.n	80142b4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2206      	movs	r2, #6
 8014294:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2205      	movs	r2, #5
 801429a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142aa:	2200      	movs	r2, #0
 80142ac:	4619      	mov	r1, r3
 80142ae:	f001 fa07 	bl	80156c0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80142b2:	e092      	b.n	80143da <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80142b4:	7bbb      	ldrb	r3, [r7, #14]
 80142b6:	2b03      	cmp	r3, #3
 80142b8:	f040 808f 	bne.w	80143da <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2206      	movs	r2, #6
 80142c0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2205      	movs	r2, #5
 80142c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142d6:	2200      	movs	r2, #0
 80142d8:	4619      	mov	r1, r3
 80142da:	f001 f9f1 	bl	80156c0 <osMessagePut>
      break;
 80142de:	e07c      	b.n	80143da <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2206      	movs	r2, #6
 80142e4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2205      	movs	r2, #5
 80142ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142fa:	2200      	movs	r2, #0
 80142fc:	4619      	mov	r1, r3
 80142fe:	f001 f9df 	bl	80156c0 <osMessagePut>
      break;
 8014302:	e06a      	b.n	80143da <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801430a:	2b00      	cmp	r3, #0
 801430c:	d027      	beq.n	801435e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801431a:	23ff      	movs	r3, #255	; 0xff
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f000 f995 	bl	801464c <USBH_Get_StringDesc>
 8014322:	4603      	mov	r3, r0
 8014324:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014326:	7bbb      	ldrb	r3, [r7, #14]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d103      	bne.n	8014334 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2207      	movs	r2, #7
 8014330:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8014332:	e054      	b.n	80143de <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014334:	7bbb      	ldrb	r3, [r7, #14]
 8014336:	2b03      	cmp	r3, #3
 8014338:	d151      	bne.n	80143de <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2207      	movs	r2, #7
 801433e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2205      	movs	r2, #5
 8014344:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014354:	2200      	movs	r2, #0
 8014356:	4619      	mov	r1, r3
 8014358:	f001 f9b2 	bl	80156c0 <osMessagePut>
      break;
 801435c:	e03f      	b.n	80143de <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2207      	movs	r2, #7
 8014362:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2205      	movs	r2, #5
 8014368:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014378:	2200      	movs	r2, #0
 801437a:	4619      	mov	r1, r3
 801437c:	f001 f9a0 	bl	80156c0 <osMessagePut>
      break;
 8014380:	e02d      	b.n	80143de <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8014388:	2b00      	cmp	r3, #0
 801438a:	d017      	beq.n	80143bc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014398:	23ff      	movs	r3, #255	; 0xff
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f000 f956 	bl	801464c <USBH_Get_StringDesc>
 80143a0:	4603      	mov	r3, r0
 80143a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80143a4:	7bbb      	ldrb	r3, [r7, #14]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d102      	bne.n	80143b0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80143aa:	2300      	movs	r3, #0
 80143ac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80143ae:	e018      	b.n	80143e2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80143b0:	7bbb      	ldrb	r3, [r7, #14]
 80143b2:	2b03      	cmp	r3, #3
 80143b4:	d115      	bne.n	80143e2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80143b6:	2300      	movs	r3, #0
 80143b8:	73fb      	strb	r3, [r7, #15]
      break;
 80143ba:	e012      	b.n	80143e2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80143bc:	2300      	movs	r3, #0
 80143be:	73fb      	strb	r3, [r7, #15]
      break;
 80143c0:	e00f      	b.n	80143e2 <USBH_HandleEnum+0x44a>

    default:
      break;
 80143c2:	bf00      	nop
 80143c4:	e00e      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143c6:	bf00      	nop
 80143c8:	e00c      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143ca:	bf00      	nop
 80143cc:	e00a      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143ce:	bf00      	nop
 80143d0:	e008      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143d2:	bf00      	nop
 80143d4:	e006      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143d6:	bf00      	nop
 80143d8:	e004      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143da:	bf00      	nop
 80143dc:	e002      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143de:	bf00      	nop
 80143e0:	e000      	b.n	80143e4 <USBH_HandleEnum+0x44c>
      break;
 80143e2:	bf00      	nop
  }
  return Status;
 80143e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop

080143f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	683a      	ldr	r2, [r7, #0]
 80143fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8014402:	bf00      	nop
 8014404:	370c      	adds	r7, #12
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr

0801440e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801440e:	b580      	push	{r7, lr}
 8014410:	b082      	sub	sp, #8
 8014412:	af00      	add	r7, sp, #0
 8014414:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801441c:	1c5a      	adds	r2, r3, #1
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f000 f804 	bl	8014432 <USBH_HandleSof>
}
 801442a:	bf00      	nop
 801442c:	3708      	adds	r7, #8
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}

08014432 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8014432:	b580      	push	{r7, lr}
 8014434:	b082      	sub	sp, #8
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	b2db      	uxtb	r3, r3
 8014440:	2b0b      	cmp	r3, #11
 8014442:	d10a      	bne.n	801445a <USBH_HandleSof+0x28>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801444a:	2b00      	cmp	r3, #0
 801444c:	d005      	beq.n	801445a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014454:	699b      	ldr	r3, [r3, #24]
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	4798      	blx	r3
  }
}
 801445a:	bf00      	nop
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8014462:	b580      	push	{r7, lr}
 8014464:	b082      	sub	sp, #8
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2201      	movs	r2, #1
 801446e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2201      	movs	r2, #1
 8014476:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014486:	2200      	movs	r2, #0
 8014488:	4619      	mov	r1, r3
 801448a:	f001 f919 	bl	80156c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 801448e:	bf00      	nop
}
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8014496:	b480      	push	{r7}
 8014498:	b083      	sub	sp, #12
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2200      	movs	r2, #0
 80144a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80144a6:	bf00      	nop
}
 80144a8:	370c      	adds	r7, #12
 80144aa:	46bd      	mov	sp, r7
 80144ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b0:	4770      	bx	lr

080144b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80144b2:	b580      	push	{r7, lr}
 80144b4:	b082      	sub	sp, #8
 80144b6:	af00      	add	r7, sp, #0
 80144b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2201      	movs	r2, #1
 80144be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2200      	movs	r2, #0
 80144c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2200      	movs	r2, #0
 80144ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2201      	movs	r2, #1
 80144d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80144e6:	2200      	movs	r2, #0
 80144e8:	4619      	mov	r1, r3
 80144ea:	f001 f8e9 	bl	80156c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80144ee:	2300      	movs	r3, #0
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}

080144f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2201      	movs	r2, #1
 8014504:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2200      	movs	r2, #0
 801450c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2200      	movs	r2, #0
 8014514:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f003 fe5e 	bl	80181da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	791b      	ldrb	r3, [r3, #4]
 8014522:	4619      	mov	r1, r3
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f000 fecd 	bl	80152c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	795b      	ldrb	r3, [r3, #5]
 801452e:	4619      	mov	r1, r3
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f000 fec7 	bl	80152c4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2201      	movs	r2, #1
 801453a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801454a:	2200      	movs	r2, #0
 801454c:	4619      	mov	r1, r3
 801454e:	f001 f8b7 	bl	80156c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8014552:	2300      	movs	r3, #0
}
 8014554:	4618      	mov	r0, r3
 8014556:	3708      	adds	r7, #8
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}

0801455c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b086      	sub	sp, #24
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801456a:	f107 030c 	add.w	r3, r7, #12
 801456e:	f04f 32ff 	mov.w	r2, #4294967295
 8014572:	4618      	mov	r0, r3
 8014574:	f001 f8e4 	bl	8015740 <osMessageGet>
    if (event.status == osEventMessage)
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2b10      	cmp	r3, #16
 801457c:	d1f2      	bne.n	8014564 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801457e:	6878      	ldr	r0, [r7, #4]
 8014580:	f7ff faa8 	bl	8013ad4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014584:	e7ee      	b.n	8014564 <USBH_Process_OS+0x8>

08014586 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8014586:	b580      	push	{r7, lr}
 8014588:	b082      	sub	sp, #8
 801458a:	af00      	add	r7, sp, #0
 801458c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2201      	movs	r2, #1
 8014592:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80145a2:	2200      	movs	r2, #0
 80145a4:	4619      	mov	r1, r3
 80145a6:	f001 f88b 	bl	80156c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80145aa:	2300      	movs	r3, #0
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3708      	adds	r7, #8
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b086      	sub	sp, #24
 80145b8:	af02      	add	r7, sp, #8
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	460b      	mov	r3, r1
 80145be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80145c6:	78fb      	ldrb	r3, [r7, #3]
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	4613      	mov	r3, r2
 80145ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80145d2:	2100      	movs	r1, #0
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 f864 	bl	80146a2 <USBH_GetDescriptor>
 80145da:	4603      	mov	r3, r0
 80145dc:	73fb      	strb	r3, [r7, #15]
 80145de:	7bfb      	ldrb	r3, [r7, #15]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d10a      	bne.n	80145fa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80145f0:	78fa      	ldrb	r2, [r7, #3]
 80145f2:	b292      	uxth	r2, r2
 80145f4:	4619      	mov	r1, r3
 80145f6:	f000 f918 	bl	801482a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80145fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	3710      	adds	r7, #16
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}

08014604 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8014604:	b580      	push	{r7, lr}
 8014606:	b086      	sub	sp, #24
 8014608:	af02      	add	r7, sp, #8
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	460b      	mov	r3, r1
 801460e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	331c      	adds	r3, #28
 8014614:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8014616:	887b      	ldrh	r3, [r7, #2]
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014620:	2100      	movs	r1, #0
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 f83d 	bl	80146a2 <USBH_GetDescriptor>
 8014628:	4603      	mov	r3, r0
 801462a:	72fb      	strb	r3, [r7, #11]
 801462c:	7afb      	ldrb	r3, [r7, #11]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d107      	bne.n	8014642 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014638:	887a      	ldrh	r2, [r7, #2]
 801463a:	68f9      	ldr	r1, [r7, #12]
 801463c:	4618      	mov	r0, r3
 801463e:	f000 f964 	bl	801490a <USBH_ParseCfgDesc>
  }

  return status;
 8014642:	7afb      	ldrb	r3, [r7, #11]
}
 8014644:	4618      	mov	r0, r3
 8014646:	3710      	adds	r7, #16
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b088      	sub	sp, #32
 8014650:	af02      	add	r7, sp, #8
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	607a      	str	r2, [r7, #4]
 8014656:	461a      	mov	r2, r3
 8014658:	460b      	mov	r3, r1
 801465a:	72fb      	strb	r3, [r7, #11]
 801465c:	4613      	mov	r3, r2
 801465e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8014660:	7afb      	ldrb	r3, [r7, #11]
 8014662:	b29b      	uxth	r3, r3
 8014664:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8014668:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8014670:	893b      	ldrh	r3, [r7, #8]
 8014672:	9300      	str	r3, [sp, #0]
 8014674:	460b      	mov	r3, r1
 8014676:	2100      	movs	r1, #0
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f000 f812 	bl	80146a2 <USBH_GetDescriptor>
 801467e:	4603      	mov	r3, r0
 8014680:	75fb      	strb	r3, [r7, #23]
 8014682:	7dfb      	ldrb	r3, [r7, #23]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d107      	bne.n	8014698 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801468e:	893a      	ldrh	r2, [r7, #8]
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	4618      	mov	r0, r3
 8014694:	f000 fa37 	bl	8014b06 <USBH_ParseStringDesc>
  }

  return status;
 8014698:	7dfb      	ldrb	r3, [r7, #23]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3718      	adds	r7, #24
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b084      	sub	sp, #16
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	60f8      	str	r0, [r7, #12]
 80146aa:	607b      	str	r3, [r7, #4]
 80146ac:	460b      	mov	r3, r1
 80146ae:	72fb      	strb	r3, [r7, #11]
 80146b0:	4613      	mov	r3, r2
 80146b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	789b      	ldrb	r3, [r3, #2]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d11c      	bne.n	80146f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80146bc:	7afb      	ldrb	r3, [r7, #11]
 80146be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80146c2:	b2da      	uxtb	r2, r3
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2206      	movs	r2, #6
 80146cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	893a      	ldrh	r2, [r7, #8]
 80146d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80146d4:	893b      	ldrh	r3, [r7, #8]
 80146d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80146da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80146de:	d104      	bne.n	80146ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f240 4209 	movw	r2, #1033	; 0x409
 80146e6:	829a      	strh	r2, [r3, #20]
 80146e8:	e002      	b.n	80146f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2200      	movs	r2, #0
 80146ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	8b3a      	ldrh	r2, [r7, #24]
 80146f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80146f6:	8b3b      	ldrh	r3, [r7, #24]
 80146f8:	461a      	mov	r2, r3
 80146fa:	6879      	ldr	r1, [r7, #4]
 80146fc:	68f8      	ldr	r0, [r7, #12]
 80146fe:	f000 fa50 	bl	8014ba2 <USBH_CtlReq>
 8014702:	4603      	mov	r3, r0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3710      	adds	r7, #16
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	789b      	ldrb	r3, [r3, #2]
 801471c:	2b01      	cmp	r3, #1
 801471e:	d10f      	bne.n	8014740 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2200      	movs	r2, #0
 8014724:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2205      	movs	r2, #5
 801472a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801472c:	78fb      	ldrb	r3, [r7, #3]
 801472e:	b29a      	uxth	r2, r3
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2200      	movs	r2, #0
 8014738:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	2200      	movs	r2, #0
 801473e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014740:	2200      	movs	r2, #0
 8014742:	2100      	movs	r1, #0
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 fa2c 	bl	8014ba2 <USBH_CtlReq>
 801474a:	4603      	mov	r3, r0
}
 801474c:	4618      	mov	r0, r3
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}

08014754 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	460b      	mov	r3, r1
 801475e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	789b      	ldrb	r3, [r3, #2]
 8014764:	2b01      	cmp	r3, #1
 8014766:	d10e      	bne.n	8014786 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2200      	movs	r2, #0
 801476c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2209      	movs	r2, #9
 8014772:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	887a      	ldrh	r2, [r7, #2]
 8014778:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2200      	movs	r2, #0
 801477e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2200      	movs	r2, #0
 8014784:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8014786:	2200      	movs	r2, #0
 8014788:	2100      	movs	r1, #0
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fa09 	bl	8014ba2 <USBH_CtlReq>
 8014790:	4603      	mov	r3, r0
}
 8014792:	4618      	mov	r0, r3
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b082      	sub	sp, #8
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
 80147a2:	460b      	mov	r3, r1
 80147a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	789b      	ldrb	r3, [r3, #2]
 80147aa:	2b01      	cmp	r3, #1
 80147ac:	d10f      	bne.n	80147ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2200      	movs	r2, #0
 80147b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2203      	movs	r2, #3
 80147b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80147ba:	78fb      	ldrb	r3, [r7, #3]
 80147bc:	b29a      	uxth	r2, r3
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2200      	movs	r2, #0
 80147c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2200      	movs	r2, #0
 80147cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80147ce:	2200      	movs	r2, #0
 80147d0:	2100      	movs	r1, #0
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 f9e5 	bl	8014ba2 <USBH_CtlReq>
 80147d8:	4603      	mov	r3, r0
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3708      	adds	r7, #8
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}

080147e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80147e2:	b580      	push	{r7, lr}
 80147e4:	b082      	sub	sp, #8
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
 80147ea:	460b      	mov	r3, r1
 80147ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	789b      	ldrb	r3, [r3, #2]
 80147f2:	2b01      	cmp	r3, #1
 80147f4:	d10f      	bne.n	8014816 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2202      	movs	r2, #2
 80147fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2201      	movs	r2, #1
 8014800:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2200      	movs	r2, #0
 8014806:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014808:	78fb      	ldrb	r3, [r7, #3]
 801480a:	b29a      	uxth	r2, r3
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2200      	movs	r2, #0
 8014814:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8014816:	2200      	movs	r2, #0
 8014818:	2100      	movs	r1, #0
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f000 f9c1 	bl	8014ba2 <USBH_CtlReq>
 8014820:	4603      	mov	r3, r0
}
 8014822:	4618      	mov	r0, r3
 8014824:	3708      	adds	r7, #8
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}

0801482a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 801482a:	b480      	push	{r7}
 801482c:	b085      	sub	sp, #20
 801482e:	af00      	add	r7, sp, #0
 8014830:	60f8      	str	r0, [r7, #12]
 8014832:	60b9      	str	r1, [r7, #8]
 8014834:	4613      	mov	r3, r2
 8014836:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	781a      	ldrb	r2, [r3, #0]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	785a      	ldrb	r2, [r3, #1]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	3302      	adds	r3, #2
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	b29a      	uxth	r2, r3
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	3303      	adds	r3, #3
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	b29b      	uxth	r3, r3
 8014858:	021b      	lsls	r3, r3, #8
 801485a:	b29b      	uxth	r3, r3
 801485c:	4313      	orrs	r3, r2
 801485e:	b29a      	uxth	r2, r3
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	791a      	ldrb	r2, [r3, #4]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	795a      	ldrb	r2, [r3, #5]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	799a      	ldrb	r2, [r3, #6]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	79da      	ldrb	r2, [r3, #7]
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8014884:	88fb      	ldrh	r3, [r7, #6]
 8014886:	2b08      	cmp	r3, #8
 8014888:	d939      	bls.n	80148fe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	3308      	adds	r3, #8
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	b29a      	uxth	r2, r3
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	3309      	adds	r3, #9
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	b29b      	uxth	r3, r3
 801489a:	021b      	lsls	r3, r3, #8
 801489c:	b29b      	uxth	r3, r3
 801489e:	4313      	orrs	r3, r2
 80148a0:	b29a      	uxth	r2, r3
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	330a      	adds	r3, #10
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	330b      	adds	r3, #11
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	021b      	lsls	r3, r3, #8
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	4313      	orrs	r3, r2
 80148bc:	b29a      	uxth	r2, r3
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	330c      	adds	r3, #12
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	330d      	adds	r3, #13
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	021b      	lsls	r3, r3, #8
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	4313      	orrs	r3, r2
 80148d8:	b29a      	uxth	r2, r3
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	7b9a      	ldrb	r2, [r3, #14]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	7bda      	ldrb	r2, [r3, #15]
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	7c1a      	ldrb	r2, [r3, #16]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	7c5a      	ldrb	r2, [r3, #17]
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	745a      	strb	r2, [r3, #17]
  }
}
 80148fe:	bf00      	nop
 8014900:	3714      	adds	r7, #20
 8014902:	46bd      	mov	sp, r7
 8014904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014908:	4770      	bx	lr

0801490a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 801490a:	b580      	push	{r7, lr}
 801490c:	b08a      	sub	sp, #40	; 0x28
 801490e:	af00      	add	r7, sp, #0
 8014910:	60f8      	str	r0, [r7, #12]
 8014912:	60b9      	str	r1, [r7, #8]
 8014914:	4613      	mov	r3, r2
 8014916:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801491c:	2300      	movs	r3, #0
 801491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8014922:	2300      	movs	r3, #0
 8014924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	781a      	ldrb	r2, [r3, #0]
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	785a      	ldrb	r2, [r3, #1]
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	3302      	adds	r3, #2
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	b29a      	uxth	r2, r3
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	3303      	adds	r3, #3
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	b29b      	uxth	r3, r3
 801494c:	021b      	lsls	r3, r3, #8
 801494e:	b29b      	uxth	r3, r3
 8014950:	4313      	orrs	r3, r2
 8014952:	b29a      	uxth	r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	791a      	ldrb	r2, [r3, #4]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	795a      	ldrb	r2, [r3, #5]
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	799a      	ldrb	r2, [r3, #6]
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	79da      	ldrb	r2, [r3, #7]
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	7a1a      	ldrb	r2, [r3, #8]
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014980:	88fb      	ldrh	r3, [r7, #6]
 8014982:	2b09      	cmp	r3, #9
 8014984:	d95f      	bls.n	8014a46 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8014986:	2309      	movs	r3, #9
 8014988:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 801498a:	2300      	movs	r3, #0
 801498c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801498e:	e051      	b.n	8014a34 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014990:	f107 0316 	add.w	r3, r7, #22
 8014994:	4619      	mov	r1, r3
 8014996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014998:	f000 f8e8 	bl	8014b6c <USBH_GetNextDesc>
 801499c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a0:	785b      	ldrb	r3, [r3, #1]
 80149a2:	2b04      	cmp	r3, #4
 80149a4:	d146      	bne.n	8014a34 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80149a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149aa:	221a      	movs	r2, #26
 80149ac:	fb02 f303 	mul.w	r3, r2, r3
 80149b0:	3308      	adds	r3, #8
 80149b2:	68fa      	ldr	r2, [r7, #12]
 80149b4:	4413      	add	r3, r2
 80149b6:	3302      	adds	r3, #2
 80149b8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80149ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149bc:	69f8      	ldr	r0, [r7, #28]
 80149be:	f000 f846 	bl	8014a4e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80149c2:	2300      	movs	r3, #0
 80149c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80149c8:	2300      	movs	r3, #0
 80149ca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80149cc:	e022      	b.n	8014a14 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80149ce:	f107 0316 	add.w	r3, r7, #22
 80149d2:	4619      	mov	r1, r3
 80149d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149d6:	f000 f8c9 	bl	8014b6c <USBH_GetNextDesc>
 80149da:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149de:	785b      	ldrb	r3, [r3, #1]
 80149e0:	2b05      	cmp	r3, #5
 80149e2:	d117      	bne.n	8014a14 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80149e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149ec:	3201      	adds	r2, #1
 80149ee:	00d2      	lsls	r2, r2, #3
 80149f0:	211a      	movs	r1, #26
 80149f2:	fb01 f303 	mul.w	r3, r1, r3
 80149f6:	4413      	add	r3, r2
 80149f8:	3308      	adds	r3, #8
 80149fa:	68fa      	ldr	r2, [r7, #12]
 80149fc:	4413      	add	r3, r2
 80149fe:	3304      	adds	r3, #4
 8014a00:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8014a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a04:	69b8      	ldr	r0, [r7, #24]
 8014a06:	f000 f851 	bl	8014aac <USBH_ParseEPDesc>
            ep_ix++;
 8014a0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014a0e:	3301      	adds	r3, #1
 8014a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014a14:	69fb      	ldr	r3, [r7, #28]
 8014a16:	791b      	ldrb	r3, [r3, #4]
 8014a18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d204      	bcs.n	8014a2a <USBH_ParseCfgDesc+0x120>
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	885a      	ldrh	r2, [r3, #2]
 8014a24:	8afb      	ldrh	r3, [r7, #22]
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d8d1      	bhi.n	80149ce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8014a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a2e:	3301      	adds	r3, #1
 8014a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a38:	2b01      	cmp	r3, #1
 8014a3a:	d804      	bhi.n	8014a46 <USBH_ParseCfgDesc+0x13c>
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	885a      	ldrh	r2, [r3, #2]
 8014a40:	8afb      	ldrh	r3, [r7, #22]
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d8a4      	bhi.n	8014990 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8014a46:	bf00      	nop
 8014a48:	3728      	adds	r7, #40	; 0x28
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}

08014a4e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8014a4e:	b480      	push	{r7}
 8014a50:	b083      	sub	sp, #12
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
 8014a56:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	781a      	ldrb	r2, [r3, #0]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	785a      	ldrb	r2, [r3, #1]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	789a      	ldrb	r2, [r3, #2]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	78da      	ldrb	r2, [r3, #3]
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	791a      	ldrb	r2, [r3, #4]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	795a      	ldrb	r2, [r3, #5]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	799a      	ldrb	r2, [r3, #6]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	79da      	ldrb	r2, [r3, #7]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	7a1a      	ldrb	r2, [r3, #8]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	721a      	strb	r2, [r3, #8]
}
 8014aa0:	bf00      	nop
 8014aa2:	370c      	adds	r7, #12
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aaa:	4770      	bx	lr

08014aac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8014aac:	b480      	push	{r7}
 8014aae:	b083      	sub	sp, #12
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	781a      	ldrb	r2, [r3, #0]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	785a      	ldrb	r2, [r3, #1]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	789a      	ldrb	r2, [r3, #2]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	78da      	ldrb	r2, [r3, #3]
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	3304      	adds	r3, #4
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	b29a      	uxth	r2, r3
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	3305      	adds	r3, #5
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	b29b      	uxth	r3, r3
 8014ae6:	021b      	lsls	r3, r3, #8
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	4313      	orrs	r3, r2
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	799a      	ldrb	r2, [r3, #6]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	719a      	strb	r2, [r3, #6]
}
 8014afa:	bf00      	nop
 8014afc:	370c      	adds	r7, #12
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr

08014b06 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8014b06:	b480      	push	{r7}
 8014b08:	b087      	sub	sp, #28
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	60f8      	str	r0, [r7, #12]
 8014b0e:	60b9      	str	r1, [r7, #8]
 8014b10:	4613      	mov	r3, r2
 8014b12:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	3301      	adds	r3, #1
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	2b03      	cmp	r3, #3
 8014b1c:	d120      	bne.n	8014b60 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	781b      	ldrb	r3, [r3, #0]
 8014b22:	1e9a      	subs	r2, r3, #2
 8014b24:	88fb      	ldrh	r3, [r7, #6]
 8014b26:	4293      	cmp	r3, r2
 8014b28:	bf28      	it	cs
 8014b2a:	4613      	movcs	r3, r2
 8014b2c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3302      	adds	r3, #2
 8014b32:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8014b34:	2300      	movs	r3, #0
 8014b36:	82fb      	strh	r3, [r7, #22]
 8014b38:	e00b      	b.n	8014b52 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8014b3a:	8afb      	ldrh	r3, [r7, #22]
 8014b3c:	68fa      	ldr	r2, [r7, #12]
 8014b3e:	4413      	add	r3, r2
 8014b40:	781a      	ldrb	r2, [r3, #0]
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	701a      	strb	r2, [r3, #0]
      pdest++;
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014b4c:	8afb      	ldrh	r3, [r7, #22]
 8014b4e:	3302      	adds	r3, #2
 8014b50:	82fb      	strh	r3, [r7, #22]
 8014b52:	8afa      	ldrh	r2, [r7, #22]
 8014b54:	8abb      	ldrh	r3, [r7, #20]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d3ef      	bcc.n	8014b3a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	701a      	strb	r2, [r3, #0]
  }
}
 8014b60:	bf00      	nop
 8014b62:	371c      	adds	r7, #28
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b085      	sub	sp, #20
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	881a      	ldrh	r2, [r3, #0]
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	4413      	add	r3, r2
 8014b82:	b29a      	uxth	r2, r3
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	781b      	ldrb	r3, [r3, #0]
 8014b8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	4413      	add	r3, r2
 8014b92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014b94:	68fb      	ldr	r3, [r7, #12]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3714      	adds	r7, #20
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba0:	4770      	bx	lr

08014ba2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8014ba2:	b580      	push	{r7, lr}
 8014ba4:	b086      	sub	sp, #24
 8014ba6:	af00      	add	r7, sp, #0
 8014ba8:	60f8      	str	r0, [r7, #12]
 8014baa:	60b9      	str	r1, [r7, #8]
 8014bac:	4613      	mov	r3, r2
 8014bae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	789b      	ldrb	r3, [r3, #2]
 8014bb8:	2b01      	cmp	r3, #1
 8014bba:	d002      	beq.n	8014bc2 <USBH_CtlReq+0x20>
 8014bbc:	2b02      	cmp	r3, #2
 8014bbe:	d01d      	beq.n	8014bfc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8014bc0:	e043      	b.n	8014c4a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	68ba      	ldr	r2, [r7, #8]
 8014bc6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	88fa      	ldrh	r2, [r7, #6]
 8014bcc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2201      	movs	r2, #1
 8014bd2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2202      	movs	r2, #2
 8014bd8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8014bda:	2301      	movs	r3, #1
 8014bdc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2203      	movs	r2, #3
 8014be2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	f000 fd63 	bl	80156c0 <osMessagePut>
      break;
 8014bfa:	e026      	b.n	8014c4a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8014bfc:	68f8      	ldr	r0, [r7, #12]
 8014bfe:	f000 f829 	bl	8014c54 <USBH_HandleControl>
 8014c02:	4603      	mov	r3, r0
 8014c04:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8014c06:	7dfb      	ldrb	r3, [r7, #23]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d002      	beq.n	8014c12 <USBH_CtlReq+0x70>
 8014c0c:	7dfb      	ldrb	r3, [r7, #23]
 8014c0e:	2b03      	cmp	r3, #3
 8014c10:	d106      	bne.n	8014c20 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2201      	movs	r2, #1
 8014c16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	761a      	strb	r2, [r3, #24]
 8014c1e:	e005      	b.n	8014c2c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8014c20:	7dfb      	ldrb	r3, [r7, #23]
 8014c22:	2b02      	cmp	r3, #2
 8014c24:	d102      	bne.n	8014c2c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2201      	movs	r2, #1
 8014c2a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2203      	movs	r2, #3
 8014c30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014c40:	2200      	movs	r2, #0
 8014c42:	4619      	mov	r1, r3
 8014c44:	f000 fd3c 	bl	80156c0 <osMessagePut>
      break;
 8014c48:	bf00      	nop
  }
  return status;
 8014c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3718      	adds	r7, #24
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b086      	sub	sp, #24
 8014c58:	af02      	add	r7, sp, #8
 8014c5a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014c60:	2300      	movs	r3, #0
 8014c62:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	7e1b      	ldrb	r3, [r3, #24]
 8014c68:	3b01      	subs	r3, #1
 8014c6a:	2b0a      	cmp	r3, #10
 8014c6c:	f200 8229 	bhi.w	80150c2 <USBH_HandleControl+0x46e>
 8014c70:	a201      	add	r2, pc, #4	; (adr r2, 8014c78 <USBH_HandleControl+0x24>)
 8014c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c76:	bf00      	nop
 8014c78:	08014ca5 	.word	0x08014ca5
 8014c7c:	08014cbf 	.word	0x08014cbf
 8014c80:	08014d61 	.word	0x08014d61
 8014c84:	08014d87 	.word	0x08014d87
 8014c88:	08014e13 	.word	0x08014e13
 8014c8c:	08014e3d 	.word	0x08014e3d
 8014c90:	08014eff 	.word	0x08014eff
 8014c94:	08014f21 	.word	0x08014f21
 8014c98:	08014fb3 	.word	0x08014fb3
 8014c9c:	08014fd9 	.word	0x08014fd9
 8014ca0:	0801506b 	.word	0x0801506b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f103 0110 	add.w	r1, r3, #16
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	795b      	ldrb	r3, [r3, #5]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f000 fa17 	bl	80150e4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2202      	movs	r2, #2
 8014cba:	761a      	strb	r2, [r3, #24]
      break;
 8014cbc:	e20c      	b.n	80150d8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	795b      	ldrb	r3, [r3, #5]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f003 fb77 	bl	80183b8 <USBH_LL_GetURBState>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8014cce:	7bbb      	ldrb	r3, [r7, #14]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d12c      	bne.n	8014d2e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	7c1b      	ldrb	r3, [r3, #16]
 8014cd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014cdc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	8adb      	ldrh	r3, [r3, #22]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d00a      	beq.n	8014cfc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8014ce6:	7b7b      	ldrb	r3, [r7, #13]
 8014ce8:	2b80      	cmp	r3, #128	; 0x80
 8014cea:	d103      	bne.n	8014cf4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2203      	movs	r2, #3
 8014cf0:	761a      	strb	r2, [r3, #24]
 8014cf2:	e00d      	b.n	8014d10 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2205      	movs	r2, #5
 8014cf8:	761a      	strb	r2, [r3, #24]
 8014cfa:	e009      	b.n	8014d10 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8014cfc:	7b7b      	ldrb	r3, [r7, #13]
 8014cfe:	2b80      	cmp	r3, #128	; 0x80
 8014d00:	d103      	bne.n	8014d0a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2209      	movs	r2, #9
 8014d06:	761a      	strb	r2, [r3, #24]
 8014d08:	e002      	b.n	8014d10 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	2207      	movs	r2, #7
 8014d0e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2203      	movs	r2, #3
 8014d14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d24:	2200      	movs	r2, #0
 8014d26:	4619      	mov	r1, r3
 8014d28:	f000 fcca 	bl	80156c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014d2c:	e1cb      	b.n	80150c6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8014d2e:	7bbb      	ldrb	r3, [r7, #14]
 8014d30:	2b04      	cmp	r3, #4
 8014d32:	d003      	beq.n	8014d3c <USBH_HandleControl+0xe8>
 8014d34:	7bbb      	ldrb	r3, [r7, #14]
 8014d36:	2b02      	cmp	r3, #2
 8014d38:	f040 81c5 	bne.w	80150c6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	220b      	movs	r2, #11
 8014d40:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2203      	movs	r2, #3
 8014d46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014d56:	2200      	movs	r2, #0
 8014d58:	4619      	mov	r1, r3
 8014d5a:	f000 fcb1 	bl	80156c0 <osMessagePut>
      break;
 8014d5e:	e1b2      	b.n	80150c6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6899      	ldr	r1, [r3, #8]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	899a      	ldrh	r2, [r3, #12]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	791b      	ldrb	r3, [r3, #4]
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f000 f9f2 	bl	8015162 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2204      	movs	r2, #4
 8014d82:	761a      	strb	r2, [r3, #24]
      break;
 8014d84:	e1a8      	b.n	80150d8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	791b      	ldrb	r3, [r3, #4]
 8014d8a:	4619      	mov	r1, r3
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f003 fb13 	bl	80183b8 <USBH_LL_GetURBState>
 8014d92:	4603      	mov	r3, r0
 8014d94:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8014d96:	7bbb      	ldrb	r3, [r7, #14]
 8014d98:	2b01      	cmp	r3, #1
 8014d9a:	d110      	bne.n	8014dbe <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2209      	movs	r2, #9
 8014da0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2203      	movs	r2, #3
 8014da6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014db6:	2200      	movs	r2, #0
 8014db8:	4619      	mov	r1, r3
 8014dba:	f000 fc81 	bl	80156c0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8014dbe:	7bbb      	ldrb	r3, [r7, #14]
 8014dc0:	2b05      	cmp	r3, #5
 8014dc2:	d110      	bne.n	8014de6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8014dc4:	2303      	movs	r3, #3
 8014dc6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2203      	movs	r2, #3
 8014dcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ddc:	2200      	movs	r2, #0
 8014dde:	4619      	mov	r1, r3
 8014de0:	f000 fc6e 	bl	80156c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014de4:	e171      	b.n	80150ca <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8014de6:	7bbb      	ldrb	r3, [r7, #14]
 8014de8:	2b04      	cmp	r3, #4
 8014dea:	f040 816e 	bne.w	80150ca <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	220b      	movs	r2, #11
 8014df2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2203      	movs	r2, #3
 8014df8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e08:	2200      	movs	r2, #0
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	f000 fc58 	bl	80156c0 <osMessagePut>
      break;
 8014e10:	e15b      	b.n	80150ca <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6899      	ldr	r1, [r3, #8]
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	899a      	ldrh	r2, [r3, #12]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	795b      	ldrb	r3, [r3, #5]
 8014e1e:	2001      	movs	r0, #1
 8014e20:	9000      	str	r0, [sp, #0]
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 f978 	bl	8015118 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014e2e:	b29a      	uxth	r2, r3
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2206      	movs	r2, #6
 8014e38:	761a      	strb	r2, [r3, #24]
      break;
 8014e3a:	e14d      	b.n	80150d8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	795b      	ldrb	r3, [r3, #5]
 8014e40:	4619      	mov	r1, r3
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f003 fab8 	bl	80183b8 <USBH_LL_GetURBState>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014e4c:	7bbb      	ldrb	r3, [r7, #14]
 8014e4e:	2b01      	cmp	r3, #1
 8014e50:	d111      	bne.n	8014e76 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2207      	movs	r2, #7
 8014e56:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2203      	movs	r2, #3
 8014e5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	4619      	mov	r1, r3
 8014e70:	f000 fc26 	bl	80156c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014e74:	e12b      	b.n	80150ce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8014e76:	7bbb      	ldrb	r3, [r7, #14]
 8014e78:	2b05      	cmp	r3, #5
 8014e7a:	d113      	bne.n	8014ea4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	220c      	movs	r2, #12
 8014e80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8014e82:	2303      	movs	r3, #3
 8014e84:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2203      	movs	r2, #3
 8014e8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	f000 fc0f 	bl	80156c0 <osMessagePut>
      break;
 8014ea2:	e114      	b.n	80150ce <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014ea4:	7bbb      	ldrb	r3, [r7, #14]
 8014ea6:	2b02      	cmp	r3, #2
 8014ea8:	d111      	bne.n	8014ece <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	2205      	movs	r2, #5
 8014eae:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2203      	movs	r2, #3
 8014eb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	f000 fbfa 	bl	80156c0 <osMessagePut>
      break;
 8014ecc:	e0ff      	b.n	80150ce <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8014ece:	7bbb      	ldrb	r3, [r7, #14]
 8014ed0:	2b04      	cmp	r3, #4
 8014ed2:	f040 80fc 	bne.w	80150ce <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	220b      	movs	r2, #11
 8014eda:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014edc:	2302      	movs	r3, #2
 8014ede:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2203      	movs	r2, #3
 8014ee4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	4619      	mov	r1, r3
 8014ef8:	f000 fbe2 	bl	80156c0 <osMessagePut>
      break;
 8014efc:	e0e7      	b.n	80150ce <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	791b      	ldrb	r3, [r3, #4]
 8014f02:	2200      	movs	r2, #0
 8014f04:	2100      	movs	r1, #0
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f000 f92b 	bl	8015162 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014f12:	b29a      	uxth	r2, r3
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2208      	movs	r2, #8
 8014f1c:	761a      	strb	r2, [r3, #24]

      break;
 8014f1e:	e0db      	b.n	80150d8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	791b      	ldrb	r3, [r3, #4]
 8014f24:	4619      	mov	r1, r3
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f003 fa46 	bl	80183b8 <USBH_LL_GetURBState>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014f30:	7bbb      	ldrb	r3, [r7, #14]
 8014f32:	2b01      	cmp	r3, #1
 8014f34:	d113      	bne.n	8014f5e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	220d      	movs	r2, #13
 8014f3a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2203      	movs	r2, #3
 8014f44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f54:	2200      	movs	r2, #0
 8014f56:	4619      	mov	r1, r3
 8014f58:	f000 fbb2 	bl	80156c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014f5c:	e0b9      	b.n	80150d2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8014f5e:	7bbb      	ldrb	r3, [r7, #14]
 8014f60:	2b04      	cmp	r3, #4
 8014f62:	d111      	bne.n	8014f88 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	220b      	movs	r2, #11
 8014f68:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2203      	movs	r2, #3
 8014f6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014f7e:	2200      	movs	r2, #0
 8014f80:	4619      	mov	r1, r3
 8014f82:	f000 fb9d 	bl	80156c0 <osMessagePut>
      break;
 8014f86:	e0a4      	b.n	80150d2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8014f88:	7bbb      	ldrb	r3, [r7, #14]
 8014f8a:	2b05      	cmp	r3, #5
 8014f8c:	f040 80a1 	bne.w	80150d2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8014f90:	2303      	movs	r3, #3
 8014f92:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2203      	movs	r2, #3
 8014f98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014fa8:	2200      	movs	r2, #0
 8014faa:	4619      	mov	r1, r3
 8014fac:	f000 fb88 	bl	80156c0 <osMessagePut>
      break;
 8014fb0:	e08f      	b.n	80150d2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	795b      	ldrb	r3, [r3, #5]
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	9200      	str	r2, [sp, #0]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	2100      	movs	r1, #0
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 f8aa 	bl	8015118 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8014fca:	b29a      	uxth	r2, r3
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	220a      	movs	r2, #10
 8014fd4:	761a      	strb	r2, [r3, #24]
      break;
 8014fd6:	e07f      	b.n	80150d8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	795b      	ldrb	r3, [r3, #5]
 8014fdc:	4619      	mov	r1, r3
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f003 f9ea 	bl	80183b8 <USBH_LL_GetURBState>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8014fe8:	7bbb      	ldrb	r3, [r7, #14]
 8014fea:	2b01      	cmp	r3, #1
 8014fec:	d113      	bne.n	8015016 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	220d      	movs	r2, #13
 8014ff6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2203      	movs	r2, #3
 8014ffc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801500c:	2200      	movs	r2, #0
 801500e:	4619      	mov	r1, r3
 8015010:	f000 fb56 	bl	80156c0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8015014:	e05f      	b.n	80150d6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015016:	7bbb      	ldrb	r3, [r7, #14]
 8015018:	2b02      	cmp	r3, #2
 801501a:	d111      	bne.n	8015040 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2209      	movs	r2, #9
 8015020:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2203      	movs	r2, #3
 8015026:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015036:	2200      	movs	r2, #0
 8015038:	4619      	mov	r1, r3
 801503a:	f000 fb41 	bl	80156c0 <osMessagePut>
      break;
 801503e:	e04a      	b.n	80150d6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8015040:	7bbb      	ldrb	r3, [r7, #14]
 8015042:	2b04      	cmp	r3, #4
 8015044:	d147      	bne.n	80150d6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	220b      	movs	r2, #11
 801504a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2203      	movs	r2, #3
 8015050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015060:	2200      	movs	r2, #0
 8015062:	4619      	mov	r1, r3
 8015064:	f000 fb2c 	bl	80156c0 <osMessagePut>
      break;
 8015068:	e035      	b.n	80150d6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	7e5b      	ldrb	r3, [r3, #25]
 801506e:	3301      	adds	r3, #1
 8015070:	b2da      	uxtb	r2, r3
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	765a      	strb	r2, [r3, #25]
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	7e5b      	ldrb	r3, [r3, #25]
 801507a:	2b02      	cmp	r3, #2
 801507c:	d806      	bhi.n	801508c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2201      	movs	r2, #1
 8015082:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2201      	movs	r2, #1
 8015088:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801508a:	e025      	b.n	80150d8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8015092:	2106      	movs	r1, #6
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2200      	movs	r2, #0
 801509c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	795b      	ldrb	r3, [r3, #5]
 80150a2:	4619      	mov	r1, r3
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f000 f90d 	bl	80152c4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	791b      	ldrb	r3, [r3, #4]
 80150ae:	4619      	mov	r1, r3
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	f000 f907 	bl	80152c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2200      	movs	r2, #0
 80150ba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80150bc:	2302      	movs	r3, #2
 80150be:	73fb      	strb	r3, [r7, #15]
      break;
 80150c0:	e00a      	b.n	80150d8 <USBH_HandleControl+0x484>

    default:
      break;
 80150c2:	bf00      	nop
 80150c4:	e008      	b.n	80150d8 <USBH_HandleControl+0x484>
      break;
 80150c6:	bf00      	nop
 80150c8:	e006      	b.n	80150d8 <USBH_HandleControl+0x484>
      break;
 80150ca:	bf00      	nop
 80150cc:	e004      	b.n	80150d8 <USBH_HandleControl+0x484>
      break;
 80150ce:	bf00      	nop
 80150d0:	e002      	b.n	80150d8 <USBH_HandleControl+0x484>
      break;
 80150d2:	bf00      	nop
 80150d4:	e000      	b.n	80150d8 <USBH_HandleControl+0x484>
      break;
 80150d6:	bf00      	nop
  }

  return status;
 80150d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3710      	adds	r7, #16
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop

080150e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b088      	sub	sp, #32
 80150e8:	af04      	add	r7, sp, #16
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	4613      	mov	r3, r2
 80150f0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80150f2:	79f9      	ldrb	r1, [r7, #7]
 80150f4:	2300      	movs	r3, #0
 80150f6:	9303      	str	r3, [sp, #12]
 80150f8:	2308      	movs	r3, #8
 80150fa:	9302      	str	r3, [sp, #8]
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	9301      	str	r3, [sp, #4]
 8015100:	2300      	movs	r3, #0
 8015102:	9300      	str	r3, [sp, #0]
 8015104:	2300      	movs	r3, #0
 8015106:	2200      	movs	r2, #0
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	f003 f924 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801510e:	2300      	movs	r3, #0
}
 8015110:	4618      	mov	r0, r3
 8015112:	3710      	adds	r7, #16
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b088      	sub	sp, #32
 801511c:	af04      	add	r7, sp, #16
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	4611      	mov	r1, r2
 8015124:	461a      	mov	r2, r3
 8015126:	460b      	mov	r3, r1
 8015128:	80fb      	strh	r3, [r7, #6]
 801512a:	4613      	mov	r3, r2
 801512c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015134:	2b00      	cmp	r3, #0
 8015136:	d001      	beq.n	801513c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8015138:	2300      	movs	r3, #0
 801513a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801513c:	7979      	ldrb	r1, [r7, #5]
 801513e:	7e3b      	ldrb	r3, [r7, #24]
 8015140:	9303      	str	r3, [sp, #12]
 8015142:	88fb      	ldrh	r3, [r7, #6]
 8015144:	9302      	str	r3, [sp, #8]
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	9301      	str	r3, [sp, #4]
 801514a:	2301      	movs	r3, #1
 801514c:	9300      	str	r3, [sp, #0]
 801514e:	2300      	movs	r3, #0
 8015150:	2200      	movs	r2, #0
 8015152:	68f8      	ldr	r0, [r7, #12]
 8015154:	f003 f8ff 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	3710      	adds	r7, #16
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8015162:	b580      	push	{r7, lr}
 8015164:	b088      	sub	sp, #32
 8015166:	af04      	add	r7, sp, #16
 8015168:	60f8      	str	r0, [r7, #12]
 801516a:	60b9      	str	r1, [r7, #8]
 801516c:	4611      	mov	r1, r2
 801516e:	461a      	mov	r2, r3
 8015170:	460b      	mov	r3, r1
 8015172:	80fb      	strh	r3, [r7, #6]
 8015174:	4613      	mov	r3, r2
 8015176:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8015178:	7979      	ldrb	r1, [r7, #5]
 801517a:	2300      	movs	r3, #0
 801517c:	9303      	str	r3, [sp, #12]
 801517e:	88fb      	ldrh	r3, [r7, #6]
 8015180:	9302      	str	r3, [sp, #8]
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	9301      	str	r3, [sp, #4]
 8015186:	2301      	movs	r3, #1
 8015188:	9300      	str	r3, [sp, #0]
 801518a:	2300      	movs	r3, #0
 801518c:	2201      	movs	r2, #1
 801518e:	68f8      	ldr	r0, [r7, #12]
 8015190:	f003 f8e1 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8015194:	2300      	movs	r3, #0

}
 8015196:	4618      	mov	r0, r3
 8015198:	3710      	adds	r7, #16
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}

0801519e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801519e:	b580      	push	{r7, lr}
 80151a0:	b088      	sub	sp, #32
 80151a2:	af04      	add	r7, sp, #16
 80151a4:	60f8      	str	r0, [r7, #12]
 80151a6:	60b9      	str	r1, [r7, #8]
 80151a8:	4611      	mov	r1, r2
 80151aa:	461a      	mov	r2, r3
 80151ac:	460b      	mov	r3, r1
 80151ae:	80fb      	strh	r3, [r7, #6]
 80151b0:	4613      	mov	r3, r2
 80151b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d001      	beq.n	80151c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80151be:	2300      	movs	r3, #0
 80151c0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80151c2:	7979      	ldrb	r1, [r7, #5]
 80151c4:	7e3b      	ldrb	r3, [r7, #24]
 80151c6:	9303      	str	r3, [sp, #12]
 80151c8:	88fb      	ldrh	r3, [r7, #6]
 80151ca:	9302      	str	r3, [sp, #8]
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	9301      	str	r3, [sp, #4]
 80151d0:	2301      	movs	r3, #1
 80151d2:	9300      	str	r3, [sp, #0]
 80151d4:	2302      	movs	r3, #2
 80151d6:	2200      	movs	r2, #0
 80151d8:	68f8      	ldr	r0, [r7, #12]
 80151da:	f003 f8bc 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80151de:	2300      	movs	r3, #0
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3710      	adds	r7, #16
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b088      	sub	sp, #32
 80151ec:	af04      	add	r7, sp, #16
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	4611      	mov	r1, r2
 80151f4:	461a      	mov	r2, r3
 80151f6:	460b      	mov	r3, r1
 80151f8:	80fb      	strh	r3, [r7, #6]
 80151fa:	4613      	mov	r3, r2
 80151fc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80151fe:	7979      	ldrb	r1, [r7, #5]
 8015200:	2300      	movs	r3, #0
 8015202:	9303      	str	r3, [sp, #12]
 8015204:	88fb      	ldrh	r3, [r7, #6]
 8015206:	9302      	str	r3, [sp, #8]
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	9301      	str	r3, [sp, #4]
 801520c:	2301      	movs	r3, #1
 801520e:	9300      	str	r3, [sp, #0]
 8015210:	2302      	movs	r3, #2
 8015212:	2201      	movs	r2, #1
 8015214:	68f8      	ldr	r0, [r7, #12]
 8015216:	f003 f89e 	bl	8018356 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801521a:	2300      	movs	r3, #0
}
 801521c:	4618      	mov	r0, r3
 801521e:	3710      	adds	r7, #16
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}

08015224 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b086      	sub	sp, #24
 8015228:	af04      	add	r7, sp, #16
 801522a:	6078      	str	r0, [r7, #4]
 801522c:	4608      	mov	r0, r1
 801522e:	4611      	mov	r1, r2
 8015230:	461a      	mov	r2, r3
 8015232:	4603      	mov	r3, r0
 8015234:	70fb      	strb	r3, [r7, #3]
 8015236:	460b      	mov	r3, r1
 8015238:	70bb      	strb	r3, [r7, #2]
 801523a:	4613      	mov	r3, r2
 801523c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801523e:	7878      	ldrb	r0, [r7, #1]
 8015240:	78ba      	ldrb	r2, [r7, #2]
 8015242:	78f9      	ldrb	r1, [r7, #3]
 8015244:	8b3b      	ldrh	r3, [r7, #24]
 8015246:	9302      	str	r3, [sp, #8]
 8015248:	7d3b      	ldrb	r3, [r7, #20]
 801524a:	9301      	str	r3, [sp, #4]
 801524c:	7c3b      	ldrb	r3, [r7, #16]
 801524e:	9300      	str	r3, [sp, #0]
 8015250:	4603      	mov	r3, r0
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f003 f831 	bl	80182ba <USBH_LL_OpenPipe>

  return USBH_OK;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3708      	adds	r7, #8
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b082      	sub	sp, #8
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
 801526a:	460b      	mov	r3, r1
 801526c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801526e:	78fb      	ldrb	r3, [r7, #3]
 8015270:	4619      	mov	r1, r3
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f003 f850 	bl	8018318 <USBH_LL_ClosePipe>

  return USBH_OK;
 8015278:	2300      	movs	r3, #0
}
 801527a:	4618      	mov	r0, r3
 801527c:	3708      	adds	r7, #8
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}

08015282 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8015282:	b580      	push	{r7, lr}
 8015284:	b084      	sub	sp, #16
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
 801528a:	460b      	mov	r3, r1
 801528c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f000 f836 	bl	8015300 <USBH_GetFreePipe>
 8015294:	4603      	mov	r3, r0
 8015296:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8015298:	89fb      	ldrh	r3, [r7, #14]
 801529a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801529e:	4293      	cmp	r3, r2
 80152a0:	d00a      	beq.n	80152b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80152a2:	78fa      	ldrb	r2, [r7, #3]
 80152a4:	89fb      	ldrh	r3, [r7, #14]
 80152a6:	f003 030f 	and.w	r3, r3, #15
 80152aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80152ae:	6879      	ldr	r1, [r7, #4]
 80152b0:	33e0      	adds	r3, #224	; 0xe0
 80152b2:	009b      	lsls	r3, r3, #2
 80152b4:	440b      	add	r3, r1
 80152b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80152b8:	89fb      	ldrh	r3, [r7, #14]
 80152ba:	b2db      	uxtb	r3, r3
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3710      	adds	r7, #16
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}

080152c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	460b      	mov	r3, r1
 80152ce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80152d0:	78fb      	ldrb	r3, [r7, #3]
 80152d2:	2b0a      	cmp	r3, #10
 80152d4:	d80d      	bhi.n	80152f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80152d6:	78fb      	ldrb	r3, [r7, #3]
 80152d8:	687a      	ldr	r2, [r7, #4]
 80152da:	33e0      	adds	r3, #224	; 0xe0
 80152dc:	009b      	lsls	r3, r3, #2
 80152de:	4413      	add	r3, r2
 80152e0:	685a      	ldr	r2, [r3, #4]
 80152e2:	78fb      	ldrb	r3, [r7, #3]
 80152e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80152e8:	6879      	ldr	r1, [r7, #4]
 80152ea:	33e0      	adds	r3, #224	; 0xe0
 80152ec:	009b      	lsls	r3, r3, #2
 80152ee:	440b      	add	r3, r1
 80152f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80152f2:	2300      	movs	r3, #0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	370c      	adds	r7, #12
 80152f8:	46bd      	mov	sp, r7
 80152fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fe:	4770      	bx	lr

08015300 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8015300:	b480      	push	{r7}
 8015302:	b085      	sub	sp, #20
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8015308:	2300      	movs	r3, #0
 801530a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801530c:	2300      	movs	r3, #0
 801530e:	73fb      	strb	r3, [r7, #15]
 8015310:	e00f      	b.n	8015332 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8015312:	7bfb      	ldrb	r3, [r7, #15]
 8015314:	687a      	ldr	r2, [r7, #4]
 8015316:	33e0      	adds	r3, #224	; 0xe0
 8015318:	009b      	lsls	r3, r3, #2
 801531a:	4413      	add	r3, r2
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015322:	2b00      	cmp	r3, #0
 8015324:	d102      	bne.n	801532c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8015326:	7bfb      	ldrb	r3, [r7, #15]
 8015328:	b29b      	uxth	r3, r3
 801532a:	e007      	b.n	801533c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801532c:	7bfb      	ldrb	r3, [r7, #15]
 801532e:	3301      	adds	r3, #1
 8015330:	73fb      	strb	r3, [r7, #15]
 8015332:	7bfb      	ldrb	r3, [r7, #15]
 8015334:	2b0a      	cmp	r3, #10
 8015336:	d9ec      	bls.n	8015312 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8015338:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801533c:	4618      	mov	r0, r3
 801533e:	3714      	adds	r7, #20
 8015340:	46bd      	mov	sp, r7
 8015342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015346:	4770      	bx	lr

08015348 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015348:	b480      	push	{r7}
 801534a:	b087      	sub	sp, #28
 801534c:	af00      	add	r7, sp, #0
 801534e:	60f8      	str	r0, [r7, #12]
 8015350:	60b9      	str	r1, [r7, #8]
 8015352:	4613      	mov	r3, r2
 8015354:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015356:	2301      	movs	r3, #1
 8015358:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801535a:	2300      	movs	r3, #0
 801535c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801535e:	4b1f      	ldr	r3, [pc, #124]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 8015360:	7a5b      	ldrb	r3, [r3, #9]
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b00      	cmp	r3, #0
 8015366:	d131      	bne.n	80153cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015368:	4b1c      	ldr	r3, [pc, #112]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 801536a:	7a5b      	ldrb	r3, [r3, #9]
 801536c:	b2db      	uxtb	r3, r3
 801536e:	461a      	mov	r2, r3
 8015370:	4b1a      	ldr	r3, [pc, #104]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 8015372:	2100      	movs	r1, #0
 8015374:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015376:	4b19      	ldr	r3, [pc, #100]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 8015378:	7a5b      	ldrb	r3, [r3, #9]
 801537a:	b2db      	uxtb	r3, r3
 801537c:	4a17      	ldr	r2, [pc, #92]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 801537e:	009b      	lsls	r3, r3, #2
 8015380:	4413      	add	r3, r2
 8015382:	68fa      	ldr	r2, [r7, #12]
 8015384:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015386:	4b15      	ldr	r3, [pc, #84]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 8015388:	7a5b      	ldrb	r3, [r3, #9]
 801538a:	b2db      	uxtb	r3, r3
 801538c:	461a      	mov	r2, r3
 801538e:	4b13      	ldr	r3, [pc, #76]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 8015390:	4413      	add	r3, r2
 8015392:	79fa      	ldrb	r2, [r7, #7]
 8015394:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015396:	4b11      	ldr	r3, [pc, #68]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 8015398:	7a5b      	ldrb	r3, [r3, #9]
 801539a:	b2db      	uxtb	r3, r3
 801539c:	1c5a      	adds	r2, r3, #1
 801539e:	b2d1      	uxtb	r1, r2
 80153a0:	4a0e      	ldr	r2, [pc, #56]	; (80153dc <FATFS_LinkDriverEx+0x94>)
 80153a2:	7251      	strb	r1, [r2, #9]
 80153a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80153a6:	7dbb      	ldrb	r3, [r7, #22]
 80153a8:	3330      	adds	r3, #48	; 0x30
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	3301      	adds	r3, #1
 80153b4:	223a      	movs	r2, #58	; 0x3a
 80153b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	3302      	adds	r3, #2
 80153bc:	222f      	movs	r2, #47	; 0x2f
 80153be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80153c0:	68bb      	ldr	r3, [r7, #8]
 80153c2:	3303      	adds	r3, #3
 80153c4:	2200      	movs	r2, #0
 80153c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80153c8:	2300      	movs	r3, #0
 80153ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80153cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	371c      	adds	r7, #28
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr
 80153da:	bf00      	nop
 80153dc:	20000388 	.word	0x20000388

080153e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80153ea:	2200      	movs	r2, #0
 80153ec:	6839      	ldr	r1, [r7, #0]
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f7ff ffaa 	bl	8015348 <FATFS_LinkDriverEx>
 80153f4:	4603      	mov	r3, r0
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3708      	adds	r7, #8
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}

080153fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80153fe:	b480      	push	{r7}
 8015400:	b085      	sub	sp, #20
 8015402:	af00      	add	r7, sp, #0
 8015404:	4603      	mov	r3, r0
 8015406:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015408:	2300      	movs	r3, #0
 801540a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801540c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015410:	2b84      	cmp	r3, #132	; 0x84
 8015412:	d005      	beq.n	8015420 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015414:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	4413      	add	r3, r2
 801541c:	3303      	adds	r3, #3
 801541e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015420:	68fb      	ldr	r3, [r7, #12]
}
 8015422:	4618      	mov	r0, r3
 8015424:	3714      	adds	r7, #20
 8015426:	46bd      	mov	sp, r7
 8015428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542c:	4770      	bx	lr

0801542e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801542e:	b480      	push	{r7}
 8015430:	b083      	sub	sp, #12
 8015432:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015434:	f3ef 8305 	mrs	r3, IPSR
 8015438:	607b      	str	r3, [r7, #4]
  return(result);
 801543a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801543c:	2b00      	cmp	r3, #0
 801543e:	bf14      	ite	ne
 8015440:	2301      	movne	r3, #1
 8015442:	2300      	moveq	r3, #0
 8015444:	b2db      	uxtb	r3, r3
}
 8015446:	4618      	mov	r0, r3
 8015448:	370c      	adds	r7, #12
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr

08015452 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015452:	b580      	push	{r7, lr}
 8015454:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015456:	f001 f9e7 	bl	8016828 <vTaskStartScheduler>
  
  return osOK;
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	bd80      	pop	{r7, pc}

08015460 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8015464:	f001 fe3a 	bl	80170dc <xTaskGetSchedulerState>
 8015468:	4603      	mov	r3, r0
 801546a:	2b01      	cmp	r3, #1
 801546c:	d101      	bne.n	8015472 <osKernelRunning+0x12>
    return 0;
 801546e:	2300      	movs	r3, #0
 8015470:	e000      	b.n	8015474 <osKernelRunning+0x14>
  else
    return 1;
 8015472:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8015474:	4618      	mov	r0, r3
 8015476:	bd80      	pop	{r7, pc}

08015478 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801547c:	f7ff ffd7 	bl	801542e <inHandlerMode>
 8015480:	4603      	mov	r3, r0
 8015482:	2b00      	cmp	r3, #0
 8015484:	d003      	beq.n	801548e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8015486:	f001 faef 	bl	8016a68 <xTaskGetTickCountFromISR>
 801548a:	4603      	mov	r3, r0
 801548c:	e002      	b.n	8015494 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801548e:	f001 fadb 	bl	8016a48 <xTaskGetTickCount>
 8015492:	4603      	mov	r3, r0
  }
}
 8015494:	4618      	mov	r0, r3
 8015496:	bd80      	pop	{r7, pc}

08015498 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8015498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801549a:	b089      	sub	sp, #36	; 0x24
 801549c:	af04      	add	r7, sp, #16
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	695b      	ldr	r3, [r3, #20]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d020      	beq.n	80154ec <osThreadCreate+0x54>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	699b      	ldr	r3, [r3, #24]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d01c      	beq.n	80154ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	685c      	ldr	r4, [r3, #4]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681d      	ldr	r5, [r3, #0]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	691e      	ldr	r6, [r3, #16]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff ff9a 	bl	80153fe <makeFreeRtosPriority>
 80154ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	695b      	ldr	r3, [r3, #20]
 80154d0:	687a      	ldr	r2, [r7, #4]
 80154d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154d4:	9202      	str	r2, [sp, #8]
 80154d6:	9301      	str	r3, [sp, #4]
 80154d8:	9100      	str	r1, [sp, #0]
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	4632      	mov	r2, r6
 80154de:	4629      	mov	r1, r5
 80154e0:	4620      	mov	r0, r4
 80154e2:	f000 ffc5 	bl	8016470 <xTaskCreateStatic>
 80154e6:	4603      	mov	r3, r0
 80154e8:	60fb      	str	r3, [r7, #12]
 80154ea:	e01c      	b.n	8015526 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	685c      	ldr	r4, [r3, #4]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80154f8:	b29e      	uxth	r6, r3
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015500:	4618      	mov	r0, r3
 8015502:	f7ff ff7c 	bl	80153fe <makeFreeRtosPriority>
 8015506:	4602      	mov	r2, r0
 8015508:	f107 030c 	add.w	r3, r7, #12
 801550c:	9301      	str	r3, [sp, #4]
 801550e:	9200      	str	r2, [sp, #0]
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	4632      	mov	r2, r6
 8015514:	4629      	mov	r1, r5
 8015516:	4620      	mov	r0, r4
 8015518:	f001 f80d 	bl	8016536 <xTaskCreate>
 801551c:	4603      	mov	r3, r0
 801551e:	2b01      	cmp	r3, #1
 8015520:	d001      	beq.n	8015526 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015522:	2300      	movs	r3, #0
 8015524:	e000      	b.n	8015528 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015526:	68fb      	ldr	r3, [r7, #12]
}
 8015528:	4618      	mov	r0, r3
 801552a:	3714      	adds	r7, #20
 801552c:	46bd      	mov	sp, r7
 801552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015530 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b084      	sub	sp, #16
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d001      	beq.n	8015546 <osDelay+0x16>
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	e000      	b.n	8015548 <osDelay+0x18>
 8015546:	2301      	movs	r3, #1
 8015548:	4618      	mov	r0, r3
 801554a:	f001 f937 	bl	80167bc <vTaskDelay>
  
  return osOK;
 801554e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015550:	4618      	mov	r0, r3
 8015552:	3710      	adds	r7, #16
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b086      	sub	sp, #24
 801555c:	af02      	add	r7, sp, #8
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015562:	2300      	movs	r3, #0
 8015564:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8015566:	2300      	movs	r3, #0
 8015568:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 801556a:	f7ff ff60 	bl	801542e <inHandlerMode>
 801556e:	4603      	mov	r3, r0
 8015570:	2b00      	cmp	r3, #0
 8015572:	d01c      	beq.n	80155ae <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8015574:	6839      	ldr	r1, [r7, #0]
 8015576:	f107 0208 	add.w	r2, r7, #8
 801557a:	f107 030c 	add.w	r3, r7, #12
 801557e:	9300      	str	r3, [sp, #0]
 8015580:	4613      	mov	r3, r2
 8015582:	2201      	movs	r2, #1
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f001 ff67 	bl	8017458 <xTaskGenericNotifyFromISR>
 801558a:	4603      	mov	r3, r0
 801558c:	2b01      	cmp	r3, #1
 801558e:	d002      	beq.n	8015596 <osSignalSet+0x3e>
      return 0x80000000;
 8015590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015594:	e019      	b.n	80155ca <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d015      	beq.n	80155c8 <osSignalSet+0x70>
 801559c:	4b0d      	ldr	r3, [pc, #52]	; (80155d4 <osSignalSet+0x7c>)
 801559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155a2:	601a      	str	r2, [r3, #0]
 80155a4:	f3bf 8f4f 	dsb	sy
 80155a8:	f3bf 8f6f 	isb	sy
 80155ac:	e00c      	b.n	80155c8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80155ae:	6839      	ldr	r1, [r7, #0]
 80155b0:	f107 0308 	add.w	r3, r7, #8
 80155b4:	2201      	movs	r2, #1
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f001 fe92 	bl	80172e0 <xTaskGenericNotify>
 80155bc:	4603      	mov	r3, r0
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d002      	beq.n	80155c8 <osSignalSet+0x70>
    return 0x80000000;
 80155c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80155c6:	e000      	b.n	80155ca <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80155c8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3710      	adds	r7, #16
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	bf00      	nop
 80155d4:	e000ed04 	.word	0xe000ed04

080155d8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80155d8:	b590      	push	{r4, r7, lr}
 80155da:	b089      	sub	sp, #36	; 0x24
 80155dc:	af00      	add	r7, sp, #0
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80155e4:	2300      	movs	r3, #0
 80155e6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80155e8:	2300      	movs	r3, #0
 80155ea:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155f2:	d103      	bne.n	80155fc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80155f4:	f04f 33ff 	mov.w	r3, #4294967295
 80155f8:	61fb      	str	r3, [r7, #28]
 80155fa:	e009      	b.n	8015610 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d006      	beq.n	8015610 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8015606:	69fb      	ldr	r3, [r7, #28]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d101      	bne.n	8015610 <osSignalWait+0x38>
      ticks = 1;
 801560c:	2301      	movs	r3, #1
 801560e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8015610:	f7ff ff0d 	bl	801542e <inHandlerMode>
 8015614:	4603      	mov	r3, r0
 8015616:	2b00      	cmp	r3, #0
 8015618:	d002      	beq.n	8015620 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801561a:	2382      	movs	r3, #130	; 0x82
 801561c:	613b      	str	r3, [r7, #16]
 801561e:	e01b      	b.n	8015658 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8015620:	68b9      	ldr	r1, [r7, #8]
 8015622:	f107 0310 	add.w	r3, r7, #16
 8015626:	1d1a      	adds	r2, r3, #4
 8015628:	69fb      	ldr	r3, [r7, #28]
 801562a:	2000      	movs	r0, #0
 801562c:	f001 fdfe 	bl	801722c <xTaskNotifyWait>
 8015630:	4603      	mov	r3, r0
 8015632:	2b01      	cmp	r3, #1
 8015634:	d008      	beq.n	8015648 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d102      	bne.n	8015642 <osSignalWait+0x6a>
 801563c:	2300      	movs	r3, #0
 801563e:	613b      	str	r3, [r7, #16]
 8015640:	e00a      	b.n	8015658 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8015642:	2340      	movs	r3, #64	; 0x40
 8015644:	613b      	str	r3, [r7, #16]
 8015646:	e007      	b.n	8015658 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	2b00      	cmp	r3, #0
 801564c:	da02      	bge.n	8015654 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 801564e:	2386      	movs	r3, #134	; 0x86
 8015650:	613b      	str	r3, [r7, #16]
 8015652:	e001      	b.n	8015658 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8015654:	2308      	movs	r3, #8
 8015656:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	461c      	mov	r4, r3
 801565c:	f107 0310 	add.w	r3, r7, #16
 8015660:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015668:	68f8      	ldr	r0, [r7, #12]
 801566a:	3724      	adds	r7, #36	; 0x24
 801566c:	46bd      	mov	sp, r7
 801566e:	bd90      	pop	{r4, r7, pc}

08015670 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015670:	b590      	push	{r4, r7, lr}
 8015672:	b085      	sub	sp, #20
 8015674:	af02      	add	r7, sp, #8
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	689b      	ldr	r3, [r3, #8]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d011      	beq.n	80156a6 <osMessageCreate+0x36>
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	68db      	ldr	r3, [r3, #12]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d00d      	beq.n	80156a6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	6818      	ldr	r0, [r3, #0]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6859      	ldr	r1, [r3, #4]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	689a      	ldr	r2, [r3, #8]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	2400      	movs	r4, #0
 801569c:	9400      	str	r4, [sp, #0]
 801569e:	f000 f9e1 	bl	8015a64 <xQueueGenericCreateStatic>
 80156a2:	4603      	mov	r3, r0
 80156a4:	e008      	b.n	80156b8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6818      	ldr	r0, [r3, #0]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	685b      	ldr	r3, [r3, #4]
 80156ae:	2200      	movs	r2, #0
 80156b0:	4619      	mov	r1, r3
 80156b2:	f000 fa59 	bl	8015b68 <xQueueGenericCreate>
 80156b6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	370c      	adds	r7, #12
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd90      	pop	{r4, r7, pc}

080156c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b086      	sub	sp, #24
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	60f8      	str	r0, [r7, #12]
 80156c8:	60b9      	str	r1, [r7, #8]
 80156ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80156cc:	2300      	movs	r3, #0
 80156ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d101      	bne.n	80156de <osMessagePut+0x1e>
    ticks = 1;
 80156da:	2301      	movs	r3, #1
 80156dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80156de:	f7ff fea6 	bl	801542e <inHandlerMode>
 80156e2:	4603      	mov	r3, r0
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d018      	beq.n	801571a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80156e8:	f107 0210 	add.w	r2, r7, #16
 80156ec:	f107 0108 	add.w	r1, r7, #8
 80156f0:	2300      	movs	r3, #0
 80156f2:	68f8      	ldr	r0, [r7, #12]
 80156f4:	f000 fba0 	bl	8015e38 <xQueueGenericSendFromISR>
 80156f8:	4603      	mov	r3, r0
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	d001      	beq.n	8015702 <osMessagePut+0x42>
      return osErrorOS;
 80156fe:	23ff      	movs	r3, #255	; 0xff
 8015700:	e018      	b.n	8015734 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d014      	beq.n	8015732 <osMessagePut+0x72>
 8015708:	4b0c      	ldr	r3, [pc, #48]	; (801573c <osMessagePut+0x7c>)
 801570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801570e:	601a      	str	r2, [r3, #0]
 8015710:	f3bf 8f4f 	dsb	sy
 8015714:	f3bf 8f6f 	isb	sy
 8015718:	e00b      	b.n	8015732 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801571a:	f107 0108 	add.w	r1, r7, #8
 801571e:	2300      	movs	r3, #0
 8015720:	697a      	ldr	r2, [r7, #20]
 8015722:	68f8      	ldr	r0, [r7, #12]
 8015724:	f000 fa82 	bl	8015c2c <xQueueGenericSend>
 8015728:	4603      	mov	r3, r0
 801572a:	2b01      	cmp	r3, #1
 801572c:	d001      	beq.n	8015732 <osMessagePut+0x72>
      return osErrorOS;
 801572e:	23ff      	movs	r3, #255	; 0xff
 8015730:	e000      	b.n	8015734 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3718      	adds	r7, #24
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	e000ed04 	.word	0xe000ed04

08015740 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015740:	b590      	push	{r4, r7, lr}
 8015742:	b08b      	sub	sp, #44	; 0x2c
 8015744:	af00      	add	r7, sp, #0
 8015746:	60f8      	str	r0, [r7, #12]
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015750:	2300      	movs	r3, #0
 8015752:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d10a      	bne.n	8015770 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801575a:	2380      	movs	r3, #128	; 0x80
 801575c:	617b      	str	r3, [r7, #20]
    return event;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	461c      	mov	r4, r3
 8015762:	f107 0314 	add.w	r3, r7, #20
 8015766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801576a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801576e:	e054      	b.n	801581a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015770:	2300      	movs	r3, #0
 8015772:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8015774:	2300      	movs	r3, #0
 8015776:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801577e:	d103      	bne.n	8015788 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015780:	f04f 33ff 	mov.w	r3, #4294967295
 8015784:	627b      	str	r3, [r7, #36]	; 0x24
 8015786:	e009      	b.n	801579c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d006      	beq.n	801579c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8015792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015794:	2b00      	cmp	r3, #0
 8015796:	d101      	bne.n	801579c <osMessageGet+0x5c>
      ticks = 1;
 8015798:	2301      	movs	r3, #1
 801579a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801579c:	f7ff fe47 	bl	801542e <inHandlerMode>
 80157a0:	4603      	mov	r3, r0
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d01c      	beq.n	80157e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80157a6:	f107 0220 	add.w	r2, r7, #32
 80157aa:	f107 0314 	add.w	r3, r7, #20
 80157ae:	3304      	adds	r3, #4
 80157b0:	4619      	mov	r1, r3
 80157b2:	68b8      	ldr	r0, [r7, #8]
 80157b4:	f000 fcc6 	bl	8016144 <xQueueReceiveFromISR>
 80157b8:	4603      	mov	r3, r0
 80157ba:	2b01      	cmp	r3, #1
 80157bc:	d102      	bne.n	80157c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80157be:	2310      	movs	r3, #16
 80157c0:	617b      	str	r3, [r7, #20]
 80157c2:	e001      	b.n	80157c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80157c4:	2300      	movs	r3, #0
 80157c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80157c8:	6a3b      	ldr	r3, [r7, #32]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d01d      	beq.n	801580a <osMessageGet+0xca>
 80157ce:	4b15      	ldr	r3, [pc, #84]	; (8015824 <osMessageGet+0xe4>)
 80157d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157d4:	601a      	str	r2, [r3, #0]
 80157d6:	f3bf 8f4f 	dsb	sy
 80157da:	f3bf 8f6f 	isb	sy
 80157de:	e014      	b.n	801580a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80157e0:	f107 0314 	add.w	r3, r7, #20
 80157e4:	3304      	adds	r3, #4
 80157e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157e8:	4619      	mov	r1, r3
 80157ea:	68b8      	ldr	r0, [r7, #8]
 80157ec:	f000 fbc4 	bl	8015f78 <xQueueReceive>
 80157f0:	4603      	mov	r3, r0
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d102      	bne.n	80157fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80157f6:	2310      	movs	r3, #16
 80157f8:	617b      	str	r3, [r7, #20]
 80157fa:	e006      	b.n	801580a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80157fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d101      	bne.n	8015806 <osMessageGet+0xc6>
 8015802:	2300      	movs	r3, #0
 8015804:	e000      	b.n	8015808 <osMessageGet+0xc8>
 8015806:	2340      	movs	r3, #64	; 0x40
 8015808:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	461c      	mov	r4, r3
 801580e:	f107 0314 	add.w	r3, r7, #20
 8015812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801581a:	68f8      	ldr	r0, [r7, #12]
 801581c:	372c      	adds	r7, #44	; 0x2c
 801581e:	46bd      	mov	sp, r7
 8015820:	bd90      	pop	{r4, r7, pc}
 8015822:	bf00      	nop
 8015824:	e000ed04 	.word	0xe000ed04

08015828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f103 0208 	add.w	r2, r3, #8
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f04f 32ff 	mov.w	r2, #4294967295
 8015840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f103 0208 	add.w	r2, r3, #8
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f103 0208 	add.w	r2, r3, #8
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2200      	movs	r2, #0
 801585a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801585c:	bf00      	nop
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr

08015868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2200      	movs	r2, #0
 8015874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015876:	bf00      	nop
 8015878:	370c      	adds	r7, #12
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr

08015882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015882:	b480      	push	{r7}
 8015884:	b085      	sub	sp, #20
 8015886:	af00      	add	r7, sp, #0
 8015888:	6078      	str	r0, [r7, #4]
 801588a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	68fa      	ldr	r2, [r7, #12]
 8015896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	689a      	ldr	r2, [r3, #8]
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	689b      	ldr	r3, [r3, #8]
 80158a4:	683a      	ldr	r2, [r7, #0]
 80158a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	683a      	ldr	r2, [r7, #0]
 80158ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	1c5a      	adds	r2, r3, #1
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	601a      	str	r2, [r3, #0]
}
 80158be:	bf00      	nop
 80158c0:	3714      	adds	r7, #20
 80158c2:	46bd      	mov	sp, r7
 80158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c8:	4770      	bx	lr

080158ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80158ca:	b480      	push	{r7}
 80158cc:	b085      	sub	sp, #20
 80158ce:	af00      	add	r7, sp, #0
 80158d0:	6078      	str	r0, [r7, #4]
 80158d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158e0:	d103      	bne.n	80158ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	691b      	ldr	r3, [r3, #16]
 80158e6:	60fb      	str	r3, [r7, #12]
 80158e8:	e00c      	b.n	8015904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	3308      	adds	r3, #8
 80158ee:	60fb      	str	r3, [r7, #12]
 80158f0:	e002      	b.n	80158f8 <vListInsert+0x2e>
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	685b      	ldr	r3, [r3, #4]
 80158f6:	60fb      	str	r3, [r7, #12]
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	68ba      	ldr	r2, [r7, #8]
 8015900:	429a      	cmp	r2, r3
 8015902:	d2f6      	bcs.n	80158f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	683a      	ldr	r2, [r7, #0]
 8015912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	68fa      	ldr	r2, [r7, #12]
 8015918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	683a      	ldr	r2, [r7, #0]
 801591e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	687a      	ldr	r2, [r7, #4]
 8015924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	1c5a      	adds	r2, r3, #1
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	601a      	str	r2, [r3, #0]
}
 8015930:	bf00      	nop
 8015932:	3714      	adds	r7, #20
 8015934:	46bd      	mov	sp, r7
 8015936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593a:	4770      	bx	lr

0801593c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801593c:	b480      	push	{r7}
 801593e:	b085      	sub	sp, #20
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	691b      	ldr	r3, [r3, #16]
 8015948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	687a      	ldr	r2, [r7, #4]
 8015950:	6892      	ldr	r2, [r2, #8]
 8015952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	6852      	ldr	r2, [r2, #4]
 801595c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	429a      	cmp	r2, r3
 8015966:	d103      	bne.n	8015970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	689a      	ldr	r2, [r3, #8]
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2200      	movs	r2, #0
 8015974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	1e5a      	subs	r2, r3, #1
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681b      	ldr	r3, [r3, #0]
}
 8015984:	4618      	mov	r0, r3
 8015986:	3714      	adds	r7, #20
 8015988:	46bd      	mov	sp, r7
 801598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598e:	4770      	bx	lr

08015990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10c      	bne.n	80159be <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80159a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a8:	b672      	cpsid	i
 80159aa:	f383 8811 	msr	BASEPRI, r3
 80159ae:	f3bf 8f6f 	isb	sy
 80159b2:	f3bf 8f4f 	dsb	sy
 80159b6:	b662      	cpsie	i
 80159b8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80159ba:	bf00      	nop
 80159bc:	e7fe      	b.n	80159bc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80159be:	f001 ff9d 	bl	80178fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ca:	68f9      	ldr	r1, [r7, #12]
 80159cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80159ce:	fb01 f303 	mul.w	r3, r1, r3
 80159d2:	441a      	add	r2, r3
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2200      	movs	r2, #0
 80159dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	681a      	ldr	r2, [r3, #0]
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	681a      	ldr	r2, [r3, #0]
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ee:	3b01      	subs	r3, #1
 80159f0:	68f9      	ldr	r1, [r7, #12]
 80159f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80159f4:	fb01 f303 	mul.w	r3, r1, r3
 80159f8:	441a      	add	r2, r3
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	22ff      	movs	r2, #255	; 0xff
 8015a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	22ff      	movs	r2, #255	; 0xff
 8015a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d114      	bne.n	8015a3e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	691b      	ldr	r3, [r3, #16]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d01a      	beq.n	8015a52 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	3310      	adds	r3, #16
 8015a20:	4618      	mov	r0, r3
 8015a22:	f001 f995 	bl	8016d50 <xTaskRemoveFromEventList>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d012      	beq.n	8015a52 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015a2c:	4b0c      	ldr	r3, [pc, #48]	; (8015a60 <xQueueGenericReset+0xd0>)
 8015a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a32:	601a      	str	r2, [r3, #0]
 8015a34:	f3bf 8f4f 	dsb	sy
 8015a38:	f3bf 8f6f 	isb	sy
 8015a3c:	e009      	b.n	8015a52 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3310      	adds	r3, #16
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7ff fef0 	bl	8015828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	3324      	adds	r3, #36	; 0x24
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7ff feeb 	bl	8015828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015a52:	f001 ff87 	bl	8017964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015a56:	2301      	movs	r3, #1
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3710      	adds	r7, #16
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	e000ed04 	.word	0xe000ed04

08015a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b08e      	sub	sp, #56	; 0x38
 8015a68:	af02      	add	r7, sp, #8
 8015a6a:	60f8      	str	r0, [r7, #12]
 8015a6c:	60b9      	str	r1, [r7, #8]
 8015a6e:	607a      	str	r2, [r7, #4]
 8015a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d10c      	bne.n	8015a92 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8015a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a7c:	b672      	cpsid	i
 8015a7e:	f383 8811 	msr	BASEPRI, r3
 8015a82:	f3bf 8f6f 	isb	sy
 8015a86:	f3bf 8f4f 	dsb	sy
 8015a8a:	b662      	cpsie	i
 8015a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015a8e:	bf00      	nop
 8015a90:	e7fe      	b.n	8015a90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d10c      	bne.n	8015ab2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8015a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9c:	b672      	cpsid	i
 8015a9e:	f383 8811 	msr	BASEPRI, r3
 8015aa2:	f3bf 8f6f 	isb	sy
 8015aa6:	f3bf 8f4f 	dsb	sy
 8015aaa:	b662      	cpsie	i
 8015aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015aae:	bf00      	nop
 8015ab0:	e7fe      	b.n	8015ab0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d002      	beq.n	8015abe <xQueueGenericCreateStatic+0x5a>
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d001      	beq.n	8015ac2 <xQueueGenericCreateStatic+0x5e>
 8015abe:	2301      	movs	r3, #1
 8015ac0:	e000      	b.n	8015ac4 <xQueueGenericCreateStatic+0x60>
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d10c      	bne.n	8015ae2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8015ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015acc:	b672      	cpsid	i
 8015ace:	f383 8811 	msr	BASEPRI, r3
 8015ad2:	f3bf 8f6f 	isb	sy
 8015ad6:	f3bf 8f4f 	dsb	sy
 8015ada:	b662      	cpsie	i
 8015adc:	623b      	str	r3, [r7, #32]
}
 8015ade:	bf00      	nop
 8015ae0:	e7fe      	b.n	8015ae0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d102      	bne.n	8015aee <xQueueGenericCreateStatic+0x8a>
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d101      	bne.n	8015af2 <xQueueGenericCreateStatic+0x8e>
 8015aee:	2301      	movs	r3, #1
 8015af0:	e000      	b.n	8015af4 <xQueueGenericCreateStatic+0x90>
 8015af2:	2300      	movs	r3, #0
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d10c      	bne.n	8015b12 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8015af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015afc:	b672      	cpsid	i
 8015afe:	f383 8811 	msr	BASEPRI, r3
 8015b02:	f3bf 8f6f 	isb	sy
 8015b06:	f3bf 8f4f 	dsb	sy
 8015b0a:	b662      	cpsie	i
 8015b0c:	61fb      	str	r3, [r7, #28]
}
 8015b0e:	bf00      	nop
 8015b10:	e7fe      	b.n	8015b10 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015b12:	2348      	movs	r3, #72	; 0x48
 8015b14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	2b48      	cmp	r3, #72	; 0x48
 8015b1a:	d00c      	beq.n	8015b36 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8015b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b20:	b672      	cpsid	i
 8015b22:	f383 8811 	msr	BASEPRI, r3
 8015b26:	f3bf 8f6f 	isb	sy
 8015b2a:	f3bf 8f4f 	dsb	sy
 8015b2e:	b662      	cpsie	i
 8015b30:	61bb      	str	r3, [r7, #24]
}
 8015b32:	bf00      	nop
 8015b34:	e7fe      	b.n	8015b34 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015b36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00d      	beq.n	8015b5e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b44:	2201      	movs	r2, #1
 8015b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015b4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	4613      	mov	r3, r2
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	68b9      	ldr	r1, [r7, #8]
 8015b58:	68f8      	ldr	r0, [r7, #12]
 8015b5a:	f000 f847 	bl	8015bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3730      	adds	r7, #48	; 0x30
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b08a      	sub	sp, #40	; 0x28
 8015b6c:	af02      	add	r7, sp, #8
 8015b6e:	60f8      	str	r0, [r7, #12]
 8015b70:	60b9      	str	r1, [r7, #8]
 8015b72:	4613      	mov	r3, r2
 8015b74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d10c      	bne.n	8015b96 <xQueueGenericCreate+0x2e>
	__asm volatile
 8015b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b80:	b672      	cpsid	i
 8015b82:	f383 8811 	msr	BASEPRI, r3
 8015b86:	f3bf 8f6f 	isb	sy
 8015b8a:	f3bf 8f4f 	dsb	sy
 8015b8e:	b662      	cpsie	i
 8015b90:	613b      	str	r3, [r7, #16]
}
 8015b92:	bf00      	nop
 8015b94:	e7fe      	b.n	8015b94 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d102      	bne.n	8015ba2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	61fb      	str	r3, [r7, #28]
 8015ba0:	e004      	b.n	8015bac <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	68ba      	ldr	r2, [r7, #8]
 8015ba6:	fb02 f303 	mul.w	r3, r2, r3
 8015baa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	3348      	adds	r3, #72	; 0x48
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f001 ffcf 	bl	8017b54 <pvPortMalloc>
 8015bb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015bb8:	69bb      	ldr	r3, [r7, #24]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d011      	beq.n	8015be2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015bbe:	69bb      	ldr	r3, [r7, #24]
 8015bc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	3348      	adds	r3, #72	; 0x48
 8015bc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015bc8:	69bb      	ldr	r3, [r7, #24]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015bd0:	79fa      	ldrb	r2, [r7, #7]
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	9300      	str	r3, [sp, #0]
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	697a      	ldr	r2, [r7, #20]
 8015bda:	68b9      	ldr	r1, [r7, #8]
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f000 f805 	bl	8015bec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015be2:	69bb      	ldr	r3, [r7, #24]
	}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3720      	adds	r7, #32
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}

08015bec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	607a      	str	r2, [r7, #4]
 8015bf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d103      	bne.n	8015c08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015c00:	69bb      	ldr	r3, [r7, #24]
 8015c02:	69ba      	ldr	r2, [r7, #24]
 8015c04:	601a      	str	r2, [r3, #0]
 8015c06:	e002      	b.n	8015c0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	687a      	ldr	r2, [r7, #4]
 8015c0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	68fa      	ldr	r2, [r7, #12]
 8015c12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015c14:	69bb      	ldr	r3, [r7, #24]
 8015c16:	68ba      	ldr	r2, [r7, #8]
 8015c18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015c1a:	2101      	movs	r1, #1
 8015c1c:	69b8      	ldr	r0, [r7, #24]
 8015c1e:	f7ff feb7 	bl	8015990 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015c22:	bf00      	nop
 8015c24:	3710      	adds	r7, #16
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}
	...

08015c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b08e      	sub	sp, #56	; 0x38
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	60f8      	str	r0, [r7, #12]
 8015c34:	60b9      	str	r1, [r7, #8]
 8015c36:	607a      	str	r2, [r7, #4]
 8015c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d10c      	bne.n	8015c62 <xQueueGenericSend+0x36>
	__asm volatile
 8015c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c4c:	b672      	cpsid	i
 8015c4e:	f383 8811 	msr	BASEPRI, r3
 8015c52:	f3bf 8f6f 	isb	sy
 8015c56:	f3bf 8f4f 	dsb	sy
 8015c5a:	b662      	cpsie	i
 8015c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015c5e:	bf00      	nop
 8015c60:	e7fe      	b.n	8015c60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d103      	bne.n	8015c70 <xQueueGenericSend+0x44>
 8015c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d101      	bne.n	8015c74 <xQueueGenericSend+0x48>
 8015c70:	2301      	movs	r3, #1
 8015c72:	e000      	b.n	8015c76 <xQueueGenericSend+0x4a>
 8015c74:	2300      	movs	r3, #0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d10c      	bne.n	8015c94 <xQueueGenericSend+0x68>
	__asm volatile
 8015c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c7e:	b672      	cpsid	i
 8015c80:	f383 8811 	msr	BASEPRI, r3
 8015c84:	f3bf 8f6f 	isb	sy
 8015c88:	f3bf 8f4f 	dsb	sy
 8015c8c:	b662      	cpsie	i
 8015c8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015c90:	bf00      	nop
 8015c92:	e7fe      	b.n	8015c92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	2b02      	cmp	r3, #2
 8015c98:	d103      	bne.n	8015ca2 <xQueueGenericSend+0x76>
 8015c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c9e:	2b01      	cmp	r3, #1
 8015ca0:	d101      	bne.n	8015ca6 <xQueueGenericSend+0x7a>
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	e000      	b.n	8015ca8 <xQueueGenericSend+0x7c>
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d10c      	bne.n	8015cc6 <xQueueGenericSend+0x9a>
	__asm volatile
 8015cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb0:	b672      	cpsid	i
 8015cb2:	f383 8811 	msr	BASEPRI, r3
 8015cb6:	f3bf 8f6f 	isb	sy
 8015cba:	f3bf 8f4f 	dsb	sy
 8015cbe:	b662      	cpsie	i
 8015cc0:	623b      	str	r3, [r7, #32]
}
 8015cc2:	bf00      	nop
 8015cc4:	e7fe      	b.n	8015cc4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015cc6:	f001 fa09 	bl	80170dc <xTaskGetSchedulerState>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d102      	bne.n	8015cd6 <xQueueGenericSend+0xaa>
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d101      	bne.n	8015cda <xQueueGenericSend+0xae>
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	e000      	b.n	8015cdc <xQueueGenericSend+0xb0>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d10c      	bne.n	8015cfa <xQueueGenericSend+0xce>
	__asm volatile
 8015ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce4:	b672      	cpsid	i
 8015ce6:	f383 8811 	msr	BASEPRI, r3
 8015cea:	f3bf 8f6f 	isb	sy
 8015cee:	f3bf 8f4f 	dsb	sy
 8015cf2:	b662      	cpsie	i
 8015cf4:	61fb      	str	r3, [r7, #28]
}
 8015cf6:	bf00      	nop
 8015cf8:	e7fe      	b.n	8015cf8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015cfa:	f001 fdff 	bl	80178fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d302      	bcc.n	8015d10 <xQueueGenericSend+0xe4>
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	2b02      	cmp	r3, #2
 8015d0e:	d129      	bne.n	8015d64 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d10:	683a      	ldr	r2, [r7, #0]
 8015d12:	68b9      	ldr	r1, [r7, #8]
 8015d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d16:	f000 fa9b 	bl	8016250 <prvCopyDataToQueue>
 8015d1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d010      	beq.n	8015d46 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d26:	3324      	adds	r3, #36	; 0x24
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f001 f811 	bl	8016d50 <xTaskRemoveFromEventList>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d013      	beq.n	8015d5c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015d34:	4b3f      	ldr	r3, [pc, #252]	; (8015e34 <xQueueGenericSend+0x208>)
 8015d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d3a:	601a      	str	r2, [r3, #0]
 8015d3c:	f3bf 8f4f 	dsb	sy
 8015d40:	f3bf 8f6f 	isb	sy
 8015d44:	e00a      	b.n	8015d5c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d007      	beq.n	8015d5c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015d4c:	4b39      	ldr	r3, [pc, #228]	; (8015e34 <xQueueGenericSend+0x208>)
 8015d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d52:	601a      	str	r2, [r3, #0]
 8015d54:	f3bf 8f4f 	dsb	sy
 8015d58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015d5c:	f001 fe02 	bl	8017964 <vPortExitCritical>
				return pdPASS;
 8015d60:	2301      	movs	r3, #1
 8015d62:	e063      	b.n	8015e2c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d103      	bne.n	8015d72 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015d6a:	f001 fdfb 	bl	8017964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	e05c      	b.n	8015e2c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d106      	bne.n	8015d86 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015d78:	f107 0314 	add.w	r3, r7, #20
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f001 f84b 	bl	8016e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d82:	2301      	movs	r3, #1
 8015d84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015d86:	f001 fded 	bl	8017964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015d8a:	f000 fdb1 	bl	80168f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015d8e:	f001 fdb5 	bl	80178fc <vPortEnterCritical>
 8015d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d98:	b25b      	sxtb	r3, r3
 8015d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d9e:	d103      	bne.n	8015da8 <xQueueGenericSend+0x17c>
 8015da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da2:	2200      	movs	r2, #0
 8015da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015dae:	b25b      	sxtb	r3, r3
 8015db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015db4:	d103      	bne.n	8015dbe <xQueueGenericSend+0x192>
 8015db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db8:	2200      	movs	r2, #0
 8015dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015dbe:	f001 fdd1 	bl	8017964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015dc2:	1d3a      	adds	r2, r7, #4
 8015dc4:	f107 0314 	add.w	r3, r7, #20
 8015dc8:	4611      	mov	r1, r2
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f001 f83a 	bl	8016e44 <xTaskCheckForTimeOut>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d124      	bne.n	8015e20 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dd8:	f000 fb32 	bl	8016440 <prvIsQueueFull>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d018      	beq.n	8015e14 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de4:	3310      	adds	r3, #16
 8015de6:	687a      	ldr	r2, [r7, #4]
 8015de8:	4611      	mov	r1, r2
 8015dea:	4618      	mov	r0, r3
 8015dec:	f000 ff8a 	bl	8016d04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015df2:	f000 fabd 	bl	8016370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015df6:	f000 fd89 	bl	801690c <xTaskResumeAll>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	f47f af7c 	bne.w	8015cfa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8015e02:	4b0c      	ldr	r3, [pc, #48]	; (8015e34 <xQueueGenericSend+0x208>)
 8015e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e08:	601a      	str	r2, [r3, #0]
 8015e0a:	f3bf 8f4f 	dsb	sy
 8015e0e:	f3bf 8f6f 	isb	sy
 8015e12:	e772      	b.n	8015cfa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e16:	f000 faab 	bl	8016370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e1a:	f000 fd77 	bl	801690c <xTaskResumeAll>
 8015e1e:	e76c      	b.n	8015cfa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e22:	f000 faa5 	bl	8016370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e26:	f000 fd71 	bl	801690c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015e2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3738      	adds	r7, #56	; 0x38
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	e000ed04 	.word	0xe000ed04

08015e38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b08e      	sub	sp, #56	; 0x38
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	60f8      	str	r0, [r7, #12]
 8015e40:	60b9      	str	r1, [r7, #8]
 8015e42:	607a      	str	r2, [r7, #4]
 8015e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d10c      	bne.n	8015e6a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8015e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e54:	b672      	cpsid	i
 8015e56:	f383 8811 	msr	BASEPRI, r3
 8015e5a:	f3bf 8f6f 	isb	sy
 8015e5e:	f3bf 8f4f 	dsb	sy
 8015e62:	b662      	cpsie	i
 8015e64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e66:	bf00      	nop
 8015e68:	e7fe      	b.n	8015e68 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d103      	bne.n	8015e78 <xQueueGenericSendFromISR+0x40>
 8015e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d101      	bne.n	8015e7c <xQueueGenericSendFromISR+0x44>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e000      	b.n	8015e7e <xQueueGenericSendFromISR+0x46>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d10c      	bne.n	8015e9c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8015e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e86:	b672      	cpsid	i
 8015e88:	f383 8811 	msr	BASEPRI, r3
 8015e8c:	f3bf 8f6f 	isb	sy
 8015e90:	f3bf 8f4f 	dsb	sy
 8015e94:	b662      	cpsie	i
 8015e96:	623b      	str	r3, [r7, #32]
}
 8015e98:	bf00      	nop
 8015e9a:	e7fe      	b.n	8015e9a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	2b02      	cmp	r3, #2
 8015ea0:	d103      	bne.n	8015eaa <xQueueGenericSendFromISR+0x72>
 8015ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ea6:	2b01      	cmp	r3, #1
 8015ea8:	d101      	bne.n	8015eae <xQueueGenericSendFromISR+0x76>
 8015eaa:	2301      	movs	r3, #1
 8015eac:	e000      	b.n	8015eb0 <xQueueGenericSendFromISR+0x78>
 8015eae:	2300      	movs	r3, #0
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d10c      	bne.n	8015ece <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8015eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb8:	b672      	cpsid	i
 8015eba:	f383 8811 	msr	BASEPRI, r3
 8015ebe:	f3bf 8f6f 	isb	sy
 8015ec2:	f3bf 8f4f 	dsb	sy
 8015ec6:	b662      	cpsie	i
 8015ec8:	61fb      	str	r3, [r7, #28]
}
 8015eca:	bf00      	nop
 8015ecc:	e7fe      	b.n	8015ecc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ece:	f001 fdfd 	bl	8017acc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8015ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eda:	b672      	cpsid	i
 8015edc:	f383 8811 	msr	BASEPRI, r3
 8015ee0:	f3bf 8f6f 	isb	sy
 8015ee4:	f3bf 8f4f 	dsb	sy
 8015ee8:	b662      	cpsie	i
 8015eea:	61ba      	str	r2, [r7, #24]
 8015eec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015eee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d302      	bcc.n	8015f04 <xQueueGenericSendFromISR+0xcc>
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	2b02      	cmp	r3, #2
 8015f02:	d12c      	bne.n	8015f5e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015f0e:	683a      	ldr	r2, [r7, #0]
 8015f10:	68b9      	ldr	r1, [r7, #8]
 8015f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f14:	f000 f99c 	bl	8016250 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015f18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f20:	d112      	bne.n	8015f48 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d016      	beq.n	8015f58 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f2c:	3324      	adds	r3, #36	; 0x24
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f000 ff0e 	bl	8016d50 <xTaskRemoveFromEventList>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d00e      	beq.n	8015f58 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d00b      	beq.n	8015f58 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2201      	movs	r2, #1
 8015f44:	601a      	str	r2, [r3, #0]
 8015f46:	e007      	b.n	8015f58 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015f4c:	3301      	adds	r3, #1
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	b25a      	sxtb	r2, r3
 8015f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015f5c:	e001      	b.n	8015f62 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	637b      	str	r3, [r7, #52]	; 0x34
 8015f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f64:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015f6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3738      	adds	r7, #56	; 0x38
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}

08015f78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b08c      	sub	sp, #48	; 0x30
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015f84:	2300      	movs	r3, #0
 8015f86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d10c      	bne.n	8015fac <xQueueReceive+0x34>
	__asm volatile
 8015f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f96:	b672      	cpsid	i
 8015f98:	f383 8811 	msr	BASEPRI, r3
 8015f9c:	f3bf 8f6f 	isb	sy
 8015fa0:	f3bf 8f4f 	dsb	sy
 8015fa4:	b662      	cpsie	i
 8015fa6:	623b      	str	r3, [r7, #32]
}
 8015fa8:	bf00      	nop
 8015faa:	e7fe      	b.n	8015faa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d103      	bne.n	8015fba <xQueueReceive+0x42>
 8015fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d101      	bne.n	8015fbe <xQueueReceive+0x46>
 8015fba:	2301      	movs	r3, #1
 8015fbc:	e000      	b.n	8015fc0 <xQueueReceive+0x48>
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d10c      	bne.n	8015fde <xQueueReceive+0x66>
	__asm volatile
 8015fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc8:	b672      	cpsid	i
 8015fca:	f383 8811 	msr	BASEPRI, r3
 8015fce:	f3bf 8f6f 	isb	sy
 8015fd2:	f3bf 8f4f 	dsb	sy
 8015fd6:	b662      	cpsie	i
 8015fd8:	61fb      	str	r3, [r7, #28]
}
 8015fda:	bf00      	nop
 8015fdc:	e7fe      	b.n	8015fdc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015fde:	f001 f87d 	bl	80170dc <xTaskGetSchedulerState>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d102      	bne.n	8015fee <xQueueReceive+0x76>
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d101      	bne.n	8015ff2 <xQueueReceive+0x7a>
 8015fee:	2301      	movs	r3, #1
 8015ff0:	e000      	b.n	8015ff4 <xQueueReceive+0x7c>
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d10c      	bne.n	8016012 <xQueueReceive+0x9a>
	__asm volatile
 8015ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ffc:	b672      	cpsid	i
 8015ffe:	f383 8811 	msr	BASEPRI, r3
 8016002:	f3bf 8f6f 	isb	sy
 8016006:	f3bf 8f4f 	dsb	sy
 801600a:	b662      	cpsie	i
 801600c:	61bb      	str	r3, [r7, #24]
}
 801600e:	bf00      	nop
 8016010:	e7fe      	b.n	8016010 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016012:	f001 fc73 	bl	80178fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801601a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601e:	2b00      	cmp	r3, #0
 8016020:	d01f      	beq.n	8016062 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016022:	68b9      	ldr	r1, [r7, #8]
 8016024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016026:	f000 f97d 	bl	8016324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801602c:	1e5a      	subs	r2, r3, #1
 801602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016030:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016034:	691b      	ldr	r3, [r3, #16]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d00f      	beq.n	801605a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603c:	3310      	adds	r3, #16
 801603e:	4618      	mov	r0, r3
 8016040:	f000 fe86 	bl	8016d50 <xTaskRemoveFromEventList>
 8016044:	4603      	mov	r3, r0
 8016046:	2b00      	cmp	r3, #0
 8016048:	d007      	beq.n	801605a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801604a:	4b3d      	ldr	r3, [pc, #244]	; (8016140 <xQueueReceive+0x1c8>)
 801604c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016050:	601a      	str	r2, [r3, #0]
 8016052:	f3bf 8f4f 	dsb	sy
 8016056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801605a:	f001 fc83 	bl	8017964 <vPortExitCritical>
				return pdPASS;
 801605e:	2301      	movs	r3, #1
 8016060:	e069      	b.n	8016136 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d103      	bne.n	8016070 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016068:	f001 fc7c 	bl	8017964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801606c:	2300      	movs	r3, #0
 801606e:	e062      	b.n	8016136 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	2b00      	cmp	r3, #0
 8016074:	d106      	bne.n	8016084 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016076:	f107 0310 	add.w	r3, r7, #16
 801607a:	4618      	mov	r0, r3
 801607c:	f000 fecc 	bl	8016e18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016080:	2301      	movs	r3, #1
 8016082:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016084:	f001 fc6e 	bl	8017964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016088:	f000 fc32 	bl	80168f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801608c:	f001 fc36 	bl	80178fc <vPortEnterCritical>
 8016090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016096:	b25b      	sxtb	r3, r3
 8016098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801609c:	d103      	bne.n	80160a6 <xQueueReceive+0x12e>
 801609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a0:	2200      	movs	r2, #0
 80160a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80160a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80160ac:	b25b      	sxtb	r3, r3
 80160ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160b2:	d103      	bne.n	80160bc <xQueueReceive+0x144>
 80160b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b6:	2200      	movs	r2, #0
 80160b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80160bc:	f001 fc52 	bl	8017964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80160c0:	1d3a      	adds	r2, r7, #4
 80160c2:	f107 0310 	add.w	r3, r7, #16
 80160c6:	4611      	mov	r1, r2
 80160c8:	4618      	mov	r0, r3
 80160ca:	f000 febb 	bl	8016e44 <xTaskCheckForTimeOut>
 80160ce:	4603      	mov	r3, r0
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d123      	bne.n	801611c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160d6:	f000 f99d 	bl	8016414 <prvIsQueueEmpty>
 80160da:	4603      	mov	r3, r0
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d017      	beq.n	8016110 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80160e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e2:	3324      	adds	r3, #36	; 0x24
 80160e4:	687a      	ldr	r2, [r7, #4]
 80160e6:	4611      	mov	r1, r2
 80160e8:	4618      	mov	r0, r3
 80160ea:	f000 fe0b 	bl	8016d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80160ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160f0:	f000 f93e 	bl	8016370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80160f4:	f000 fc0a 	bl	801690c <xTaskResumeAll>
 80160f8:	4603      	mov	r3, r0
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d189      	bne.n	8016012 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80160fe:	4b10      	ldr	r3, [pc, #64]	; (8016140 <xQueueReceive+0x1c8>)
 8016100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016104:	601a      	str	r2, [r3, #0]
 8016106:	f3bf 8f4f 	dsb	sy
 801610a:	f3bf 8f6f 	isb	sy
 801610e:	e780      	b.n	8016012 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016112:	f000 f92d 	bl	8016370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016116:	f000 fbf9 	bl	801690c <xTaskResumeAll>
 801611a:	e77a      	b.n	8016012 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801611c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801611e:	f000 f927 	bl	8016370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016122:	f000 fbf3 	bl	801690c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016128:	f000 f974 	bl	8016414 <prvIsQueueEmpty>
 801612c:	4603      	mov	r3, r0
 801612e:	2b00      	cmp	r3, #0
 8016130:	f43f af6f 	beq.w	8016012 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016134:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016136:	4618      	mov	r0, r3
 8016138:	3730      	adds	r7, #48	; 0x30
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}
 801613e:	bf00      	nop
 8016140:	e000ed04 	.word	0xe000ed04

08016144 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b08e      	sub	sp, #56	; 0x38
 8016148:	af00      	add	r7, sp, #0
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	60b9      	str	r1, [r7, #8]
 801614e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016156:	2b00      	cmp	r3, #0
 8016158:	d10c      	bne.n	8016174 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801615e:	b672      	cpsid	i
 8016160:	f383 8811 	msr	BASEPRI, r3
 8016164:	f3bf 8f6f 	isb	sy
 8016168:	f3bf 8f4f 	dsb	sy
 801616c:	b662      	cpsie	i
 801616e:	623b      	str	r3, [r7, #32]
}
 8016170:	bf00      	nop
 8016172:	e7fe      	b.n	8016172 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d103      	bne.n	8016182 <xQueueReceiveFromISR+0x3e>
 801617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617e:	2b00      	cmp	r3, #0
 8016180:	d101      	bne.n	8016186 <xQueueReceiveFromISR+0x42>
 8016182:	2301      	movs	r3, #1
 8016184:	e000      	b.n	8016188 <xQueueReceiveFromISR+0x44>
 8016186:	2300      	movs	r3, #0
 8016188:	2b00      	cmp	r3, #0
 801618a:	d10c      	bne.n	80161a6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 801618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016190:	b672      	cpsid	i
 8016192:	f383 8811 	msr	BASEPRI, r3
 8016196:	f3bf 8f6f 	isb	sy
 801619a:	f3bf 8f4f 	dsb	sy
 801619e:	b662      	cpsie	i
 80161a0:	61fb      	str	r3, [r7, #28]
}
 80161a2:	bf00      	nop
 80161a4:	e7fe      	b.n	80161a4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80161a6:	f001 fc91 	bl	8017acc <vPortValidateInterruptPriority>
	__asm volatile
 80161aa:	f3ef 8211 	mrs	r2, BASEPRI
 80161ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b2:	b672      	cpsid	i
 80161b4:	f383 8811 	msr	BASEPRI, r3
 80161b8:	f3bf 8f6f 	isb	sy
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	b662      	cpsie	i
 80161c2:	61ba      	str	r2, [r7, #24]
 80161c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80161c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80161c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80161ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d02f      	beq.n	8016236 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80161d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80161e0:	68b9      	ldr	r1, [r7, #8]
 80161e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161e4:	f000 f89e 	bl	8016324 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80161e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ea:	1e5a      	subs	r2, r3, #1
 80161ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80161f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80161f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161f8:	d112      	bne.n	8016220 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fc:	691b      	ldr	r3, [r3, #16]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d016      	beq.n	8016230 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016204:	3310      	adds	r3, #16
 8016206:	4618      	mov	r0, r3
 8016208:	f000 fda2 	bl	8016d50 <xTaskRemoveFromEventList>
 801620c:	4603      	mov	r3, r0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d00e      	beq.n	8016230 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00b      	beq.n	8016230 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2201      	movs	r2, #1
 801621c:	601a      	str	r2, [r3, #0]
 801621e:	e007      	b.n	8016230 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016224:	3301      	adds	r3, #1
 8016226:	b2db      	uxtb	r3, r3
 8016228:	b25a      	sxtb	r2, r3
 801622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016230:	2301      	movs	r3, #1
 8016232:	637b      	str	r3, [r7, #52]	; 0x34
 8016234:	e001      	b.n	801623a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8016236:	2300      	movs	r3, #0
 8016238:	637b      	str	r3, [r7, #52]	; 0x34
 801623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801623c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	f383 8811 	msr	BASEPRI, r3
}
 8016244:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016248:	4618      	mov	r0, r3
 801624a:	3738      	adds	r7, #56	; 0x38
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}

08016250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b086      	sub	sp, #24
 8016254:	af00      	add	r7, sp, #0
 8016256:	60f8      	str	r0, [r7, #12]
 8016258:	60b9      	str	r1, [r7, #8]
 801625a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801625c:	2300      	movs	r3, #0
 801625e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801626a:	2b00      	cmp	r3, #0
 801626c:	d10d      	bne.n	801628a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d14d      	bne.n	8016312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	689b      	ldr	r3, [r3, #8]
 801627a:	4618      	mov	r0, r3
 801627c:	f000 ff4c 	bl	8017118 <xTaskPriorityDisinherit>
 8016280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	2200      	movs	r2, #0
 8016286:	609a      	str	r2, [r3, #8]
 8016288:	e043      	b.n	8016312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d119      	bne.n	80162c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	6858      	ldr	r0, [r3, #4]
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016298:	461a      	mov	r2, r3
 801629a:	68b9      	ldr	r1, [r7, #8]
 801629c:	f003 fa66 	bl	801976c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	685a      	ldr	r2, [r3, #4]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162a8:	441a      	add	r2, r3
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	685a      	ldr	r2, [r3, #4]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	689b      	ldr	r3, [r3, #8]
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d32b      	bcc.n	8016312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	605a      	str	r2, [r3, #4]
 80162c2:	e026      	b.n	8016312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	68d8      	ldr	r0, [r3, #12]
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162cc:	461a      	mov	r2, r3
 80162ce:	68b9      	ldr	r1, [r7, #8]
 80162d0:	f003 fa4c 	bl	801976c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	68da      	ldr	r2, [r3, #12]
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162dc:	425b      	negs	r3, r3
 80162de:	441a      	add	r2, r3
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	68da      	ldr	r2, [r3, #12]
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d207      	bcs.n	8016300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	689a      	ldr	r2, [r3, #8]
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162f8:	425b      	negs	r3, r3
 80162fa:	441a      	add	r2, r3
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2b02      	cmp	r3, #2
 8016304:	d105      	bne.n	8016312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d002      	beq.n	8016312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	3b01      	subs	r3, #1
 8016310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	1c5a      	adds	r2, r3, #1
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801631a:	697b      	ldr	r3, [r7, #20]
}
 801631c:	4618      	mov	r0, r3
 801631e:	3718      	adds	r7, #24
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
 801632c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016332:	2b00      	cmp	r3, #0
 8016334:	d018      	beq.n	8016368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	68da      	ldr	r2, [r3, #12]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633e:	441a      	add	r2, r3
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	68da      	ldr	r2, [r3, #12]
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	689b      	ldr	r3, [r3, #8]
 801634c:	429a      	cmp	r2, r3
 801634e:	d303      	bcc.n	8016358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681a      	ldr	r2, [r3, #0]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	68d9      	ldr	r1, [r3, #12]
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016360:	461a      	mov	r2, r3
 8016362:	6838      	ldr	r0, [r7, #0]
 8016364:	f003 fa02 	bl	801976c <memcpy>
	}
}
 8016368:	bf00      	nop
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016378:	f001 fac0 	bl	80178fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016384:	e011      	b.n	80163aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801638a:	2b00      	cmp	r3, #0
 801638c:	d012      	beq.n	80163b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	3324      	adds	r3, #36	; 0x24
 8016392:	4618      	mov	r0, r3
 8016394:	f000 fcdc 	bl	8016d50 <xTaskRemoveFromEventList>
 8016398:	4603      	mov	r3, r0
 801639a:	2b00      	cmp	r3, #0
 801639c:	d001      	beq.n	80163a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801639e:	f000 fdb7 	bl	8016f10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80163a2:	7bfb      	ldrb	r3, [r7, #15]
 80163a4:	3b01      	subs	r3, #1
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80163aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	dce9      	bgt.n	8016386 <prvUnlockQueue+0x16>
 80163b2:	e000      	b.n	80163b6 <prvUnlockQueue+0x46>
					break;
 80163b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	22ff      	movs	r2, #255	; 0xff
 80163ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80163be:	f001 fad1 	bl	8017964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80163c2:	f001 fa9b 	bl	80178fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163ce:	e011      	b.n	80163f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	691b      	ldr	r3, [r3, #16]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d012      	beq.n	80163fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	3310      	adds	r3, #16
 80163dc:	4618      	mov	r0, r3
 80163de:	f000 fcb7 	bl	8016d50 <xTaskRemoveFromEventList>
 80163e2:	4603      	mov	r3, r0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80163e8:	f000 fd92 	bl	8016f10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80163ec:	7bbb      	ldrb	r3, [r7, #14]
 80163ee:	3b01      	subs	r3, #1
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	dce9      	bgt.n	80163d0 <prvUnlockQueue+0x60>
 80163fc:	e000      	b.n	8016400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80163fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	22ff      	movs	r2, #255	; 0xff
 8016404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016408:	f001 faac 	bl	8017964 <vPortExitCritical>
}
 801640c:	bf00      	nop
 801640e:	3710      	adds	r7, #16
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b084      	sub	sp, #16
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801641c:	f001 fa6e 	bl	80178fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016424:	2b00      	cmp	r3, #0
 8016426:	d102      	bne.n	801642e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016428:	2301      	movs	r3, #1
 801642a:	60fb      	str	r3, [r7, #12]
 801642c:	e001      	b.n	8016432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801642e:	2300      	movs	r3, #0
 8016430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016432:	f001 fa97 	bl	8017964 <vPortExitCritical>

	return xReturn;
 8016436:	68fb      	ldr	r3, [r7, #12]
}
 8016438:	4618      	mov	r0, r3
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b084      	sub	sp, #16
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016448:	f001 fa58 	bl	80178fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016454:	429a      	cmp	r2, r3
 8016456:	d102      	bne.n	801645e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016458:	2301      	movs	r3, #1
 801645a:	60fb      	str	r3, [r7, #12]
 801645c:	e001      	b.n	8016462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801645e:	2300      	movs	r3, #0
 8016460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016462:	f001 fa7f 	bl	8017964 <vPortExitCritical>

	return xReturn;
 8016466:	68fb      	ldr	r3, [r7, #12]
}
 8016468:	4618      	mov	r0, r3
 801646a:	3710      	adds	r7, #16
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}

08016470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016470:	b580      	push	{r7, lr}
 8016472:	b08e      	sub	sp, #56	; 0x38
 8016474:	af04      	add	r7, sp, #16
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
 801647c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016480:	2b00      	cmp	r3, #0
 8016482:	d10c      	bne.n	801649e <xTaskCreateStatic+0x2e>
	__asm volatile
 8016484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016488:	b672      	cpsid	i
 801648a:	f383 8811 	msr	BASEPRI, r3
 801648e:	f3bf 8f6f 	isb	sy
 8016492:	f3bf 8f4f 	dsb	sy
 8016496:	b662      	cpsie	i
 8016498:	623b      	str	r3, [r7, #32]
}
 801649a:	bf00      	nop
 801649c:	e7fe      	b.n	801649c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d10c      	bne.n	80164be <xTaskCreateStatic+0x4e>
	__asm volatile
 80164a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a8:	b672      	cpsid	i
 80164aa:	f383 8811 	msr	BASEPRI, r3
 80164ae:	f3bf 8f6f 	isb	sy
 80164b2:	f3bf 8f4f 	dsb	sy
 80164b6:	b662      	cpsie	i
 80164b8:	61fb      	str	r3, [r7, #28]
}
 80164ba:	bf00      	nop
 80164bc:	e7fe      	b.n	80164bc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80164be:	2358      	movs	r3, #88	; 0x58
 80164c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	2b58      	cmp	r3, #88	; 0x58
 80164c6:	d00c      	beq.n	80164e2 <xTaskCreateStatic+0x72>
	__asm volatile
 80164c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164cc:	b672      	cpsid	i
 80164ce:	f383 8811 	msr	BASEPRI, r3
 80164d2:	f3bf 8f6f 	isb	sy
 80164d6:	f3bf 8f4f 	dsb	sy
 80164da:	b662      	cpsie	i
 80164dc:	61bb      	str	r3, [r7, #24]
}
 80164de:	bf00      	nop
 80164e0:	e7fe      	b.n	80164e0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80164e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80164e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d01e      	beq.n	8016528 <xTaskCreateStatic+0xb8>
 80164ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d01b      	beq.n	8016528 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80164f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80164f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80164f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	2202      	movs	r2, #2
 80164fe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016502:	2300      	movs	r3, #0
 8016504:	9303      	str	r3, [sp, #12]
 8016506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016508:	9302      	str	r3, [sp, #8]
 801650a:	f107 0314 	add.w	r3, r7, #20
 801650e:	9301      	str	r3, [sp, #4]
 8016510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016512:	9300      	str	r3, [sp, #0]
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	68b9      	ldr	r1, [r7, #8]
 801651a:	68f8      	ldr	r0, [r7, #12]
 801651c:	f000 f850 	bl	80165c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016522:	f000 f8e1 	bl	80166e8 <prvAddNewTaskToReadyList>
 8016526:	e001      	b.n	801652c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8016528:	2300      	movs	r3, #0
 801652a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801652c:	697b      	ldr	r3, [r7, #20]
	}
 801652e:	4618      	mov	r0, r3
 8016530:	3728      	adds	r7, #40	; 0x28
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}

08016536 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016536:	b580      	push	{r7, lr}
 8016538:	b08c      	sub	sp, #48	; 0x30
 801653a:	af04      	add	r7, sp, #16
 801653c:	60f8      	str	r0, [r7, #12]
 801653e:	60b9      	str	r1, [r7, #8]
 8016540:	603b      	str	r3, [r7, #0]
 8016542:	4613      	mov	r3, r2
 8016544:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016546:	88fb      	ldrh	r3, [r7, #6]
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	4618      	mov	r0, r3
 801654c:	f001 fb02 	bl	8017b54 <pvPortMalloc>
 8016550:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d00e      	beq.n	8016576 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016558:	2058      	movs	r0, #88	; 0x58
 801655a:	f001 fafb 	bl	8017b54 <pvPortMalloc>
 801655e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d003      	beq.n	801656e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016566:	69fb      	ldr	r3, [r7, #28]
 8016568:	697a      	ldr	r2, [r7, #20]
 801656a:	631a      	str	r2, [r3, #48]	; 0x30
 801656c:	e005      	b.n	801657a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801656e:	6978      	ldr	r0, [r7, #20]
 8016570:	f001 fbc0 	bl	8017cf4 <vPortFree>
 8016574:	e001      	b.n	801657a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016576:	2300      	movs	r3, #0
 8016578:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801657a:	69fb      	ldr	r3, [r7, #28]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d017      	beq.n	80165b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016580:	69fb      	ldr	r3, [r7, #28]
 8016582:	2200      	movs	r2, #0
 8016584:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016588:	88fa      	ldrh	r2, [r7, #6]
 801658a:	2300      	movs	r3, #0
 801658c:	9303      	str	r3, [sp, #12]
 801658e:	69fb      	ldr	r3, [r7, #28]
 8016590:	9302      	str	r3, [sp, #8]
 8016592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016594:	9301      	str	r3, [sp, #4]
 8016596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016598:	9300      	str	r3, [sp, #0]
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	68b9      	ldr	r1, [r7, #8]
 801659e:	68f8      	ldr	r0, [r7, #12]
 80165a0:	f000 f80e 	bl	80165c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80165a4:	69f8      	ldr	r0, [r7, #28]
 80165a6:	f000 f89f 	bl	80166e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80165aa:	2301      	movs	r3, #1
 80165ac:	61bb      	str	r3, [r7, #24]
 80165ae:	e002      	b.n	80165b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80165b0:	f04f 33ff 	mov.w	r3, #4294967295
 80165b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80165b6:	69bb      	ldr	r3, [r7, #24]
	}
 80165b8:	4618      	mov	r0, r3
 80165ba:	3720      	adds	r7, #32
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}

080165c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b088      	sub	sp, #32
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	60f8      	str	r0, [r7, #12]
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	607a      	str	r2, [r7, #4]
 80165cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80165ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	009b      	lsls	r3, r3, #2
 80165d6:	461a      	mov	r2, r3
 80165d8:	21a5      	movs	r1, #165	; 0xa5
 80165da:	f003 f8d5 	bl	8019788 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80165de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80165e2:	6879      	ldr	r1, [r7, #4]
 80165e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80165e8:	440b      	add	r3, r1
 80165ea:	009b      	lsls	r3, r3, #2
 80165ec:	4413      	add	r3, r2
 80165ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80165f0:	69bb      	ldr	r3, [r7, #24]
 80165f2:	f023 0307 	bic.w	r3, r3, #7
 80165f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80165f8:	69bb      	ldr	r3, [r7, #24]
 80165fa:	f003 0307 	and.w	r3, r3, #7
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d00c      	beq.n	801661c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8016602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016606:	b672      	cpsid	i
 8016608:	f383 8811 	msr	BASEPRI, r3
 801660c:	f3bf 8f6f 	isb	sy
 8016610:	f3bf 8f4f 	dsb	sy
 8016614:	b662      	cpsie	i
 8016616:	617b      	str	r3, [r7, #20]
}
 8016618:	bf00      	nop
 801661a:	e7fe      	b.n	801661a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d01f      	beq.n	8016662 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016622:	2300      	movs	r3, #0
 8016624:	61fb      	str	r3, [r7, #28]
 8016626:	e012      	b.n	801664e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016628:	68ba      	ldr	r2, [r7, #8]
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	4413      	add	r3, r2
 801662e:	7819      	ldrb	r1, [r3, #0]
 8016630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016632:	69fb      	ldr	r3, [r7, #28]
 8016634:	4413      	add	r3, r2
 8016636:	3334      	adds	r3, #52	; 0x34
 8016638:	460a      	mov	r2, r1
 801663a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801663c:	68ba      	ldr	r2, [r7, #8]
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	4413      	add	r3, r2
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d006      	beq.n	8016656 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	3301      	adds	r3, #1
 801664c:	61fb      	str	r3, [r7, #28]
 801664e:	69fb      	ldr	r3, [r7, #28]
 8016650:	2b0f      	cmp	r3, #15
 8016652:	d9e9      	bls.n	8016628 <prvInitialiseNewTask+0x68>
 8016654:	e000      	b.n	8016658 <prvInitialiseNewTask+0x98>
			{
				break;
 8016656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665a:	2200      	movs	r2, #0
 801665c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016660:	e003      	b.n	801666a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016664:	2200      	movs	r2, #0
 8016666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666c:	2b06      	cmp	r3, #6
 801666e:	d901      	bls.n	8016674 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016670:	2306      	movs	r3, #6
 8016672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801667e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016682:	2200      	movs	r2, #0
 8016684:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016688:	3304      	adds	r3, #4
 801668a:	4618      	mov	r0, r3
 801668c:	f7ff f8ec 	bl	8015868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016692:	3318      	adds	r3, #24
 8016694:	4618      	mov	r0, r3
 8016696:	f7ff f8e7 	bl	8015868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801669e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a2:	f1c3 0207 	rsb	r2, r3, #7
 80166a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80166aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80166b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b2:	2200      	movs	r2, #0
 80166b4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80166b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b8:	2200      	movs	r2, #0
 80166ba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80166bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166be:	2200      	movs	r2, #0
 80166c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80166c4:	683a      	ldr	r2, [r7, #0]
 80166c6:	68f9      	ldr	r1, [r7, #12]
 80166c8:	69b8      	ldr	r0, [r7, #24]
 80166ca:	f001 f80d 	bl	80176e8 <pxPortInitialiseStack>
 80166ce:	4602      	mov	r2, r0
 80166d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80166d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d002      	beq.n	80166e0 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80166da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80166e0:	bf00      	nop
 80166e2:	3720      	adds	r7, #32
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80166f0:	f001 f904 	bl	80178fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80166f4:	4b2a      	ldr	r3, [pc, #168]	; (80167a0 <prvAddNewTaskToReadyList+0xb8>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	3301      	adds	r3, #1
 80166fa:	4a29      	ldr	r2, [pc, #164]	; (80167a0 <prvAddNewTaskToReadyList+0xb8>)
 80166fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80166fe:	4b29      	ldr	r3, [pc, #164]	; (80167a4 <prvAddNewTaskToReadyList+0xbc>)
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d109      	bne.n	801671a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016706:	4a27      	ldr	r2, [pc, #156]	; (80167a4 <prvAddNewTaskToReadyList+0xbc>)
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801670c:	4b24      	ldr	r3, [pc, #144]	; (80167a0 <prvAddNewTaskToReadyList+0xb8>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	2b01      	cmp	r3, #1
 8016712:	d110      	bne.n	8016736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016714:	f000 fc22 	bl	8016f5c <prvInitialiseTaskLists>
 8016718:	e00d      	b.n	8016736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801671a:	4b23      	ldr	r3, [pc, #140]	; (80167a8 <prvAddNewTaskToReadyList+0xc0>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d109      	bne.n	8016736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016722:	4b20      	ldr	r3, [pc, #128]	; (80167a4 <prvAddNewTaskToReadyList+0xbc>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801672c:	429a      	cmp	r2, r3
 801672e:	d802      	bhi.n	8016736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016730:	4a1c      	ldr	r2, [pc, #112]	; (80167a4 <prvAddNewTaskToReadyList+0xbc>)
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016736:	4b1d      	ldr	r3, [pc, #116]	; (80167ac <prvAddNewTaskToReadyList+0xc4>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	3301      	adds	r3, #1
 801673c:	4a1b      	ldr	r2, [pc, #108]	; (80167ac <prvAddNewTaskToReadyList+0xc4>)
 801673e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016744:	2201      	movs	r2, #1
 8016746:	409a      	lsls	r2, r3
 8016748:	4b19      	ldr	r3, [pc, #100]	; (80167b0 <prvAddNewTaskToReadyList+0xc8>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	4313      	orrs	r3, r2
 801674e:	4a18      	ldr	r2, [pc, #96]	; (80167b0 <prvAddNewTaskToReadyList+0xc8>)
 8016750:	6013      	str	r3, [r2, #0]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016756:	4613      	mov	r3, r2
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	4413      	add	r3, r2
 801675c:	009b      	lsls	r3, r3, #2
 801675e:	4a15      	ldr	r2, [pc, #84]	; (80167b4 <prvAddNewTaskToReadyList+0xcc>)
 8016760:	441a      	add	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	3304      	adds	r3, #4
 8016766:	4619      	mov	r1, r3
 8016768:	4610      	mov	r0, r2
 801676a:	f7ff f88a 	bl	8015882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801676e:	f001 f8f9 	bl	8017964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016772:	4b0d      	ldr	r3, [pc, #52]	; (80167a8 <prvAddNewTaskToReadyList+0xc0>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d00e      	beq.n	8016798 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801677a:	4b0a      	ldr	r3, [pc, #40]	; (80167a4 <prvAddNewTaskToReadyList+0xbc>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016784:	429a      	cmp	r2, r3
 8016786:	d207      	bcs.n	8016798 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016788:	4b0b      	ldr	r3, [pc, #44]	; (80167b8 <prvAddNewTaskToReadyList+0xd0>)
 801678a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801678e:	601a      	str	r2, [r3, #0]
 8016790:	f3bf 8f4f 	dsb	sy
 8016794:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016798:	bf00      	nop
 801679a:	3708      	adds	r7, #8
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}
 80167a0:	20000494 	.word	0x20000494
 80167a4:	20000394 	.word	0x20000394
 80167a8:	200004a0 	.word	0x200004a0
 80167ac:	200004b0 	.word	0x200004b0
 80167b0:	2000049c 	.word	0x2000049c
 80167b4:	20000398 	.word	0x20000398
 80167b8:	e000ed04 	.word	0xe000ed04

080167bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b084      	sub	sp, #16
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80167c4:	2300      	movs	r3, #0
 80167c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d019      	beq.n	8016802 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80167ce:	4b14      	ldr	r3, [pc, #80]	; (8016820 <vTaskDelay+0x64>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d00c      	beq.n	80167f0 <vTaskDelay+0x34>
	__asm volatile
 80167d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167da:	b672      	cpsid	i
 80167dc:	f383 8811 	msr	BASEPRI, r3
 80167e0:	f3bf 8f6f 	isb	sy
 80167e4:	f3bf 8f4f 	dsb	sy
 80167e8:	b662      	cpsie	i
 80167ea:	60bb      	str	r3, [r7, #8]
}
 80167ec:	bf00      	nop
 80167ee:	e7fe      	b.n	80167ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 80167f0:	f000 f87e 	bl	80168f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80167f4:	2100      	movs	r1, #0
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f000 ff10 	bl	801761c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80167fc:	f000 f886 	bl	801690c <xTaskResumeAll>
 8016800:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d107      	bne.n	8016818 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8016808:	4b06      	ldr	r3, [pc, #24]	; (8016824 <vTaskDelay+0x68>)
 801680a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801680e:	601a      	str	r2, [r3, #0]
 8016810:	f3bf 8f4f 	dsb	sy
 8016814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016818:	bf00      	nop
 801681a:	3710      	adds	r7, #16
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}
 8016820:	200004bc 	.word	0x200004bc
 8016824:	e000ed04 	.word	0xe000ed04

08016828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b08a      	sub	sp, #40	; 0x28
 801682c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801682e:	2300      	movs	r3, #0
 8016830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016832:	2300      	movs	r3, #0
 8016834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016836:	463a      	mov	r2, r7
 8016838:	1d39      	adds	r1, r7, #4
 801683a:	f107 0308 	add.w	r3, r7, #8
 801683e:	4618      	mov	r0, r3
 8016840:	f7ea fda0 	bl	8001384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016844:	6839      	ldr	r1, [r7, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	68ba      	ldr	r2, [r7, #8]
 801684a:	9202      	str	r2, [sp, #8]
 801684c:	9301      	str	r3, [sp, #4]
 801684e:	2300      	movs	r3, #0
 8016850:	9300      	str	r3, [sp, #0]
 8016852:	2300      	movs	r3, #0
 8016854:	460a      	mov	r2, r1
 8016856:	4920      	ldr	r1, [pc, #128]	; (80168d8 <vTaskStartScheduler+0xb0>)
 8016858:	4820      	ldr	r0, [pc, #128]	; (80168dc <vTaskStartScheduler+0xb4>)
 801685a:	f7ff fe09 	bl	8016470 <xTaskCreateStatic>
 801685e:	4603      	mov	r3, r0
 8016860:	4a1f      	ldr	r2, [pc, #124]	; (80168e0 <vTaskStartScheduler+0xb8>)
 8016862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016864:	4b1e      	ldr	r3, [pc, #120]	; (80168e0 <vTaskStartScheduler+0xb8>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d002      	beq.n	8016872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801686c:	2301      	movs	r3, #1
 801686e:	617b      	str	r3, [r7, #20]
 8016870:	e001      	b.n	8016876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016872:	2300      	movs	r3, #0
 8016874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	2b01      	cmp	r3, #1
 801687a:	d118      	bne.n	80168ae <vTaskStartScheduler+0x86>
	__asm volatile
 801687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016880:	b672      	cpsid	i
 8016882:	f383 8811 	msr	BASEPRI, r3
 8016886:	f3bf 8f6f 	isb	sy
 801688a:	f3bf 8f4f 	dsb	sy
 801688e:	b662      	cpsie	i
 8016890:	613b      	str	r3, [r7, #16]
}
 8016892:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016894:	4b13      	ldr	r3, [pc, #76]	; (80168e4 <vTaskStartScheduler+0xbc>)
 8016896:	f04f 32ff 	mov.w	r2, #4294967295
 801689a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801689c:	4b12      	ldr	r3, [pc, #72]	; (80168e8 <vTaskStartScheduler+0xc0>)
 801689e:	2201      	movs	r2, #1
 80168a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80168a2:	4b12      	ldr	r3, [pc, #72]	; (80168ec <vTaskStartScheduler+0xc4>)
 80168a4:	2200      	movs	r2, #0
 80168a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80168a8:	f000 ffaa 	bl	8017800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80168ac:	e010      	b.n	80168d0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80168ae:	697b      	ldr	r3, [r7, #20]
 80168b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168b4:	d10c      	bne.n	80168d0 <vTaskStartScheduler+0xa8>
	__asm volatile
 80168b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ba:	b672      	cpsid	i
 80168bc:	f383 8811 	msr	BASEPRI, r3
 80168c0:	f3bf 8f6f 	isb	sy
 80168c4:	f3bf 8f4f 	dsb	sy
 80168c8:	b662      	cpsie	i
 80168ca:	60fb      	str	r3, [r7, #12]
}
 80168cc:	bf00      	nop
 80168ce:	e7fe      	b.n	80168ce <vTaskStartScheduler+0xa6>
}
 80168d0:	bf00      	nop
 80168d2:	3718      	adds	r7, #24
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}
 80168d8:	0801af2c 	.word	0x0801af2c
 80168dc:	08016f29 	.word	0x08016f29
 80168e0:	200004b8 	.word	0x200004b8
 80168e4:	200004b4 	.word	0x200004b4
 80168e8:	200004a0 	.word	0x200004a0
 80168ec:	20000498 	.word	0x20000498

080168f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80168f0:	b480      	push	{r7}
 80168f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80168f4:	4b04      	ldr	r3, [pc, #16]	; (8016908 <vTaskSuspendAll+0x18>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	3301      	adds	r3, #1
 80168fa:	4a03      	ldr	r2, [pc, #12]	; (8016908 <vTaskSuspendAll+0x18>)
 80168fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80168fe:	bf00      	nop
 8016900:	46bd      	mov	sp, r7
 8016902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016906:	4770      	bx	lr
 8016908:	200004bc 	.word	0x200004bc

0801690c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016912:	2300      	movs	r3, #0
 8016914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016916:	2300      	movs	r3, #0
 8016918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801691a:	4b42      	ldr	r3, [pc, #264]	; (8016a24 <xTaskResumeAll+0x118>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d10c      	bne.n	801693c <xTaskResumeAll+0x30>
	__asm volatile
 8016922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016926:	b672      	cpsid	i
 8016928:	f383 8811 	msr	BASEPRI, r3
 801692c:	f3bf 8f6f 	isb	sy
 8016930:	f3bf 8f4f 	dsb	sy
 8016934:	b662      	cpsie	i
 8016936:	603b      	str	r3, [r7, #0]
}
 8016938:	bf00      	nop
 801693a:	e7fe      	b.n	801693a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801693c:	f000 ffde 	bl	80178fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016940:	4b38      	ldr	r3, [pc, #224]	; (8016a24 <xTaskResumeAll+0x118>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	3b01      	subs	r3, #1
 8016946:	4a37      	ldr	r2, [pc, #220]	; (8016a24 <xTaskResumeAll+0x118>)
 8016948:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801694a:	4b36      	ldr	r3, [pc, #216]	; (8016a24 <xTaskResumeAll+0x118>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d161      	bne.n	8016a16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016952:	4b35      	ldr	r3, [pc, #212]	; (8016a28 <xTaskResumeAll+0x11c>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d05d      	beq.n	8016a16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801695a:	e02e      	b.n	80169ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801695c:	4b33      	ldr	r3, [pc, #204]	; (8016a2c <xTaskResumeAll+0x120>)
 801695e:	68db      	ldr	r3, [r3, #12]
 8016960:	68db      	ldr	r3, [r3, #12]
 8016962:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	3318      	adds	r3, #24
 8016968:	4618      	mov	r0, r3
 801696a:	f7fe ffe7 	bl	801593c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	3304      	adds	r3, #4
 8016972:	4618      	mov	r0, r3
 8016974:	f7fe ffe2 	bl	801593c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801697c:	2201      	movs	r2, #1
 801697e:	409a      	lsls	r2, r3
 8016980:	4b2b      	ldr	r3, [pc, #172]	; (8016a30 <xTaskResumeAll+0x124>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	4313      	orrs	r3, r2
 8016986:	4a2a      	ldr	r2, [pc, #168]	; (8016a30 <xTaskResumeAll+0x124>)
 8016988:	6013      	str	r3, [r2, #0]
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801698e:	4613      	mov	r3, r2
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	4413      	add	r3, r2
 8016994:	009b      	lsls	r3, r3, #2
 8016996:	4a27      	ldr	r2, [pc, #156]	; (8016a34 <xTaskResumeAll+0x128>)
 8016998:	441a      	add	r2, r3
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	3304      	adds	r3, #4
 801699e:	4619      	mov	r1, r3
 80169a0:	4610      	mov	r0, r2
 80169a2:	f7fe ff6e 	bl	8015882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169aa:	4b23      	ldr	r3, [pc, #140]	; (8016a38 <xTaskResumeAll+0x12c>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d302      	bcc.n	80169ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80169b4:	4b21      	ldr	r3, [pc, #132]	; (8016a3c <xTaskResumeAll+0x130>)
 80169b6:	2201      	movs	r2, #1
 80169b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80169ba:	4b1c      	ldr	r3, [pc, #112]	; (8016a2c <xTaskResumeAll+0x120>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1cc      	bne.n	801695c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d001      	beq.n	80169cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80169c8:	f000 fb68 	bl	801709c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80169cc:	4b1c      	ldr	r3, [pc, #112]	; (8016a40 <xTaskResumeAll+0x134>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d010      	beq.n	80169fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80169d8:	f000 f858 	bl	8016a8c <xTaskIncrementTick>
 80169dc:	4603      	mov	r3, r0
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d002      	beq.n	80169e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80169e2:	4b16      	ldr	r3, [pc, #88]	; (8016a3c <xTaskResumeAll+0x130>)
 80169e4:	2201      	movs	r2, #1
 80169e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	3b01      	subs	r3, #1
 80169ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d1f1      	bne.n	80169d8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80169f4:	4b12      	ldr	r3, [pc, #72]	; (8016a40 <xTaskResumeAll+0x134>)
 80169f6:	2200      	movs	r2, #0
 80169f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80169fa:	4b10      	ldr	r3, [pc, #64]	; (8016a3c <xTaskResumeAll+0x130>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d009      	beq.n	8016a16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016a02:	2301      	movs	r3, #1
 8016a04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016a06:	4b0f      	ldr	r3, [pc, #60]	; (8016a44 <xTaskResumeAll+0x138>)
 8016a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a0c:	601a      	str	r2, [r3, #0]
 8016a0e:	f3bf 8f4f 	dsb	sy
 8016a12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016a16:	f000 ffa5 	bl	8017964 <vPortExitCritical>

	return xAlreadyYielded;
 8016a1a:	68bb      	ldr	r3, [r7, #8]
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3710      	adds	r7, #16
 8016a20:	46bd      	mov	sp, r7
 8016a22:	bd80      	pop	{r7, pc}
 8016a24:	200004bc 	.word	0x200004bc
 8016a28:	20000494 	.word	0x20000494
 8016a2c:	20000454 	.word	0x20000454
 8016a30:	2000049c 	.word	0x2000049c
 8016a34:	20000398 	.word	0x20000398
 8016a38:	20000394 	.word	0x20000394
 8016a3c:	200004a8 	.word	0x200004a8
 8016a40:	200004a4 	.word	0x200004a4
 8016a44:	e000ed04 	.word	0xe000ed04

08016a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b083      	sub	sp, #12
 8016a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016a4e:	4b05      	ldr	r3, [pc, #20]	; (8016a64 <xTaskGetTickCount+0x1c>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016a54:	687b      	ldr	r3, [r7, #4]
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	370c      	adds	r7, #12
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a60:	4770      	bx	lr
 8016a62:	bf00      	nop
 8016a64:	20000498 	.word	0x20000498

08016a68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016a6e:	f001 f82d 	bl	8017acc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016a72:	2300      	movs	r3, #0
 8016a74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016a76:	4b04      	ldr	r3, [pc, #16]	; (8016a88 <xTaskGetTickCountFromISR+0x20>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016a7c:	683b      	ldr	r3, [r7, #0]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3708      	adds	r7, #8
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop
 8016a88:	20000498 	.word	0x20000498

08016a8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b086      	sub	sp, #24
 8016a90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016a92:	2300      	movs	r3, #0
 8016a94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a96:	4b4f      	ldr	r3, [pc, #316]	; (8016bd4 <xTaskIncrementTick+0x148>)
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	f040 808a 	bne.w	8016bb4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016aa0:	4b4d      	ldr	r3, [pc, #308]	; (8016bd8 <xTaskIncrementTick+0x14c>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016aa8:	4a4b      	ldr	r2, [pc, #300]	; (8016bd8 <xTaskIncrementTick+0x14c>)
 8016aaa:	693b      	ldr	r3, [r7, #16]
 8016aac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d122      	bne.n	8016afa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8016ab4:	4b49      	ldr	r3, [pc, #292]	; (8016bdc <xTaskIncrementTick+0x150>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d00c      	beq.n	8016ad8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8016abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac2:	b672      	cpsid	i
 8016ac4:	f383 8811 	msr	BASEPRI, r3
 8016ac8:	f3bf 8f6f 	isb	sy
 8016acc:	f3bf 8f4f 	dsb	sy
 8016ad0:	b662      	cpsie	i
 8016ad2:	603b      	str	r3, [r7, #0]
}
 8016ad4:	bf00      	nop
 8016ad6:	e7fe      	b.n	8016ad6 <xTaskIncrementTick+0x4a>
 8016ad8:	4b40      	ldr	r3, [pc, #256]	; (8016bdc <xTaskIncrementTick+0x150>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	60fb      	str	r3, [r7, #12]
 8016ade:	4b40      	ldr	r3, [pc, #256]	; (8016be0 <xTaskIncrementTick+0x154>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	4a3e      	ldr	r2, [pc, #248]	; (8016bdc <xTaskIncrementTick+0x150>)
 8016ae4:	6013      	str	r3, [r2, #0]
 8016ae6:	4a3e      	ldr	r2, [pc, #248]	; (8016be0 <xTaskIncrementTick+0x154>)
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	6013      	str	r3, [r2, #0]
 8016aec:	4b3d      	ldr	r3, [pc, #244]	; (8016be4 <xTaskIncrementTick+0x158>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	3301      	adds	r3, #1
 8016af2:	4a3c      	ldr	r2, [pc, #240]	; (8016be4 <xTaskIncrementTick+0x158>)
 8016af4:	6013      	str	r3, [r2, #0]
 8016af6:	f000 fad1 	bl	801709c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016afa:	4b3b      	ldr	r3, [pc, #236]	; (8016be8 <xTaskIncrementTick+0x15c>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	693a      	ldr	r2, [r7, #16]
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d348      	bcc.n	8016b96 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b04:	4b35      	ldr	r3, [pc, #212]	; (8016bdc <xTaskIncrementTick+0x150>)
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d104      	bne.n	8016b18 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b0e:	4b36      	ldr	r3, [pc, #216]	; (8016be8 <xTaskIncrementTick+0x15c>)
 8016b10:	f04f 32ff 	mov.w	r2, #4294967295
 8016b14:	601a      	str	r2, [r3, #0]
					break;
 8016b16:	e03e      	b.n	8016b96 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b18:	4b30      	ldr	r3, [pc, #192]	; (8016bdc <xTaskIncrementTick+0x150>)
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	68db      	ldr	r3, [r3, #12]
 8016b20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016b22:	68bb      	ldr	r3, [r7, #8]
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016b28:	693a      	ldr	r2, [r7, #16]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	d203      	bcs.n	8016b38 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016b30:	4a2d      	ldr	r2, [pc, #180]	; (8016be8 <xTaskIncrementTick+0x15c>)
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016b36:	e02e      	b.n	8016b96 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	3304      	adds	r3, #4
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7fe fefd 	bl	801593c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d004      	beq.n	8016b54 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	3318      	adds	r3, #24
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7fe fef4 	bl	801593c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b58:	2201      	movs	r2, #1
 8016b5a:	409a      	lsls	r2, r3
 8016b5c:	4b23      	ldr	r3, [pc, #140]	; (8016bec <xTaskIncrementTick+0x160>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	4313      	orrs	r3, r2
 8016b62:	4a22      	ldr	r2, [pc, #136]	; (8016bec <xTaskIncrementTick+0x160>)
 8016b64:	6013      	str	r3, [r2, #0]
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	009b      	lsls	r3, r3, #2
 8016b6e:	4413      	add	r3, r2
 8016b70:	009b      	lsls	r3, r3, #2
 8016b72:	4a1f      	ldr	r2, [pc, #124]	; (8016bf0 <xTaskIncrementTick+0x164>)
 8016b74:	441a      	add	r2, r3
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	3304      	adds	r3, #4
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	4610      	mov	r0, r2
 8016b7e:	f7fe fe80 	bl	8015882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016b82:	68bb      	ldr	r3, [r7, #8]
 8016b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b86:	4b1b      	ldr	r3, [pc, #108]	; (8016bf4 <xTaskIncrementTick+0x168>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d3b9      	bcc.n	8016b04 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8016b90:	2301      	movs	r3, #1
 8016b92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b94:	e7b6      	b.n	8016b04 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016b96:	4b17      	ldr	r3, [pc, #92]	; (8016bf4 <xTaskIncrementTick+0x168>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b9c:	4914      	ldr	r1, [pc, #80]	; (8016bf0 <xTaskIncrementTick+0x164>)
 8016b9e:	4613      	mov	r3, r2
 8016ba0:	009b      	lsls	r3, r3, #2
 8016ba2:	4413      	add	r3, r2
 8016ba4:	009b      	lsls	r3, r3, #2
 8016ba6:	440b      	add	r3, r1
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b01      	cmp	r3, #1
 8016bac:	d907      	bls.n	8016bbe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8016bae:	2301      	movs	r3, #1
 8016bb0:	617b      	str	r3, [r7, #20]
 8016bb2:	e004      	b.n	8016bbe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016bb4:	4b10      	ldr	r3, [pc, #64]	; (8016bf8 <xTaskIncrementTick+0x16c>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	3301      	adds	r3, #1
 8016bba:	4a0f      	ldr	r2, [pc, #60]	; (8016bf8 <xTaskIncrementTick+0x16c>)
 8016bbc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016bbe:	4b0f      	ldr	r3, [pc, #60]	; (8016bfc <xTaskIncrementTick+0x170>)
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d001      	beq.n	8016bca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8016bc6:	2301      	movs	r3, #1
 8016bc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016bca:	697b      	ldr	r3, [r7, #20]
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3718      	adds	r7, #24
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}
 8016bd4:	200004bc 	.word	0x200004bc
 8016bd8:	20000498 	.word	0x20000498
 8016bdc:	2000044c 	.word	0x2000044c
 8016be0:	20000450 	.word	0x20000450
 8016be4:	200004ac 	.word	0x200004ac
 8016be8:	200004b4 	.word	0x200004b4
 8016bec:	2000049c 	.word	0x2000049c
 8016bf0:	20000398 	.word	0x20000398
 8016bf4:	20000394 	.word	0x20000394
 8016bf8:	200004a4 	.word	0x200004a4
 8016bfc:	200004a8 	.word	0x200004a8

08016c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b088      	sub	sp, #32
 8016c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016c06:	4b3a      	ldr	r3, [pc, #232]	; (8016cf0 <vTaskSwitchContext+0xf0>)
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d003      	beq.n	8016c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016c0e:	4b39      	ldr	r3, [pc, #228]	; (8016cf4 <vTaskSwitchContext+0xf4>)
 8016c10:	2201      	movs	r2, #1
 8016c12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016c14:	e068      	b.n	8016ce8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8016c16:	4b37      	ldr	r3, [pc, #220]	; (8016cf4 <vTaskSwitchContext+0xf4>)
 8016c18:	2200      	movs	r2, #0
 8016c1a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016c1c:	4b36      	ldr	r3, [pc, #216]	; (8016cf8 <vTaskSwitchContext+0xf8>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c22:	61fb      	str	r3, [r7, #28]
 8016c24:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8016c28:	61bb      	str	r3, [r7, #24]
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	69ba      	ldr	r2, [r7, #24]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d111      	bne.n	8016c58 <vTaskSwitchContext+0x58>
 8016c34:	69fb      	ldr	r3, [r7, #28]
 8016c36:	3304      	adds	r3, #4
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	69ba      	ldr	r2, [r7, #24]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d10b      	bne.n	8016c58 <vTaskSwitchContext+0x58>
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	3308      	adds	r3, #8
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	69ba      	ldr	r2, [r7, #24]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d105      	bne.n	8016c58 <vTaskSwitchContext+0x58>
 8016c4c:	69fb      	ldr	r3, [r7, #28]
 8016c4e:	330c      	adds	r3, #12
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	69ba      	ldr	r2, [r7, #24]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d008      	beq.n	8016c6a <vTaskSwitchContext+0x6a>
 8016c58:	4b27      	ldr	r3, [pc, #156]	; (8016cf8 <vTaskSwitchContext+0xf8>)
 8016c5a:	681a      	ldr	r2, [r3, #0]
 8016c5c:	4b26      	ldr	r3, [pc, #152]	; (8016cf8 <vTaskSwitchContext+0xf8>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	3334      	adds	r3, #52	; 0x34
 8016c62:	4619      	mov	r1, r3
 8016c64:	4610      	mov	r0, r2
 8016c66:	f7ea fb7a 	bl	800135e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c6a:	4b24      	ldr	r3, [pc, #144]	; (8016cfc <vTaskSwitchContext+0xfc>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	fab3 f383 	clz	r3, r3
 8016c76:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016c78:	7afb      	ldrb	r3, [r7, #11]
 8016c7a:	f1c3 031f 	rsb	r3, r3, #31
 8016c7e:	617b      	str	r3, [r7, #20]
 8016c80:	491f      	ldr	r1, [pc, #124]	; (8016d00 <vTaskSwitchContext+0x100>)
 8016c82:	697a      	ldr	r2, [r7, #20]
 8016c84:	4613      	mov	r3, r2
 8016c86:	009b      	lsls	r3, r3, #2
 8016c88:	4413      	add	r3, r2
 8016c8a:	009b      	lsls	r3, r3, #2
 8016c8c:	440b      	add	r3, r1
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d10c      	bne.n	8016cae <vTaskSwitchContext+0xae>
	__asm volatile
 8016c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c98:	b672      	cpsid	i
 8016c9a:	f383 8811 	msr	BASEPRI, r3
 8016c9e:	f3bf 8f6f 	isb	sy
 8016ca2:	f3bf 8f4f 	dsb	sy
 8016ca6:	b662      	cpsie	i
 8016ca8:	607b      	str	r3, [r7, #4]
}
 8016caa:	bf00      	nop
 8016cac:	e7fe      	b.n	8016cac <vTaskSwitchContext+0xac>
 8016cae:	697a      	ldr	r2, [r7, #20]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	009b      	lsls	r3, r3, #2
 8016cb4:	4413      	add	r3, r2
 8016cb6:	009b      	lsls	r3, r3, #2
 8016cb8:	4a11      	ldr	r2, [pc, #68]	; (8016d00 <vTaskSwitchContext+0x100>)
 8016cba:	4413      	add	r3, r2
 8016cbc:	613b      	str	r3, [r7, #16]
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	685a      	ldr	r2, [r3, #4]
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	605a      	str	r2, [r3, #4]
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	685a      	ldr	r2, [r3, #4]
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	3308      	adds	r3, #8
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d104      	bne.n	8016cde <vTaskSwitchContext+0xde>
 8016cd4:	693b      	ldr	r3, [r7, #16]
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	685a      	ldr	r2, [r3, #4]
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	605a      	str	r2, [r3, #4]
 8016cde:	693b      	ldr	r3, [r7, #16]
 8016ce0:	685b      	ldr	r3, [r3, #4]
 8016ce2:	68db      	ldr	r3, [r3, #12]
 8016ce4:	4a04      	ldr	r2, [pc, #16]	; (8016cf8 <vTaskSwitchContext+0xf8>)
 8016ce6:	6013      	str	r3, [r2, #0]
}
 8016ce8:	bf00      	nop
 8016cea:	3720      	adds	r7, #32
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd80      	pop	{r7, pc}
 8016cf0:	200004bc 	.word	0x200004bc
 8016cf4:	200004a8 	.word	0x200004a8
 8016cf8:	20000394 	.word	0x20000394
 8016cfc:	2000049c 	.word	0x2000049c
 8016d00:	20000398 	.word	0x20000398

08016d04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b084      	sub	sp, #16
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
 8016d0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d10c      	bne.n	8016d2e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8016d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d18:	b672      	cpsid	i
 8016d1a:	f383 8811 	msr	BASEPRI, r3
 8016d1e:	f3bf 8f6f 	isb	sy
 8016d22:	f3bf 8f4f 	dsb	sy
 8016d26:	b662      	cpsie	i
 8016d28:	60fb      	str	r3, [r7, #12]
}
 8016d2a:	bf00      	nop
 8016d2c:	e7fe      	b.n	8016d2c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016d2e:	4b07      	ldr	r3, [pc, #28]	; (8016d4c <vTaskPlaceOnEventList+0x48>)
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	3318      	adds	r3, #24
 8016d34:	4619      	mov	r1, r3
 8016d36:	6878      	ldr	r0, [r7, #4]
 8016d38:	f7fe fdc7 	bl	80158ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016d3c:	2101      	movs	r1, #1
 8016d3e:	6838      	ldr	r0, [r7, #0]
 8016d40:	f000 fc6c 	bl	801761c <prvAddCurrentTaskToDelayedList>
}
 8016d44:	bf00      	nop
 8016d46:	3710      	adds	r7, #16
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}
 8016d4c:	20000394 	.word	0x20000394

08016d50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b086      	sub	sp, #24
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	68db      	ldr	r3, [r3, #12]
 8016d5c:	68db      	ldr	r3, [r3, #12]
 8016d5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d10c      	bne.n	8016d80 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8016d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d6a:	b672      	cpsid	i
 8016d6c:	f383 8811 	msr	BASEPRI, r3
 8016d70:	f3bf 8f6f 	isb	sy
 8016d74:	f3bf 8f4f 	dsb	sy
 8016d78:	b662      	cpsie	i
 8016d7a:	60fb      	str	r3, [r7, #12]
}
 8016d7c:	bf00      	nop
 8016d7e:	e7fe      	b.n	8016d7e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	3318      	adds	r3, #24
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7fe fdd9 	bl	801593c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d8a:	4b1d      	ldr	r3, [pc, #116]	; (8016e00 <xTaskRemoveFromEventList+0xb0>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d11c      	bne.n	8016dcc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	3304      	adds	r3, #4
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7fe fdd0 	bl	801593c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016da0:	2201      	movs	r2, #1
 8016da2:	409a      	lsls	r2, r3
 8016da4:	4b17      	ldr	r3, [pc, #92]	; (8016e04 <xTaskRemoveFromEventList+0xb4>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	4313      	orrs	r3, r2
 8016daa:	4a16      	ldr	r2, [pc, #88]	; (8016e04 <xTaskRemoveFromEventList+0xb4>)
 8016dac:	6013      	str	r3, [r2, #0]
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db2:	4613      	mov	r3, r2
 8016db4:	009b      	lsls	r3, r3, #2
 8016db6:	4413      	add	r3, r2
 8016db8:	009b      	lsls	r3, r3, #2
 8016dba:	4a13      	ldr	r2, [pc, #76]	; (8016e08 <xTaskRemoveFromEventList+0xb8>)
 8016dbc:	441a      	add	r2, r3
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	3304      	adds	r3, #4
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	4610      	mov	r0, r2
 8016dc6:	f7fe fd5c 	bl	8015882 <vListInsertEnd>
 8016dca:	e005      	b.n	8016dd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016dcc:	693b      	ldr	r3, [r7, #16]
 8016dce:	3318      	adds	r3, #24
 8016dd0:	4619      	mov	r1, r3
 8016dd2:	480e      	ldr	r0, [pc, #56]	; (8016e0c <xTaskRemoveFromEventList+0xbc>)
 8016dd4:	f7fe fd55 	bl	8015882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ddc:	4b0c      	ldr	r3, [pc, #48]	; (8016e10 <xTaskRemoveFromEventList+0xc0>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d905      	bls.n	8016df2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016de6:	2301      	movs	r3, #1
 8016de8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016dea:	4b0a      	ldr	r3, [pc, #40]	; (8016e14 <xTaskRemoveFromEventList+0xc4>)
 8016dec:	2201      	movs	r2, #1
 8016dee:	601a      	str	r2, [r3, #0]
 8016df0:	e001      	b.n	8016df6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8016df2:	2300      	movs	r3, #0
 8016df4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016df6:	697b      	ldr	r3, [r7, #20]
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3718      	adds	r7, #24
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	200004bc 	.word	0x200004bc
 8016e04:	2000049c 	.word	0x2000049c
 8016e08:	20000398 	.word	0x20000398
 8016e0c:	20000454 	.word	0x20000454
 8016e10:	20000394 	.word	0x20000394
 8016e14:	200004a8 	.word	0x200004a8

08016e18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b083      	sub	sp, #12
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016e20:	4b06      	ldr	r3, [pc, #24]	; (8016e3c <vTaskInternalSetTimeOutState+0x24>)
 8016e22:	681a      	ldr	r2, [r3, #0]
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016e28:	4b05      	ldr	r3, [pc, #20]	; (8016e40 <vTaskInternalSetTimeOutState+0x28>)
 8016e2a:	681a      	ldr	r2, [r3, #0]
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	605a      	str	r2, [r3, #4]
}
 8016e30:	bf00      	nop
 8016e32:	370c      	adds	r7, #12
 8016e34:	46bd      	mov	sp, r7
 8016e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3a:	4770      	bx	lr
 8016e3c:	200004ac 	.word	0x200004ac
 8016e40:	20000498 	.word	0x20000498

08016e44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b088      	sub	sp, #32
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d10c      	bne.n	8016e6e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8016e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e58:	b672      	cpsid	i
 8016e5a:	f383 8811 	msr	BASEPRI, r3
 8016e5e:	f3bf 8f6f 	isb	sy
 8016e62:	f3bf 8f4f 	dsb	sy
 8016e66:	b662      	cpsie	i
 8016e68:	613b      	str	r3, [r7, #16]
}
 8016e6a:	bf00      	nop
 8016e6c:	e7fe      	b.n	8016e6c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d10c      	bne.n	8016e8e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8016e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e78:	b672      	cpsid	i
 8016e7a:	f383 8811 	msr	BASEPRI, r3
 8016e7e:	f3bf 8f6f 	isb	sy
 8016e82:	f3bf 8f4f 	dsb	sy
 8016e86:	b662      	cpsie	i
 8016e88:	60fb      	str	r3, [r7, #12]
}
 8016e8a:	bf00      	nop
 8016e8c:	e7fe      	b.n	8016e8c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8016e8e:	f000 fd35 	bl	80178fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016e92:	4b1d      	ldr	r3, [pc, #116]	; (8016f08 <xTaskCheckForTimeOut+0xc4>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	685b      	ldr	r3, [r3, #4]
 8016e9c:	69ba      	ldr	r2, [r7, #24]
 8016e9e:	1ad3      	subs	r3, r2, r3
 8016ea0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eaa:	d102      	bne.n	8016eb2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016eac:	2300      	movs	r3, #0
 8016eae:	61fb      	str	r3, [r7, #28]
 8016eb0:	e023      	b.n	8016efa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681a      	ldr	r2, [r3, #0]
 8016eb6:	4b15      	ldr	r3, [pc, #84]	; (8016f0c <xTaskCheckForTimeOut+0xc8>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d007      	beq.n	8016ece <xTaskCheckForTimeOut+0x8a>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	69ba      	ldr	r2, [r7, #24]
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	d302      	bcc.n	8016ece <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016ec8:	2301      	movs	r3, #1
 8016eca:	61fb      	str	r3, [r7, #28]
 8016ecc:	e015      	b.n	8016efa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	697a      	ldr	r2, [r7, #20]
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	d20b      	bcs.n	8016ef0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	681a      	ldr	r2, [r3, #0]
 8016edc:	697b      	ldr	r3, [r7, #20]
 8016ede:	1ad2      	subs	r2, r2, r3
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f7ff ff97 	bl	8016e18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016eea:	2300      	movs	r3, #0
 8016eec:	61fb      	str	r3, [r7, #28]
 8016eee:	e004      	b.n	8016efa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016efa:	f000 fd33 	bl	8017964 <vPortExitCritical>

	return xReturn;
 8016efe:	69fb      	ldr	r3, [r7, #28]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3720      	adds	r7, #32
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	20000498 	.word	0x20000498
 8016f0c:	200004ac 	.word	0x200004ac

08016f10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016f10:	b480      	push	{r7}
 8016f12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016f14:	4b03      	ldr	r3, [pc, #12]	; (8016f24 <vTaskMissedYield+0x14>)
 8016f16:	2201      	movs	r2, #1
 8016f18:	601a      	str	r2, [r3, #0]
}
 8016f1a:	bf00      	nop
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f22:	4770      	bx	lr
 8016f24:	200004a8 	.word	0x200004a8

08016f28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016f30:	f000 f854 	bl	8016fdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016f34:	4b07      	ldr	r3, [pc, #28]	; (8016f54 <prvIdleTask+0x2c>)
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	2b01      	cmp	r3, #1
 8016f3a:	d907      	bls.n	8016f4c <prvIdleTask+0x24>
			{
				taskYIELD();
 8016f3c:	4b06      	ldr	r3, [pc, #24]	; (8016f58 <prvIdleTask+0x30>)
 8016f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f42:	601a      	str	r2, [r3, #0]
 8016f44:	f3bf 8f4f 	dsb	sy
 8016f48:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016f4c:	f7ea fa00 	bl	8001350 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016f50:	e7ee      	b.n	8016f30 <prvIdleTask+0x8>
 8016f52:	bf00      	nop
 8016f54:	20000398 	.word	0x20000398
 8016f58:	e000ed04 	.word	0xe000ed04

08016f5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f62:	2300      	movs	r3, #0
 8016f64:	607b      	str	r3, [r7, #4]
 8016f66:	e00c      	b.n	8016f82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	4613      	mov	r3, r2
 8016f6c:	009b      	lsls	r3, r3, #2
 8016f6e:	4413      	add	r3, r2
 8016f70:	009b      	lsls	r3, r3, #2
 8016f72:	4a12      	ldr	r2, [pc, #72]	; (8016fbc <prvInitialiseTaskLists+0x60>)
 8016f74:	4413      	add	r3, r2
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7fe fc56 	bl	8015828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	3301      	adds	r3, #1
 8016f80:	607b      	str	r3, [r7, #4]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	2b06      	cmp	r3, #6
 8016f86:	d9ef      	bls.n	8016f68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016f88:	480d      	ldr	r0, [pc, #52]	; (8016fc0 <prvInitialiseTaskLists+0x64>)
 8016f8a:	f7fe fc4d 	bl	8015828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016f8e:	480d      	ldr	r0, [pc, #52]	; (8016fc4 <prvInitialiseTaskLists+0x68>)
 8016f90:	f7fe fc4a 	bl	8015828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016f94:	480c      	ldr	r0, [pc, #48]	; (8016fc8 <prvInitialiseTaskLists+0x6c>)
 8016f96:	f7fe fc47 	bl	8015828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016f9a:	480c      	ldr	r0, [pc, #48]	; (8016fcc <prvInitialiseTaskLists+0x70>)
 8016f9c:	f7fe fc44 	bl	8015828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016fa0:	480b      	ldr	r0, [pc, #44]	; (8016fd0 <prvInitialiseTaskLists+0x74>)
 8016fa2:	f7fe fc41 	bl	8015828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016fa6:	4b0b      	ldr	r3, [pc, #44]	; (8016fd4 <prvInitialiseTaskLists+0x78>)
 8016fa8:	4a05      	ldr	r2, [pc, #20]	; (8016fc0 <prvInitialiseTaskLists+0x64>)
 8016faa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016fac:	4b0a      	ldr	r3, [pc, #40]	; (8016fd8 <prvInitialiseTaskLists+0x7c>)
 8016fae:	4a05      	ldr	r2, [pc, #20]	; (8016fc4 <prvInitialiseTaskLists+0x68>)
 8016fb0:	601a      	str	r2, [r3, #0]
}
 8016fb2:	bf00      	nop
 8016fb4:	3708      	adds	r7, #8
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	20000398 	.word	0x20000398
 8016fc0:	20000424 	.word	0x20000424
 8016fc4:	20000438 	.word	0x20000438
 8016fc8:	20000454 	.word	0x20000454
 8016fcc:	20000468 	.word	0x20000468
 8016fd0:	20000480 	.word	0x20000480
 8016fd4:	2000044c 	.word	0x2000044c
 8016fd8:	20000450 	.word	0x20000450

08016fdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b082      	sub	sp, #8
 8016fe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016fe2:	e019      	b.n	8017018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016fe4:	f000 fc8a 	bl	80178fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fe8:	4b10      	ldr	r3, [pc, #64]	; (801702c <prvCheckTasksWaitingTermination+0x50>)
 8016fea:	68db      	ldr	r3, [r3, #12]
 8016fec:	68db      	ldr	r3, [r3, #12]
 8016fee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	3304      	adds	r3, #4
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f7fe fca1 	bl	801593c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016ffa:	4b0d      	ldr	r3, [pc, #52]	; (8017030 <prvCheckTasksWaitingTermination+0x54>)
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	3b01      	subs	r3, #1
 8017000:	4a0b      	ldr	r2, [pc, #44]	; (8017030 <prvCheckTasksWaitingTermination+0x54>)
 8017002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017004:	4b0b      	ldr	r3, [pc, #44]	; (8017034 <prvCheckTasksWaitingTermination+0x58>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	3b01      	subs	r3, #1
 801700a:	4a0a      	ldr	r2, [pc, #40]	; (8017034 <prvCheckTasksWaitingTermination+0x58>)
 801700c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801700e:	f000 fca9 	bl	8017964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017012:	6878      	ldr	r0, [r7, #4]
 8017014:	f000 f810 	bl	8017038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017018:	4b06      	ldr	r3, [pc, #24]	; (8017034 <prvCheckTasksWaitingTermination+0x58>)
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d1e1      	bne.n	8016fe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017020:	bf00      	nop
 8017022:	bf00      	nop
 8017024:	3708      	adds	r7, #8
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	20000468 	.word	0x20000468
 8017030:	20000494 	.word	0x20000494
 8017034:	2000047c 	.word	0x2000047c

08017038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017046:	2b00      	cmp	r3, #0
 8017048:	d108      	bne.n	801705c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801704e:	4618      	mov	r0, r3
 8017050:	f000 fe50 	bl	8017cf4 <vPortFree>
				vPortFree( pxTCB );
 8017054:	6878      	ldr	r0, [r7, #4]
 8017056:	f000 fe4d 	bl	8017cf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801705a:	e01a      	b.n	8017092 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017062:	2b01      	cmp	r3, #1
 8017064:	d103      	bne.n	801706e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017066:	6878      	ldr	r0, [r7, #4]
 8017068:	f000 fe44 	bl	8017cf4 <vPortFree>
	}
 801706c:	e011      	b.n	8017092 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8017074:	2b02      	cmp	r3, #2
 8017076:	d00c      	beq.n	8017092 <prvDeleteTCB+0x5a>
	__asm volatile
 8017078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801707c:	b672      	cpsid	i
 801707e:	f383 8811 	msr	BASEPRI, r3
 8017082:	f3bf 8f6f 	isb	sy
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	b662      	cpsie	i
 801708c:	60fb      	str	r3, [r7, #12]
}
 801708e:	bf00      	nop
 8017090:	e7fe      	b.n	8017090 <prvDeleteTCB+0x58>
	}
 8017092:	bf00      	nop
 8017094:	3710      	adds	r7, #16
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}
	...

0801709c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801709c:	b480      	push	{r7}
 801709e:	b083      	sub	sp, #12
 80170a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80170a2:	4b0c      	ldr	r3, [pc, #48]	; (80170d4 <prvResetNextTaskUnblockTime+0x38>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d104      	bne.n	80170b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80170ac:	4b0a      	ldr	r3, [pc, #40]	; (80170d8 <prvResetNextTaskUnblockTime+0x3c>)
 80170ae:	f04f 32ff 	mov.w	r2, #4294967295
 80170b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80170b4:	e008      	b.n	80170c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170b6:	4b07      	ldr	r3, [pc, #28]	; (80170d4 <prvResetNextTaskUnblockTime+0x38>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	68db      	ldr	r3, [r3, #12]
 80170bc:	68db      	ldr	r3, [r3, #12]
 80170be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	4a04      	ldr	r2, [pc, #16]	; (80170d8 <prvResetNextTaskUnblockTime+0x3c>)
 80170c6:	6013      	str	r3, [r2, #0]
}
 80170c8:	bf00      	nop
 80170ca:	370c      	adds	r7, #12
 80170cc:	46bd      	mov	sp, r7
 80170ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d2:	4770      	bx	lr
 80170d4:	2000044c 	.word	0x2000044c
 80170d8:	200004b4 	.word	0x200004b4

080170dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80170dc:	b480      	push	{r7}
 80170de:	b083      	sub	sp, #12
 80170e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80170e2:	4b0b      	ldr	r3, [pc, #44]	; (8017110 <xTaskGetSchedulerState+0x34>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d102      	bne.n	80170f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80170ea:	2301      	movs	r3, #1
 80170ec:	607b      	str	r3, [r7, #4]
 80170ee:	e008      	b.n	8017102 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80170f0:	4b08      	ldr	r3, [pc, #32]	; (8017114 <xTaskGetSchedulerState+0x38>)
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d102      	bne.n	80170fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80170f8:	2302      	movs	r3, #2
 80170fa:	607b      	str	r3, [r7, #4]
 80170fc:	e001      	b.n	8017102 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80170fe:	2300      	movs	r3, #0
 8017100:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017102:	687b      	ldr	r3, [r7, #4]
	}
 8017104:	4618      	mov	r0, r3
 8017106:	370c      	adds	r7, #12
 8017108:	46bd      	mov	sp, r7
 801710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710e:	4770      	bx	lr
 8017110:	200004a0 	.word	0x200004a0
 8017114:	200004bc 	.word	0x200004bc

08017118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017118:	b580      	push	{r7, lr}
 801711a:	b086      	sub	sp, #24
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017124:	2300      	movs	r3, #0
 8017126:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d072      	beq.n	8017214 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801712e:	4b3c      	ldr	r3, [pc, #240]	; (8017220 <xTaskPriorityDisinherit+0x108>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	693a      	ldr	r2, [r7, #16]
 8017134:	429a      	cmp	r2, r3
 8017136:	d00c      	beq.n	8017152 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8017138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801713c:	b672      	cpsid	i
 801713e:	f383 8811 	msr	BASEPRI, r3
 8017142:	f3bf 8f6f 	isb	sy
 8017146:	f3bf 8f4f 	dsb	sy
 801714a:	b662      	cpsie	i
 801714c:	60fb      	str	r3, [r7, #12]
}
 801714e:	bf00      	nop
 8017150:	e7fe      	b.n	8017150 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8017152:	693b      	ldr	r3, [r7, #16]
 8017154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017156:	2b00      	cmp	r3, #0
 8017158:	d10c      	bne.n	8017174 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801715e:	b672      	cpsid	i
 8017160:	f383 8811 	msr	BASEPRI, r3
 8017164:	f3bf 8f6f 	isb	sy
 8017168:	f3bf 8f4f 	dsb	sy
 801716c:	b662      	cpsie	i
 801716e:	60bb      	str	r3, [r7, #8]
}
 8017170:	bf00      	nop
 8017172:	e7fe      	b.n	8017172 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8017174:	693b      	ldr	r3, [r7, #16]
 8017176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017178:	1e5a      	subs	r2, r3, #1
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017186:	429a      	cmp	r2, r3
 8017188:	d044      	beq.n	8017214 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801718e:	2b00      	cmp	r3, #0
 8017190:	d140      	bne.n	8017214 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	3304      	adds	r3, #4
 8017196:	4618      	mov	r0, r3
 8017198:	f7fe fbd0 	bl	801593c <uxListRemove>
 801719c:	4603      	mov	r3, r0
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d115      	bne.n	80171ce <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171a6:	491f      	ldr	r1, [pc, #124]	; (8017224 <xTaskPriorityDisinherit+0x10c>)
 80171a8:	4613      	mov	r3, r2
 80171aa:	009b      	lsls	r3, r3, #2
 80171ac:	4413      	add	r3, r2
 80171ae:	009b      	lsls	r3, r3, #2
 80171b0:	440b      	add	r3, r1
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d10a      	bne.n	80171ce <xTaskPriorityDisinherit+0xb6>
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171bc:	2201      	movs	r2, #1
 80171be:	fa02 f303 	lsl.w	r3, r2, r3
 80171c2:	43da      	mvns	r2, r3
 80171c4:	4b18      	ldr	r3, [pc, #96]	; (8017228 <xTaskPriorityDisinherit+0x110>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	4013      	ands	r3, r2
 80171ca:	4a17      	ldr	r2, [pc, #92]	; (8017228 <xTaskPriorityDisinherit+0x110>)
 80171cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171da:	f1c3 0207 	rsb	r2, r3, #7
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e6:	2201      	movs	r2, #1
 80171e8:	409a      	lsls	r2, r3
 80171ea:	4b0f      	ldr	r3, [pc, #60]	; (8017228 <xTaskPriorityDisinherit+0x110>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	4313      	orrs	r3, r2
 80171f0:	4a0d      	ldr	r2, [pc, #52]	; (8017228 <xTaskPriorityDisinherit+0x110>)
 80171f2:	6013      	str	r3, [r2, #0]
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171f8:	4613      	mov	r3, r2
 80171fa:	009b      	lsls	r3, r3, #2
 80171fc:	4413      	add	r3, r2
 80171fe:	009b      	lsls	r3, r3, #2
 8017200:	4a08      	ldr	r2, [pc, #32]	; (8017224 <xTaskPriorityDisinherit+0x10c>)
 8017202:	441a      	add	r2, r3
 8017204:	693b      	ldr	r3, [r7, #16]
 8017206:	3304      	adds	r3, #4
 8017208:	4619      	mov	r1, r3
 801720a:	4610      	mov	r0, r2
 801720c:	f7fe fb39 	bl	8015882 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017210:	2301      	movs	r3, #1
 8017212:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017214:	697b      	ldr	r3, [r7, #20]
	}
 8017216:	4618      	mov	r0, r3
 8017218:	3718      	adds	r7, #24
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop
 8017220:	20000394 	.word	0x20000394
 8017224:	20000398 	.word	0x20000398
 8017228:	2000049c 	.word	0x2000049c

0801722c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801722c:	b580      	push	{r7, lr}
 801722e:	b086      	sub	sp, #24
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
 8017238:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801723a:	f000 fb5f 	bl	80178fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801723e:	4b26      	ldr	r3, [pc, #152]	; (80172d8 <xTaskNotifyWait+0xac>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017246:	b2db      	uxtb	r3, r3
 8017248:	2b02      	cmp	r3, #2
 801724a:	d01a      	beq.n	8017282 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801724c:	4b22      	ldr	r3, [pc, #136]	; (80172d8 <xTaskNotifyWait+0xac>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8017252:	68fa      	ldr	r2, [r7, #12]
 8017254:	43d2      	mvns	r2, r2
 8017256:	400a      	ands	r2, r1
 8017258:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801725a:	4b1f      	ldr	r3, [pc, #124]	; (80172d8 <xTaskNotifyWait+0xac>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	2201      	movs	r2, #1
 8017260:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d00b      	beq.n	8017282 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801726a:	2101      	movs	r1, #1
 801726c:	6838      	ldr	r0, [r7, #0]
 801726e:	f000 f9d5 	bl	801761c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017272:	4b1a      	ldr	r3, [pc, #104]	; (80172dc <xTaskNotifyWait+0xb0>)
 8017274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017278:	601a      	str	r2, [r3, #0]
 801727a:	f3bf 8f4f 	dsb	sy
 801727e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017282:	f000 fb6f 	bl	8017964 <vPortExitCritical>

		taskENTER_CRITICAL();
 8017286:	f000 fb39 	bl	80178fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d004      	beq.n	801729a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8017290:	4b11      	ldr	r3, [pc, #68]	; (80172d8 <xTaskNotifyWait+0xac>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801729a:	4b0f      	ldr	r3, [pc, #60]	; (80172d8 <xTaskNotifyWait+0xac>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80172a2:	b2db      	uxtb	r3, r3
 80172a4:	2b02      	cmp	r3, #2
 80172a6:	d002      	beq.n	80172ae <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80172a8:	2300      	movs	r3, #0
 80172aa:	617b      	str	r3, [r7, #20]
 80172ac:	e008      	b.n	80172c0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80172ae:	4b0a      	ldr	r3, [pc, #40]	; (80172d8 <xTaskNotifyWait+0xac>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80172b4:	68ba      	ldr	r2, [r7, #8]
 80172b6:	43d2      	mvns	r2, r2
 80172b8:	400a      	ands	r2, r1
 80172ba:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80172bc:	2301      	movs	r3, #1
 80172be:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80172c0:	4b05      	ldr	r3, [pc, #20]	; (80172d8 <xTaskNotifyWait+0xac>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	2200      	movs	r2, #0
 80172c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80172ca:	f000 fb4b 	bl	8017964 <vPortExitCritical>

		return xReturn;
 80172ce:	697b      	ldr	r3, [r7, #20]
	}
 80172d0:	4618      	mov	r0, r3
 80172d2:	3718      	adds	r7, #24
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	20000394 	.word	0x20000394
 80172dc:	e000ed04 	.word	0xe000ed04

080172e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b08a      	sub	sp, #40	; 0x28
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	603b      	str	r3, [r7, #0]
 80172ec:	4613      	mov	r3, r2
 80172ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80172f0:	2301      	movs	r3, #1
 80172f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d10c      	bne.n	8017314 <xTaskGenericNotify+0x34>
	__asm volatile
 80172fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172fe:	b672      	cpsid	i
 8017300:	f383 8811 	msr	BASEPRI, r3
 8017304:	f3bf 8f6f 	isb	sy
 8017308:	f3bf 8f4f 	dsb	sy
 801730c:	b662      	cpsie	i
 801730e:	61bb      	str	r3, [r7, #24]
}
 8017310:	bf00      	nop
 8017312:	e7fe      	b.n	8017312 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8017318:	f000 faf0 	bl	80178fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d003      	beq.n	801732a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017322:	6a3b      	ldr	r3, [r7, #32]
 8017324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801732a:	6a3b      	ldr	r3, [r7, #32]
 801732c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8017330:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017332:	6a3b      	ldr	r3, [r7, #32]
 8017334:	2202      	movs	r2, #2
 8017336:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 801733a:	79fb      	ldrb	r3, [r7, #7]
 801733c:	2b04      	cmp	r3, #4
 801733e:	d828      	bhi.n	8017392 <xTaskGenericNotify+0xb2>
 8017340:	a201      	add	r2, pc, #4	; (adr r2, 8017348 <xTaskGenericNotify+0x68>)
 8017342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017346:	bf00      	nop
 8017348:	080173b7 	.word	0x080173b7
 801734c:	0801735d 	.word	0x0801735d
 8017350:	0801736b 	.word	0x0801736b
 8017354:	08017377 	.word	0x08017377
 8017358:	0801737f 	.word	0x0801737f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801735c:	6a3b      	ldr	r3, [r7, #32]
 801735e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	431a      	orrs	r2, r3
 8017364:	6a3b      	ldr	r3, [r7, #32]
 8017366:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017368:	e028      	b.n	80173bc <xTaskGenericNotify+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801736a:	6a3b      	ldr	r3, [r7, #32]
 801736c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801736e:	1c5a      	adds	r2, r3, #1
 8017370:	6a3b      	ldr	r3, [r7, #32]
 8017372:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017374:	e022      	b.n	80173bc <xTaskGenericNotify+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017376:	6a3b      	ldr	r3, [r7, #32]
 8017378:	68ba      	ldr	r2, [r7, #8]
 801737a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801737c:	e01e      	b.n	80173bc <xTaskGenericNotify+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801737e:	7ffb      	ldrb	r3, [r7, #31]
 8017380:	2b02      	cmp	r3, #2
 8017382:	d003      	beq.n	801738c <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017384:	6a3b      	ldr	r3, [r7, #32]
 8017386:	68ba      	ldr	r2, [r7, #8]
 8017388:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801738a:	e017      	b.n	80173bc <xTaskGenericNotify+0xdc>
						xReturn = pdFAIL;
 801738c:	2300      	movs	r3, #0
 801738e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8017390:	e014      	b.n	80173bc <xTaskGenericNotify+0xdc>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017392:	6a3b      	ldr	r3, [r7, #32]
 8017394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801739a:	d00e      	beq.n	80173ba <xTaskGenericNotify+0xda>
	__asm volatile
 801739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a0:	b672      	cpsid	i
 80173a2:	f383 8811 	msr	BASEPRI, r3
 80173a6:	f3bf 8f6f 	isb	sy
 80173aa:	f3bf 8f4f 	dsb	sy
 80173ae:	b662      	cpsie	i
 80173b0:	617b      	str	r3, [r7, #20]
}
 80173b2:	bf00      	nop
 80173b4:	e7fe      	b.n	80173b4 <xTaskGenericNotify+0xd4>
					break;
 80173b6:	bf00      	nop
 80173b8:	e000      	b.n	80173bc <xTaskGenericNotify+0xdc>

					break;
 80173ba:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80173bc:	7ffb      	ldrb	r3, [r7, #31]
 80173be:	2b01      	cmp	r3, #1
 80173c0:	d13b      	bne.n	801743a <xTaskGenericNotify+0x15a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173c2:	6a3b      	ldr	r3, [r7, #32]
 80173c4:	3304      	adds	r3, #4
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7fe fab8 	bl	801593c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80173cc:	6a3b      	ldr	r3, [r7, #32]
 80173ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173d0:	2201      	movs	r2, #1
 80173d2:	409a      	lsls	r2, r3
 80173d4:	4b1c      	ldr	r3, [pc, #112]	; (8017448 <xTaskGenericNotify+0x168>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	4313      	orrs	r3, r2
 80173da:	4a1b      	ldr	r2, [pc, #108]	; (8017448 <xTaskGenericNotify+0x168>)
 80173dc:	6013      	str	r3, [r2, #0]
 80173de:	6a3b      	ldr	r3, [r7, #32]
 80173e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173e2:	4613      	mov	r3, r2
 80173e4:	009b      	lsls	r3, r3, #2
 80173e6:	4413      	add	r3, r2
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	4a18      	ldr	r2, [pc, #96]	; (801744c <xTaskGenericNotify+0x16c>)
 80173ec:	441a      	add	r2, r3
 80173ee:	6a3b      	ldr	r3, [r7, #32]
 80173f0:	3304      	adds	r3, #4
 80173f2:	4619      	mov	r1, r3
 80173f4:	4610      	mov	r0, r2
 80173f6:	f7fe fa44 	bl	8015882 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80173fa:	6a3b      	ldr	r3, [r7, #32]
 80173fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d00c      	beq.n	801741c <xTaskGenericNotify+0x13c>
	__asm volatile
 8017402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017406:	b672      	cpsid	i
 8017408:	f383 8811 	msr	BASEPRI, r3
 801740c:	f3bf 8f6f 	isb	sy
 8017410:	f3bf 8f4f 	dsb	sy
 8017414:	b662      	cpsie	i
 8017416:	613b      	str	r3, [r7, #16]
}
 8017418:	bf00      	nop
 801741a:	e7fe      	b.n	801741a <xTaskGenericNotify+0x13a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801741c:	6a3b      	ldr	r3, [r7, #32]
 801741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017420:	4b0b      	ldr	r3, [pc, #44]	; (8017450 <xTaskGenericNotify+0x170>)
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017426:	429a      	cmp	r2, r3
 8017428:	d907      	bls.n	801743a <xTaskGenericNotify+0x15a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801742a:	4b0a      	ldr	r3, [pc, #40]	; (8017454 <xTaskGenericNotify+0x174>)
 801742c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017430:	601a      	str	r2, [r3, #0]
 8017432:	f3bf 8f4f 	dsb	sy
 8017436:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801743a:	f000 fa93 	bl	8017964 <vPortExitCritical>

		return xReturn;
 801743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017440:	4618      	mov	r0, r3
 8017442:	3728      	adds	r7, #40	; 0x28
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}
 8017448:	2000049c 	.word	0x2000049c
 801744c:	20000398 	.word	0x20000398
 8017450:	20000394 	.word	0x20000394
 8017454:	e000ed04 	.word	0xe000ed04

08017458 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017458:	b580      	push	{r7, lr}
 801745a:	b08e      	sub	sp, #56	; 0x38
 801745c:	af00      	add	r7, sp, #0
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	60b9      	str	r1, [r7, #8]
 8017462:	603b      	str	r3, [r7, #0]
 8017464:	4613      	mov	r3, r2
 8017466:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8017468:	2301      	movs	r3, #1
 801746a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d10c      	bne.n	801748c <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8017472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017476:	b672      	cpsid	i
 8017478:	f383 8811 	msr	BASEPRI, r3
 801747c:	f3bf 8f6f 	isb	sy
 8017480:	f3bf 8f4f 	dsb	sy
 8017484:	b662      	cpsie	i
 8017486:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017488:	bf00      	nop
 801748a:	e7fe      	b.n	801748a <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801748c:	f000 fb1e 	bl	8017acc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8017494:	f3ef 8211 	mrs	r2, BASEPRI
 8017498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801749c:	b672      	cpsid	i
 801749e:	f383 8811 	msr	BASEPRI, r3
 80174a2:	f3bf 8f6f 	isb	sy
 80174a6:	f3bf 8f4f 	dsb	sy
 80174aa:	b662      	cpsie	i
 80174ac:	623a      	str	r2, [r7, #32]
 80174ae:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80174b0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80174b4:	683b      	ldr	r3, [r7, #0]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d003      	beq.n	80174c2 <xTaskGenericNotifyFromISR+0x6a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80174ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80174c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80174c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80174cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ce:	2202      	movs	r2, #2
 80174d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80174d4:	79fb      	ldrb	r3, [r7, #7]
 80174d6:	2b04      	cmp	r3, #4
 80174d8:	d828      	bhi.n	801752c <xTaskGenericNotifyFromISR+0xd4>
 80174da:	a201      	add	r2, pc, #4	; (adr r2, 80174e0 <xTaskGenericNotifyFromISR+0x88>)
 80174dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174e0:	08017551 	.word	0x08017551
 80174e4:	080174f5 	.word	0x080174f5
 80174e8:	08017503 	.word	0x08017503
 80174ec:	0801750f 	.word	0x0801750f
 80174f0:	08017517 	.word	0x08017517
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80174f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	431a      	orrs	r2, r3
 80174fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fe:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017500:	e029      	b.n	8017556 <xTaskGenericNotifyFromISR+0xfe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017506:	1c5a      	adds	r2, r3, #1
 8017508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801750a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 801750c:	e023      	b.n	8017556 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017510:	68ba      	ldr	r2, [r7, #8]
 8017512:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8017514:	e01f      	b.n	8017556 <xTaskGenericNotifyFromISR+0xfe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801751a:	2b02      	cmp	r3, #2
 801751c:	d003      	beq.n	8017526 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017520:	68ba      	ldr	r2, [r7, #8]
 8017522:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017524:	e017      	b.n	8017556 <xTaskGenericNotifyFromISR+0xfe>
						xReturn = pdFAIL;
 8017526:	2300      	movs	r3, #0
 8017528:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801752a:	e014      	b.n	8017556 <xTaskGenericNotifyFromISR+0xfe>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017534:	d00e      	beq.n	8017554 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8017536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801753a:	b672      	cpsid	i
 801753c:	f383 8811 	msr	BASEPRI, r3
 8017540:	f3bf 8f6f 	isb	sy
 8017544:	f3bf 8f4f 	dsb	sy
 8017548:	b662      	cpsie	i
 801754a:	61bb      	str	r3, [r7, #24]
}
 801754c:	bf00      	nop
 801754e:	e7fe      	b.n	801754e <xTaskGenericNotifyFromISR+0xf6>
					break;
 8017550:	bf00      	nop
 8017552:	e000      	b.n	8017556 <xTaskGenericNotifyFromISR+0xfe>
					break;
 8017554:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017556:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801755a:	2b01      	cmp	r3, #1
 801755c:	d147      	bne.n	80175ee <xTaskGenericNotifyFromISR+0x196>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017562:	2b00      	cmp	r3, #0
 8017564:	d00c      	beq.n	8017580 <xTaskGenericNotifyFromISR+0x128>
	__asm volatile
 8017566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801756a:	b672      	cpsid	i
 801756c:	f383 8811 	msr	BASEPRI, r3
 8017570:	f3bf 8f6f 	isb	sy
 8017574:	f3bf 8f4f 	dsb	sy
 8017578:	b662      	cpsie	i
 801757a:	617b      	str	r3, [r7, #20]
}
 801757c:	bf00      	nop
 801757e:	e7fe      	b.n	801757e <xTaskGenericNotifyFromISR+0x126>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017580:	4b20      	ldr	r3, [pc, #128]	; (8017604 <xTaskGenericNotifyFromISR+0x1ac>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d11c      	bne.n	80175c2 <xTaskGenericNotifyFromISR+0x16a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758a:	3304      	adds	r3, #4
 801758c:	4618      	mov	r0, r3
 801758e:	f7fe f9d5 	bl	801593c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017596:	2201      	movs	r2, #1
 8017598:	409a      	lsls	r2, r3
 801759a:	4b1b      	ldr	r3, [pc, #108]	; (8017608 <xTaskGenericNotifyFromISR+0x1b0>)
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	4313      	orrs	r3, r2
 80175a0:	4a19      	ldr	r2, [pc, #100]	; (8017608 <xTaskGenericNotifyFromISR+0x1b0>)
 80175a2:	6013      	str	r3, [r2, #0]
 80175a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175a8:	4613      	mov	r3, r2
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	4413      	add	r3, r2
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	4a16      	ldr	r2, [pc, #88]	; (801760c <xTaskGenericNotifyFromISR+0x1b4>)
 80175b2:	441a      	add	r2, r3
 80175b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b6:	3304      	adds	r3, #4
 80175b8:	4619      	mov	r1, r3
 80175ba:	4610      	mov	r0, r2
 80175bc:	f7fe f961 	bl	8015882 <vListInsertEnd>
 80175c0:	e005      	b.n	80175ce <xTaskGenericNotifyFromISR+0x176>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80175c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c4:	3318      	adds	r3, #24
 80175c6:	4619      	mov	r1, r3
 80175c8:	4811      	ldr	r0, [pc, #68]	; (8017610 <xTaskGenericNotifyFromISR+0x1b8>)
 80175ca:	f7fe f95a 	bl	8015882 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80175ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175d2:	4b10      	ldr	r3, [pc, #64]	; (8017614 <xTaskGenericNotifyFromISR+0x1bc>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175d8:	429a      	cmp	r2, r3
 80175da:	d908      	bls.n	80175ee <xTaskGenericNotifyFromISR+0x196>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80175dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d002      	beq.n	80175e8 <xTaskGenericNotifyFromISR+0x190>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80175e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175e4:	2201      	movs	r2, #1
 80175e6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80175e8:	4b0b      	ldr	r3, [pc, #44]	; (8017618 <xTaskGenericNotifyFromISR+0x1c0>)
 80175ea:	2201      	movs	r2, #1
 80175ec:	601a      	str	r2, [r3, #0]
 80175ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80175f2:	693b      	ldr	r3, [r7, #16]
 80175f4:	f383 8811 	msr	BASEPRI, r3
}
 80175f8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80175fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3738      	adds	r7, #56	; 0x38
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	200004bc 	.word	0x200004bc
 8017608:	2000049c 	.word	0x2000049c
 801760c:	20000398 	.word	0x20000398
 8017610:	20000454 	.word	0x20000454
 8017614:	20000394 	.word	0x20000394
 8017618:	200004a8 	.word	0x200004a8

0801761c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
 8017624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017626:	4b29      	ldr	r3, [pc, #164]	; (80176cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801762c:	4b28      	ldr	r3, [pc, #160]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	3304      	adds	r3, #4
 8017632:	4618      	mov	r0, r3
 8017634:	f7fe f982 	bl	801593c <uxListRemove>
 8017638:	4603      	mov	r3, r0
 801763a:	2b00      	cmp	r3, #0
 801763c:	d10b      	bne.n	8017656 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801763e:	4b24      	ldr	r3, [pc, #144]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017644:	2201      	movs	r2, #1
 8017646:	fa02 f303 	lsl.w	r3, r2, r3
 801764a:	43da      	mvns	r2, r3
 801764c:	4b21      	ldr	r3, [pc, #132]	; (80176d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	4013      	ands	r3, r2
 8017652:	4a20      	ldr	r2, [pc, #128]	; (80176d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017654:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801765c:	d10a      	bne.n	8017674 <prvAddCurrentTaskToDelayedList+0x58>
 801765e:	683b      	ldr	r3, [r7, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d007      	beq.n	8017674 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017664:	4b1a      	ldr	r3, [pc, #104]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	3304      	adds	r3, #4
 801766a:	4619      	mov	r1, r3
 801766c:	481a      	ldr	r0, [pc, #104]	; (80176d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801766e:	f7fe f908 	bl	8015882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017672:	e026      	b.n	80176c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017674:	68fa      	ldr	r2, [r7, #12]
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4413      	add	r3, r2
 801767a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801767c:	4b14      	ldr	r3, [pc, #80]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	68ba      	ldr	r2, [r7, #8]
 8017682:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017684:	68ba      	ldr	r2, [r7, #8]
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	429a      	cmp	r2, r3
 801768a:	d209      	bcs.n	80176a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801768c:	4b13      	ldr	r3, [pc, #76]	; (80176dc <prvAddCurrentTaskToDelayedList+0xc0>)
 801768e:	681a      	ldr	r2, [r3, #0]
 8017690:	4b0f      	ldr	r3, [pc, #60]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	3304      	adds	r3, #4
 8017696:	4619      	mov	r1, r3
 8017698:	4610      	mov	r0, r2
 801769a:	f7fe f916 	bl	80158ca <vListInsert>
}
 801769e:	e010      	b.n	80176c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80176a0:	4b0f      	ldr	r3, [pc, #60]	; (80176e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	4b0a      	ldr	r3, [pc, #40]	; (80176d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	3304      	adds	r3, #4
 80176aa:	4619      	mov	r1, r3
 80176ac:	4610      	mov	r0, r2
 80176ae:	f7fe f90c 	bl	80158ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80176b2:	4b0c      	ldr	r3, [pc, #48]	; (80176e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	68ba      	ldr	r2, [r7, #8]
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d202      	bcs.n	80176c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80176bc:	4a09      	ldr	r2, [pc, #36]	; (80176e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	6013      	str	r3, [r2, #0]
}
 80176c2:	bf00      	nop
 80176c4:	3710      	adds	r7, #16
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	20000498 	.word	0x20000498
 80176d0:	20000394 	.word	0x20000394
 80176d4:	2000049c 	.word	0x2000049c
 80176d8:	20000480 	.word	0x20000480
 80176dc:	20000450 	.word	0x20000450
 80176e0:	2000044c 	.word	0x2000044c
 80176e4:	200004b4 	.word	0x200004b4

080176e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80176e8:	b480      	push	{r7}
 80176ea:	b085      	sub	sp, #20
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	60f8      	str	r0, [r7, #12]
 80176f0:	60b9      	str	r1, [r7, #8]
 80176f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	3b04      	subs	r3, #4
 80176f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	3b04      	subs	r3, #4
 8017706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	f023 0201 	bic.w	r2, r3, #1
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	3b04      	subs	r3, #4
 8017716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017718:	4a0c      	ldr	r2, [pc, #48]	; (801774c <pxPortInitialiseStack+0x64>)
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	3b14      	subs	r3, #20
 8017722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017724:	687a      	ldr	r2, [r7, #4]
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	3b04      	subs	r3, #4
 801772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	f06f 0202 	mvn.w	r2, #2
 8017736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	3b20      	subs	r3, #32
 801773c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801773e:	68fb      	ldr	r3, [r7, #12]
}
 8017740:	4618      	mov	r0, r3
 8017742:	3714      	adds	r7, #20
 8017744:	46bd      	mov	sp, r7
 8017746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774a:	4770      	bx	lr
 801774c:	08017751 	.word	0x08017751

08017750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017750:	b480      	push	{r7}
 8017752:	b085      	sub	sp, #20
 8017754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017756:	2300      	movs	r3, #0
 8017758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801775a:	4b14      	ldr	r3, [pc, #80]	; (80177ac <prvTaskExitError+0x5c>)
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017762:	d00c      	beq.n	801777e <prvTaskExitError+0x2e>
	__asm volatile
 8017764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017768:	b672      	cpsid	i
 801776a:	f383 8811 	msr	BASEPRI, r3
 801776e:	f3bf 8f6f 	isb	sy
 8017772:	f3bf 8f4f 	dsb	sy
 8017776:	b662      	cpsie	i
 8017778:	60fb      	str	r3, [r7, #12]
}
 801777a:	bf00      	nop
 801777c:	e7fe      	b.n	801777c <prvTaskExitError+0x2c>
	__asm volatile
 801777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017782:	b672      	cpsid	i
 8017784:	f383 8811 	msr	BASEPRI, r3
 8017788:	f3bf 8f6f 	isb	sy
 801778c:	f3bf 8f4f 	dsb	sy
 8017790:	b662      	cpsie	i
 8017792:	60bb      	str	r3, [r7, #8]
}
 8017794:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017796:	bf00      	nop
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d0fc      	beq.n	8017798 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801779e:	bf00      	nop
 80177a0:	bf00      	nop
 80177a2:	3714      	adds	r7, #20
 80177a4:	46bd      	mov	sp, r7
 80177a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177aa:	4770      	bx	lr
 80177ac:	2000005c 	.word	0x2000005c

080177b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80177b0:	4b07      	ldr	r3, [pc, #28]	; (80177d0 <pxCurrentTCBConst2>)
 80177b2:	6819      	ldr	r1, [r3, #0]
 80177b4:	6808      	ldr	r0, [r1, #0]
 80177b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ba:	f380 8809 	msr	PSP, r0
 80177be:	f3bf 8f6f 	isb	sy
 80177c2:	f04f 0000 	mov.w	r0, #0
 80177c6:	f380 8811 	msr	BASEPRI, r0
 80177ca:	4770      	bx	lr
 80177cc:	f3af 8000 	nop.w

080177d0 <pxCurrentTCBConst2>:
 80177d0:	20000394 	.word	0x20000394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80177d4:	bf00      	nop
 80177d6:	bf00      	nop

080177d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80177d8:	4808      	ldr	r0, [pc, #32]	; (80177fc <prvPortStartFirstTask+0x24>)
 80177da:	6800      	ldr	r0, [r0, #0]
 80177dc:	6800      	ldr	r0, [r0, #0]
 80177de:	f380 8808 	msr	MSP, r0
 80177e2:	f04f 0000 	mov.w	r0, #0
 80177e6:	f380 8814 	msr	CONTROL, r0
 80177ea:	b662      	cpsie	i
 80177ec:	b661      	cpsie	f
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	f3bf 8f6f 	isb	sy
 80177f6:	df00      	svc	0
 80177f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80177fa:	bf00      	nop
 80177fc:	e000ed08 	.word	0xe000ed08

08017800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b084      	sub	sp, #16
 8017804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017806:	4b37      	ldr	r3, [pc, #220]	; (80178e4 <xPortStartScheduler+0xe4>)
 8017808:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	781b      	ldrb	r3, [r3, #0]
 801780e:	b2db      	uxtb	r3, r3
 8017810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	22ff      	movs	r2, #255	; 0xff
 8017816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	781b      	ldrb	r3, [r3, #0]
 801781c:	b2db      	uxtb	r3, r3
 801781e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017820:	78fb      	ldrb	r3, [r7, #3]
 8017822:	b2db      	uxtb	r3, r3
 8017824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017828:	b2da      	uxtb	r2, r3
 801782a:	4b2f      	ldr	r3, [pc, #188]	; (80178e8 <xPortStartScheduler+0xe8>)
 801782c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801782e:	4b2f      	ldr	r3, [pc, #188]	; (80178ec <xPortStartScheduler+0xec>)
 8017830:	2207      	movs	r2, #7
 8017832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017834:	e009      	b.n	801784a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017836:	4b2d      	ldr	r3, [pc, #180]	; (80178ec <xPortStartScheduler+0xec>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	3b01      	subs	r3, #1
 801783c:	4a2b      	ldr	r2, [pc, #172]	; (80178ec <xPortStartScheduler+0xec>)
 801783e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017840:	78fb      	ldrb	r3, [r7, #3]
 8017842:	b2db      	uxtb	r3, r3
 8017844:	005b      	lsls	r3, r3, #1
 8017846:	b2db      	uxtb	r3, r3
 8017848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801784a:	78fb      	ldrb	r3, [r7, #3]
 801784c:	b2db      	uxtb	r3, r3
 801784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017852:	2b80      	cmp	r3, #128	; 0x80
 8017854:	d0ef      	beq.n	8017836 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017856:	4b25      	ldr	r3, [pc, #148]	; (80178ec <xPortStartScheduler+0xec>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	f1c3 0307 	rsb	r3, r3, #7
 801785e:	2b04      	cmp	r3, #4
 8017860:	d00c      	beq.n	801787c <xPortStartScheduler+0x7c>
	__asm volatile
 8017862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017866:	b672      	cpsid	i
 8017868:	f383 8811 	msr	BASEPRI, r3
 801786c:	f3bf 8f6f 	isb	sy
 8017870:	f3bf 8f4f 	dsb	sy
 8017874:	b662      	cpsie	i
 8017876:	60bb      	str	r3, [r7, #8]
}
 8017878:	bf00      	nop
 801787a:	e7fe      	b.n	801787a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801787c:	4b1b      	ldr	r3, [pc, #108]	; (80178ec <xPortStartScheduler+0xec>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	021b      	lsls	r3, r3, #8
 8017882:	4a1a      	ldr	r2, [pc, #104]	; (80178ec <xPortStartScheduler+0xec>)
 8017884:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017886:	4b19      	ldr	r3, [pc, #100]	; (80178ec <xPortStartScheduler+0xec>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801788e:	4a17      	ldr	r2, [pc, #92]	; (80178ec <xPortStartScheduler+0xec>)
 8017890:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	b2da      	uxtb	r2, r3
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801789a:	4b15      	ldr	r3, [pc, #84]	; (80178f0 <xPortStartScheduler+0xf0>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	4a14      	ldr	r2, [pc, #80]	; (80178f0 <xPortStartScheduler+0xf0>)
 80178a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80178a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80178a6:	4b12      	ldr	r3, [pc, #72]	; (80178f0 <xPortStartScheduler+0xf0>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	4a11      	ldr	r2, [pc, #68]	; (80178f0 <xPortStartScheduler+0xf0>)
 80178ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80178b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80178b2:	f000 f8dd 	bl	8017a70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80178b6:	4b0f      	ldr	r3, [pc, #60]	; (80178f4 <xPortStartScheduler+0xf4>)
 80178b8:	2200      	movs	r2, #0
 80178ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80178bc:	f000 f8fc 	bl	8017ab8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80178c0:	4b0d      	ldr	r3, [pc, #52]	; (80178f8 <xPortStartScheduler+0xf8>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	4a0c      	ldr	r2, [pc, #48]	; (80178f8 <xPortStartScheduler+0xf8>)
 80178c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80178ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80178cc:	f7ff ff84 	bl	80177d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80178d0:	f7ff f996 	bl	8016c00 <vTaskSwitchContext>
	prvTaskExitError();
 80178d4:	f7ff ff3c 	bl	8017750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80178d8:	2300      	movs	r3, #0
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	e000e400 	.word	0xe000e400
 80178e8:	200004c0 	.word	0x200004c0
 80178ec:	200004c4 	.word	0x200004c4
 80178f0:	e000ed20 	.word	0xe000ed20
 80178f4:	2000005c 	.word	0x2000005c
 80178f8:	e000ef34 	.word	0xe000ef34

080178fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80178fc:	b480      	push	{r7}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
	__asm volatile
 8017902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017906:	b672      	cpsid	i
 8017908:	f383 8811 	msr	BASEPRI, r3
 801790c:	f3bf 8f6f 	isb	sy
 8017910:	f3bf 8f4f 	dsb	sy
 8017914:	b662      	cpsie	i
 8017916:	607b      	str	r3, [r7, #4]
}
 8017918:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801791a:	4b10      	ldr	r3, [pc, #64]	; (801795c <vPortEnterCritical+0x60>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	3301      	adds	r3, #1
 8017920:	4a0e      	ldr	r2, [pc, #56]	; (801795c <vPortEnterCritical+0x60>)
 8017922:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017924:	4b0d      	ldr	r3, [pc, #52]	; (801795c <vPortEnterCritical+0x60>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2b01      	cmp	r3, #1
 801792a:	d111      	bne.n	8017950 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801792c:	4b0c      	ldr	r3, [pc, #48]	; (8017960 <vPortEnterCritical+0x64>)
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	b2db      	uxtb	r3, r3
 8017932:	2b00      	cmp	r3, #0
 8017934:	d00c      	beq.n	8017950 <vPortEnterCritical+0x54>
	__asm volatile
 8017936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793a:	b672      	cpsid	i
 801793c:	f383 8811 	msr	BASEPRI, r3
 8017940:	f3bf 8f6f 	isb	sy
 8017944:	f3bf 8f4f 	dsb	sy
 8017948:	b662      	cpsie	i
 801794a:	603b      	str	r3, [r7, #0]
}
 801794c:	bf00      	nop
 801794e:	e7fe      	b.n	801794e <vPortEnterCritical+0x52>
	}
}
 8017950:	bf00      	nop
 8017952:	370c      	adds	r7, #12
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr
 801795c:	2000005c 	.word	0x2000005c
 8017960:	e000ed04 	.word	0xe000ed04

08017964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017964:	b480      	push	{r7}
 8017966:	b083      	sub	sp, #12
 8017968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801796a:	4b13      	ldr	r3, [pc, #76]	; (80179b8 <vPortExitCritical+0x54>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d10c      	bne.n	801798c <vPortExitCritical+0x28>
	__asm volatile
 8017972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017976:	b672      	cpsid	i
 8017978:	f383 8811 	msr	BASEPRI, r3
 801797c:	f3bf 8f6f 	isb	sy
 8017980:	f3bf 8f4f 	dsb	sy
 8017984:	b662      	cpsie	i
 8017986:	607b      	str	r3, [r7, #4]
}
 8017988:	bf00      	nop
 801798a:	e7fe      	b.n	801798a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801798c:	4b0a      	ldr	r3, [pc, #40]	; (80179b8 <vPortExitCritical+0x54>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	3b01      	subs	r3, #1
 8017992:	4a09      	ldr	r2, [pc, #36]	; (80179b8 <vPortExitCritical+0x54>)
 8017994:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017996:	4b08      	ldr	r3, [pc, #32]	; (80179b8 <vPortExitCritical+0x54>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d105      	bne.n	80179aa <vPortExitCritical+0x46>
 801799e:	2300      	movs	r3, #0
 80179a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	f383 8811 	msr	BASEPRI, r3
}
 80179a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80179aa:	bf00      	nop
 80179ac:	370c      	adds	r7, #12
 80179ae:	46bd      	mov	sp, r7
 80179b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop
 80179b8:	2000005c 	.word	0x2000005c
 80179bc:	00000000 	.word	0x00000000

080179c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80179c0:	f3ef 8009 	mrs	r0, PSP
 80179c4:	f3bf 8f6f 	isb	sy
 80179c8:	4b15      	ldr	r3, [pc, #84]	; (8017a20 <pxCurrentTCBConst>)
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	f01e 0f10 	tst.w	lr, #16
 80179d0:	bf08      	it	eq
 80179d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80179d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179da:	6010      	str	r0, [r2, #0]
 80179dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80179e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80179e4:	b672      	cpsid	i
 80179e6:	f380 8811 	msr	BASEPRI, r0
 80179ea:	f3bf 8f4f 	dsb	sy
 80179ee:	f3bf 8f6f 	isb	sy
 80179f2:	b662      	cpsie	i
 80179f4:	f7ff f904 	bl	8016c00 <vTaskSwitchContext>
 80179f8:	f04f 0000 	mov.w	r0, #0
 80179fc:	f380 8811 	msr	BASEPRI, r0
 8017a00:	bc09      	pop	{r0, r3}
 8017a02:	6819      	ldr	r1, [r3, #0]
 8017a04:	6808      	ldr	r0, [r1, #0]
 8017a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0a:	f01e 0f10 	tst.w	lr, #16
 8017a0e:	bf08      	it	eq
 8017a10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017a14:	f380 8809 	msr	PSP, r0
 8017a18:	f3bf 8f6f 	isb	sy
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop

08017a20 <pxCurrentTCBConst>:
 8017a20:	20000394 	.word	0x20000394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017a24:	bf00      	nop
 8017a26:	bf00      	nop

08017a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8017a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a32:	b672      	cpsid	i
 8017a34:	f383 8811 	msr	BASEPRI, r3
 8017a38:	f3bf 8f6f 	isb	sy
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	b662      	cpsie	i
 8017a42:	607b      	str	r3, [r7, #4]
}
 8017a44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017a46:	f7ff f821 	bl	8016a8c <xTaskIncrementTick>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d003      	beq.n	8017a58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017a50:	4b06      	ldr	r3, [pc, #24]	; (8017a6c <SysTick_Handler+0x44>)
 8017a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a56:	601a      	str	r2, [r3, #0]
 8017a58:	2300      	movs	r3, #0
 8017a5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	f383 8811 	msr	BASEPRI, r3
}
 8017a62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017a64:	bf00      	nop
 8017a66:	3708      	adds	r7, #8
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}
 8017a6c:	e000ed04 	.word	0xe000ed04

08017a70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017a70:	b480      	push	{r7}
 8017a72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017a74:	4b0b      	ldr	r3, [pc, #44]	; (8017aa4 <vPortSetupTimerInterrupt+0x34>)
 8017a76:	2200      	movs	r2, #0
 8017a78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017a7a:	4b0b      	ldr	r3, [pc, #44]	; (8017aa8 <vPortSetupTimerInterrupt+0x38>)
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017a80:	4b0a      	ldr	r3, [pc, #40]	; (8017aac <vPortSetupTimerInterrupt+0x3c>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	4a0a      	ldr	r2, [pc, #40]	; (8017ab0 <vPortSetupTimerInterrupt+0x40>)
 8017a86:	fba2 2303 	umull	r2, r3, r2, r3
 8017a8a:	099b      	lsrs	r3, r3, #6
 8017a8c:	4a09      	ldr	r2, [pc, #36]	; (8017ab4 <vPortSetupTimerInterrupt+0x44>)
 8017a8e:	3b01      	subs	r3, #1
 8017a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017a92:	4b04      	ldr	r3, [pc, #16]	; (8017aa4 <vPortSetupTimerInterrupt+0x34>)
 8017a94:	2207      	movs	r2, #7
 8017a96:	601a      	str	r2, [r3, #0]
}
 8017a98:	bf00      	nop
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa0:	4770      	bx	lr
 8017aa2:	bf00      	nop
 8017aa4:	e000e010 	.word	0xe000e010
 8017aa8:	e000e018 	.word	0xe000e018
 8017aac:	20000014 	.word	0x20000014
 8017ab0:	10624dd3 	.word	0x10624dd3
 8017ab4:	e000e014 	.word	0xe000e014

08017ab8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017ab8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017ac8 <vPortEnableVFP+0x10>
 8017abc:	6801      	ldr	r1, [r0, #0]
 8017abe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017ac2:	6001      	str	r1, [r0, #0]
 8017ac4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017ac6:	bf00      	nop
 8017ac8:	e000ed88 	.word	0xe000ed88

08017acc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017acc:	b480      	push	{r7}
 8017ace:	b085      	sub	sp, #20
 8017ad0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017ad2:	f3ef 8305 	mrs	r3, IPSR
 8017ad6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2b0f      	cmp	r3, #15
 8017adc:	d916      	bls.n	8017b0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017ade:	4a19      	ldr	r2, [pc, #100]	; (8017b44 <vPortValidateInterruptPriority+0x78>)
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	4413      	add	r3, r2
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017ae8:	4b17      	ldr	r3, [pc, #92]	; (8017b48 <vPortValidateInterruptPriority+0x7c>)
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	7afa      	ldrb	r2, [r7, #11]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d20c      	bcs.n	8017b0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8017af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af6:	b672      	cpsid	i
 8017af8:	f383 8811 	msr	BASEPRI, r3
 8017afc:	f3bf 8f6f 	isb	sy
 8017b00:	f3bf 8f4f 	dsb	sy
 8017b04:	b662      	cpsie	i
 8017b06:	607b      	str	r3, [r7, #4]
}
 8017b08:	bf00      	nop
 8017b0a:	e7fe      	b.n	8017b0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017b0c:	4b0f      	ldr	r3, [pc, #60]	; (8017b4c <vPortValidateInterruptPriority+0x80>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017b14:	4b0e      	ldr	r3, [pc, #56]	; (8017b50 <vPortValidateInterruptPriority+0x84>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d90c      	bls.n	8017b36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8017b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b20:	b672      	cpsid	i
 8017b22:	f383 8811 	msr	BASEPRI, r3
 8017b26:	f3bf 8f6f 	isb	sy
 8017b2a:	f3bf 8f4f 	dsb	sy
 8017b2e:	b662      	cpsie	i
 8017b30:	603b      	str	r3, [r7, #0]
}
 8017b32:	bf00      	nop
 8017b34:	e7fe      	b.n	8017b34 <vPortValidateInterruptPriority+0x68>
	}
 8017b36:	bf00      	nop
 8017b38:	3714      	adds	r7, #20
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b40:	4770      	bx	lr
 8017b42:	bf00      	nop
 8017b44:	e000e3f0 	.word	0xe000e3f0
 8017b48:	200004c0 	.word	0x200004c0
 8017b4c:	e000ed0c 	.word	0xe000ed0c
 8017b50:	200004c4 	.word	0x200004c4

08017b54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b08a      	sub	sp, #40	; 0x28
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017b60:	f7fe fec6 	bl	80168f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017b64:	4b5e      	ldr	r3, [pc, #376]	; (8017ce0 <pvPortMalloc+0x18c>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d101      	bne.n	8017b70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017b6c:	f000 f920 	bl	8017db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017b70:	4b5c      	ldr	r3, [pc, #368]	; (8017ce4 <pvPortMalloc+0x190>)
 8017b72:	681a      	ldr	r2, [r3, #0]
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	4013      	ands	r3, r2
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	f040 8092 	bne.w	8017ca2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d01f      	beq.n	8017bc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8017b84:	2208      	movs	r2, #8
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	4413      	add	r3, r2
 8017b8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f003 0307 	and.w	r3, r3, #7
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d016      	beq.n	8017bc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f023 0307 	bic.w	r3, r3, #7
 8017b9c:	3308      	adds	r3, #8
 8017b9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	f003 0307 	and.w	r3, r3, #7
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d00c      	beq.n	8017bc4 <pvPortMalloc+0x70>
	__asm volatile
 8017baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bae:	b672      	cpsid	i
 8017bb0:	f383 8811 	msr	BASEPRI, r3
 8017bb4:	f3bf 8f6f 	isb	sy
 8017bb8:	f3bf 8f4f 	dsb	sy
 8017bbc:	b662      	cpsie	i
 8017bbe:	617b      	str	r3, [r7, #20]
}
 8017bc0:	bf00      	nop
 8017bc2:	e7fe      	b.n	8017bc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d06b      	beq.n	8017ca2 <pvPortMalloc+0x14e>
 8017bca:	4b47      	ldr	r3, [pc, #284]	; (8017ce8 <pvPortMalloc+0x194>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	687a      	ldr	r2, [r7, #4]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d866      	bhi.n	8017ca2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017bd4:	4b45      	ldr	r3, [pc, #276]	; (8017cec <pvPortMalloc+0x198>)
 8017bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017bd8:	4b44      	ldr	r3, [pc, #272]	; (8017cec <pvPortMalloc+0x198>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017bde:	e004      	b.n	8017bea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8017be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	429a      	cmp	r2, r3
 8017bf2:	d903      	bls.n	8017bfc <pvPortMalloc+0xa8>
 8017bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d1f1      	bne.n	8017be0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017bfc:	4b38      	ldr	r3, [pc, #224]	; (8017ce0 <pvPortMalloc+0x18c>)
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c02:	429a      	cmp	r2, r3
 8017c04:	d04d      	beq.n	8017ca2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017c06:	6a3b      	ldr	r3, [r7, #32]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	2208      	movs	r2, #8
 8017c0c:	4413      	add	r3, r2
 8017c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c12:	681a      	ldr	r2, [r3, #0]
 8017c14:	6a3b      	ldr	r3, [r7, #32]
 8017c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1a:	685a      	ldr	r2, [r3, #4]
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	1ad2      	subs	r2, r2, r3
 8017c20:	2308      	movs	r3, #8
 8017c22:	005b      	lsls	r3, r3, #1
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d921      	bls.n	8017c6c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	4413      	add	r3, r2
 8017c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017c30:	69bb      	ldr	r3, [r7, #24]
 8017c32:	f003 0307 	and.w	r3, r3, #7
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d00c      	beq.n	8017c54 <pvPortMalloc+0x100>
	__asm volatile
 8017c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c3e:	b672      	cpsid	i
 8017c40:	f383 8811 	msr	BASEPRI, r3
 8017c44:	f3bf 8f6f 	isb	sy
 8017c48:	f3bf 8f4f 	dsb	sy
 8017c4c:	b662      	cpsie	i
 8017c4e:	613b      	str	r3, [r7, #16]
}
 8017c50:	bf00      	nop
 8017c52:	e7fe      	b.n	8017c52 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c56:	685a      	ldr	r2, [r3, #4]
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	1ad2      	subs	r2, r2, r3
 8017c5c:	69bb      	ldr	r3, [r7, #24]
 8017c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c62:	687a      	ldr	r2, [r7, #4]
 8017c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017c66:	69b8      	ldr	r0, [r7, #24]
 8017c68:	f000 f904 	bl	8017e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017c6c:	4b1e      	ldr	r3, [pc, #120]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c6e:	681a      	ldr	r2, [r3, #0]
 8017c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c72:	685b      	ldr	r3, [r3, #4]
 8017c74:	1ad3      	subs	r3, r2, r3
 8017c76:	4a1c      	ldr	r2, [pc, #112]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017c7a:	4b1b      	ldr	r3, [pc, #108]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c7c:	681a      	ldr	r2, [r3, #0]
 8017c7e:	4b1c      	ldr	r3, [pc, #112]	; (8017cf0 <pvPortMalloc+0x19c>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d203      	bcs.n	8017c8e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017c86:	4b18      	ldr	r3, [pc, #96]	; (8017ce8 <pvPortMalloc+0x194>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	4a19      	ldr	r2, [pc, #100]	; (8017cf0 <pvPortMalloc+0x19c>)
 8017c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c90:	685a      	ldr	r2, [r3, #4]
 8017c92:	4b14      	ldr	r3, [pc, #80]	; (8017ce4 <pvPortMalloc+0x190>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	431a      	orrs	r2, r3
 8017c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017ca2:	f7fe fe33 	bl	801690c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8017ca6:	69fb      	ldr	r3, [r7, #28]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d101      	bne.n	8017cb0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017cac:	f7e9 fb62 	bl	8001374 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017cb0:	69fb      	ldr	r3, [r7, #28]
 8017cb2:	f003 0307 	and.w	r3, r3, #7
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d00c      	beq.n	8017cd4 <pvPortMalloc+0x180>
	__asm volatile
 8017cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cbe:	b672      	cpsid	i
 8017cc0:	f383 8811 	msr	BASEPRI, r3
 8017cc4:	f3bf 8f6f 	isb	sy
 8017cc8:	f3bf 8f4f 	dsb	sy
 8017ccc:	b662      	cpsie	i
 8017cce:	60fb      	str	r3, [r7, #12]
}
 8017cd0:	bf00      	nop
 8017cd2:	e7fe      	b.n	8017cd2 <pvPortMalloc+0x17e>
	return pvReturn;
 8017cd4:	69fb      	ldr	r3, [r7, #28]
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3728      	adds	r7, #40	; 0x28
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	200084d0 	.word	0x200084d0
 8017ce4:	200084dc 	.word	0x200084dc
 8017ce8:	200084d4 	.word	0x200084d4
 8017cec:	200084c8 	.word	0x200084c8
 8017cf0:	200084d8 	.word	0x200084d8

08017cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b086      	sub	sp, #24
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d04c      	beq.n	8017da0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017d06:	2308      	movs	r3, #8
 8017d08:	425b      	negs	r3, r3
 8017d0a:	697a      	ldr	r2, [r7, #20]
 8017d0c:	4413      	add	r3, r2
 8017d0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017d10:	697b      	ldr	r3, [r7, #20]
 8017d12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	685a      	ldr	r2, [r3, #4]
 8017d18:	4b23      	ldr	r3, [pc, #140]	; (8017da8 <vPortFree+0xb4>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	4013      	ands	r3, r2
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d10c      	bne.n	8017d3c <vPortFree+0x48>
	__asm volatile
 8017d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d26:	b672      	cpsid	i
 8017d28:	f383 8811 	msr	BASEPRI, r3
 8017d2c:	f3bf 8f6f 	isb	sy
 8017d30:	f3bf 8f4f 	dsb	sy
 8017d34:	b662      	cpsie	i
 8017d36:	60fb      	str	r3, [r7, #12]
}
 8017d38:	bf00      	nop
 8017d3a:	e7fe      	b.n	8017d3a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017d3c:	693b      	ldr	r3, [r7, #16]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d00c      	beq.n	8017d5e <vPortFree+0x6a>
	__asm volatile
 8017d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d48:	b672      	cpsid	i
 8017d4a:	f383 8811 	msr	BASEPRI, r3
 8017d4e:	f3bf 8f6f 	isb	sy
 8017d52:	f3bf 8f4f 	dsb	sy
 8017d56:	b662      	cpsie	i
 8017d58:	60bb      	str	r3, [r7, #8]
}
 8017d5a:	bf00      	nop
 8017d5c:	e7fe      	b.n	8017d5c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017d5e:	693b      	ldr	r3, [r7, #16]
 8017d60:	685a      	ldr	r2, [r3, #4]
 8017d62:	4b11      	ldr	r3, [pc, #68]	; (8017da8 <vPortFree+0xb4>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	4013      	ands	r3, r2
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d019      	beq.n	8017da0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017d6c:	693b      	ldr	r3, [r7, #16]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d115      	bne.n	8017da0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017d74:	693b      	ldr	r3, [r7, #16]
 8017d76:	685a      	ldr	r2, [r3, #4]
 8017d78:	4b0b      	ldr	r3, [pc, #44]	; (8017da8 <vPortFree+0xb4>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	43db      	mvns	r3, r3
 8017d7e:	401a      	ands	r2, r3
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017d84:	f7fe fdb4 	bl	80168f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	685a      	ldr	r2, [r3, #4]
 8017d8c:	4b07      	ldr	r3, [pc, #28]	; (8017dac <vPortFree+0xb8>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4413      	add	r3, r2
 8017d92:	4a06      	ldr	r2, [pc, #24]	; (8017dac <vPortFree+0xb8>)
 8017d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017d96:	6938      	ldr	r0, [r7, #16]
 8017d98:	f000 f86c 	bl	8017e74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017d9c:	f7fe fdb6 	bl	801690c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017da0:	bf00      	nop
 8017da2:	3718      	adds	r7, #24
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	200084dc 	.word	0x200084dc
 8017dac:	200084d4 	.word	0x200084d4

08017db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017db0:	b480      	push	{r7}
 8017db2:	b085      	sub	sp, #20
 8017db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017dba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017dbc:	4b27      	ldr	r3, [pc, #156]	; (8017e5c <prvHeapInit+0xac>)
 8017dbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f003 0307 	and.w	r3, r3, #7
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d00c      	beq.n	8017de4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	3307      	adds	r3, #7
 8017dce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	f023 0307 	bic.w	r3, r3, #7
 8017dd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017dd8:	68ba      	ldr	r2, [r7, #8]
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	1ad3      	subs	r3, r2, r3
 8017dde:	4a1f      	ldr	r2, [pc, #124]	; (8017e5c <prvHeapInit+0xac>)
 8017de0:	4413      	add	r3, r2
 8017de2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017de8:	4a1d      	ldr	r2, [pc, #116]	; (8017e60 <prvHeapInit+0xb0>)
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017dee:	4b1c      	ldr	r3, [pc, #112]	; (8017e60 <prvHeapInit+0xb0>)
 8017df0:	2200      	movs	r2, #0
 8017df2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	68ba      	ldr	r2, [r7, #8]
 8017df8:	4413      	add	r3, r2
 8017dfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017dfc:	2208      	movs	r2, #8
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	1a9b      	subs	r3, r3, r2
 8017e02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	f023 0307 	bic.w	r3, r3, #7
 8017e0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	4a15      	ldr	r2, [pc, #84]	; (8017e64 <prvHeapInit+0xb4>)
 8017e10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017e12:	4b14      	ldr	r3, [pc, #80]	; (8017e64 <prvHeapInit+0xb4>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	2200      	movs	r2, #0
 8017e18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017e1a:	4b12      	ldr	r3, [pc, #72]	; (8017e64 <prvHeapInit+0xb4>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	2200      	movs	r2, #0
 8017e20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	68fa      	ldr	r2, [r7, #12]
 8017e2a:	1ad2      	subs	r2, r2, r3
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017e30:	4b0c      	ldr	r3, [pc, #48]	; (8017e64 <prvHeapInit+0xb4>)
 8017e32:	681a      	ldr	r2, [r3, #0]
 8017e34:	683b      	ldr	r3, [r7, #0]
 8017e36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	685b      	ldr	r3, [r3, #4]
 8017e3c:	4a0a      	ldr	r2, [pc, #40]	; (8017e68 <prvHeapInit+0xb8>)
 8017e3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	685b      	ldr	r3, [r3, #4]
 8017e44:	4a09      	ldr	r2, [pc, #36]	; (8017e6c <prvHeapInit+0xbc>)
 8017e46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017e48:	4b09      	ldr	r3, [pc, #36]	; (8017e70 <prvHeapInit+0xc0>)
 8017e4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017e4e:	601a      	str	r2, [r3, #0]
}
 8017e50:	bf00      	nop
 8017e52:	3714      	adds	r7, #20
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr
 8017e5c:	200004c8 	.word	0x200004c8
 8017e60:	200084c8 	.word	0x200084c8
 8017e64:	200084d0 	.word	0x200084d0
 8017e68:	200084d8 	.word	0x200084d8
 8017e6c:	200084d4 	.word	0x200084d4
 8017e70:	200084dc 	.word	0x200084dc

08017e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017e74:	b480      	push	{r7}
 8017e76:	b085      	sub	sp, #20
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017e7c:	4b28      	ldr	r3, [pc, #160]	; (8017f20 <prvInsertBlockIntoFreeList+0xac>)
 8017e7e:	60fb      	str	r3, [r7, #12]
 8017e80:	e002      	b.n	8017e88 <prvInsertBlockIntoFreeList+0x14>
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	60fb      	str	r3, [r7, #12]
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	687a      	ldr	r2, [r7, #4]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d8f7      	bhi.n	8017e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	685b      	ldr	r3, [r3, #4]
 8017e9a:	68ba      	ldr	r2, [r7, #8]
 8017e9c:	4413      	add	r3, r2
 8017e9e:	687a      	ldr	r2, [r7, #4]
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d108      	bne.n	8017eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	685a      	ldr	r2, [r3, #4]
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	441a      	add	r2, r3
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	68ba      	ldr	r2, [r7, #8]
 8017ec0:	441a      	add	r2, r3
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d118      	bne.n	8017efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	681a      	ldr	r2, [r3, #0]
 8017ece:	4b15      	ldr	r3, [pc, #84]	; (8017f24 <prvInsertBlockIntoFreeList+0xb0>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d00d      	beq.n	8017ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	685a      	ldr	r2, [r3, #4]
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	441a      	add	r2, r3
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	601a      	str	r2, [r3, #0]
 8017ef0:	e008      	b.n	8017f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017ef2:	4b0c      	ldr	r3, [pc, #48]	; (8017f24 <prvInsertBlockIntoFreeList+0xb0>)
 8017ef4:	681a      	ldr	r2, [r3, #0]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	601a      	str	r2, [r3, #0]
 8017efa:	e003      	b.n	8017f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	681a      	ldr	r2, [r3, #0]
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017f04:	68fa      	ldr	r2, [r7, #12]
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d002      	beq.n	8017f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	687a      	ldr	r2, [r7, #4]
 8017f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f12:	bf00      	nop
 8017f14:	3714      	adds	r7, #20
 8017f16:	46bd      	mov	sp, r7
 8017f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1c:	4770      	bx	lr
 8017f1e:	bf00      	nop
 8017f20:	200084c8 	.word	0x200084c8
 8017f24:	200084d0 	.word	0x200084d0

08017f28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	490e      	ldr	r1, [pc, #56]	; (8017f68 <MX_USB_HOST_Init+0x40>)
 8017f30:	480e      	ldr	r0, [pc, #56]	; (8017f6c <MX_USB_HOST_Init+0x44>)
 8017f32:	f7fb fc7d 	bl	8013830 <USBH_Init>
 8017f36:	4603      	mov	r3, r0
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d001      	beq.n	8017f40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017f3c:	f7ea fe60 	bl	8002c00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017f40:	490b      	ldr	r1, [pc, #44]	; (8017f70 <MX_USB_HOST_Init+0x48>)
 8017f42:	480a      	ldr	r0, [pc, #40]	; (8017f6c <MX_USB_HOST_Init+0x44>)
 8017f44:	f7fb fd2a 	bl	801399c <USBH_RegisterClass>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d001      	beq.n	8017f52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017f4e:	f7ea fe57 	bl	8002c00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017f52:	4806      	ldr	r0, [pc, #24]	; (8017f6c <MX_USB_HOST_Init+0x44>)
 8017f54:	f7fb fdae 	bl	8013ab4 <USBH_Start>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d001      	beq.n	8017f62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017f5e:	f7ea fe4f 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017f62:	bf00      	nop
 8017f64:	bd80      	pop	{r7, pc}
 8017f66:	bf00      	nop
 8017f68:	08017f75 	.word	0x08017f75
 8017f6c:	2004c2d8 	.word	0x2004c2d8
 8017f70:	2000003c 	.word	0x2000003c

08017f74 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017f74:	b480      	push	{r7}
 8017f76:	b083      	sub	sp, #12
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	460b      	mov	r3, r1
 8017f7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017f80:	78fb      	ldrb	r3, [r7, #3]
 8017f82:	3b01      	subs	r3, #1
 8017f84:	2b04      	cmp	r3, #4
 8017f86:	d819      	bhi.n	8017fbc <USBH_UserProcess+0x48>
 8017f88:	a201      	add	r2, pc, #4	; (adr r2, 8017f90 <USBH_UserProcess+0x1c>)
 8017f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f8e:	bf00      	nop
 8017f90:	08017fbd 	.word	0x08017fbd
 8017f94:	08017fad 	.word	0x08017fad
 8017f98:	08017fbd 	.word	0x08017fbd
 8017f9c:	08017fb5 	.word	0x08017fb5
 8017fa0:	08017fa5 	.word	0x08017fa5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017fa4:	4b09      	ldr	r3, [pc, #36]	; (8017fcc <USBH_UserProcess+0x58>)
 8017fa6:	2203      	movs	r2, #3
 8017fa8:	701a      	strb	r2, [r3, #0]
  break;
 8017faa:	e008      	b.n	8017fbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017fac:	4b07      	ldr	r3, [pc, #28]	; (8017fcc <USBH_UserProcess+0x58>)
 8017fae:	2202      	movs	r2, #2
 8017fb0:	701a      	strb	r2, [r3, #0]
  break;
 8017fb2:	e004      	b.n	8017fbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017fb4:	4b05      	ldr	r3, [pc, #20]	; (8017fcc <USBH_UserProcess+0x58>)
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	701a      	strb	r2, [r3, #0]
  break;
 8017fba:	e000      	b.n	8017fbe <USBH_UserProcess+0x4a>

  default:
  break;
 8017fbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017fbe:	bf00      	nop
 8017fc0:	370c      	adds	r7, #12
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc8:	4770      	bx	lr
 8017fca:	bf00      	nop
 8017fcc:	200084e0 	.word	0x200084e0

08017fd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b08a      	sub	sp, #40	; 0x28
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017fd8:	f107 0314 	add.w	r3, r7, #20
 8017fdc:	2200      	movs	r2, #0
 8017fde:	601a      	str	r2, [r3, #0]
 8017fe0:	605a      	str	r2, [r3, #4]
 8017fe2:	609a      	str	r2, [r3, #8]
 8017fe4:	60da      	str	r2, [r3, #12]
 8017fe6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017ff0:	d13c      	bne.n	801806c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ff2:	4b20      	ldr	r3, [pc, #128]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8017ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ff6:	4a1f      	ldr	r2, [pc, #124]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8017ff8:	f043 0301 	orr.w	r3, r3, #1
 8017ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8017ffe:	4b1d      	ldr	r3, [pc, #116]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018002:	f003 0301 	and.w	r3, r3, #1
 8018006:	613b      	str	r3, [r7, #16]
 8018008:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801800a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801800e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018010:	2302      	movs	r3, #2
 8018012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018014:	2300      	movs	r3, #0
 8018016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018018:	2303      	movs	r3, #3
 801801a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801801c:	230a      	movs	r3, #10
 801801e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018020:	f107 0314 	add.w	r3, r7, #20
 8018024:	4619      	mov	r1, r3
 8018026:	4814      	ldr	r0, [pc, #80]	; (8018078 <HAL_HCD_MspInit+0xa8>)
 8018028:	f7ef fe28 	bl	8007c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801802c:	4b11      	ldr	r3, [pc, #68]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 801802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018030:	4a10      	ldr	r2, [pc, #64]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018036:	6353      	str	r3, [r2, #52]	; 0x34
 8018038:	4b0e      	ldr	r3, [pc, #56]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 801803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801803c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018040:	60fb      	str	r3, [r7, #12]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	4b0b      	ldr	r3, [pc, #44]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018048:	4a0a      	ldr	r2, [pc, #40]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 801804a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801804e:	6453      	str	r3, [r2, #68]	; 0x44
 8018050:	4b08      	ldr	r3, [pc, #32]	; (8018074 <HAL_HCD_MspInit+0xa4>)
 8018052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018058:	60bb      	str	r3, [r7, #8]
 801805a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801805c:	2200      	movs	r2, #0
 801805e:	2105      	movs	r1, #5
 8018060:	2043      	movs	r0, #67	; 0x43
 8018062:	f7ee fb71 	bl	8006748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018066:	2043      	movs	r0, #67	; 0x43
 8018068:	f7ee fb8a 	bl	8006780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801806c:	bf00      	nop
 801806e:	3728      	adds	r7, #40	; 0x28
 8018070:	46bd      	mov	sp, r7
 8018072:	bd80      	pop	{r7, pc}
 8018074:	40023800 	.word	0x40023800
 8018078:	40020000 	.word	0x40020000

0801807c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801808a:	4618      	mov	r0, r3
 801808c:	f7fc f9bf 	bl	801440e <USBH_LL_IncTimer>
}
 8018090:	bf00      	nop
 8018092:	3708      	adds	r7, #8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}

08018098 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b082      	sub	sp, #8
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80180a6:	4618      	mov	r0, r3
 80180a8:	f7fc fa03 	bl	80144b2 <USBH_LL_Connect>
}
 80180ac:	bf00      	nop
 80180ae:	3708      	adds	r7, #8
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}

080180b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fc fa18 	bl	80144f8 <USBH_LL_Disconnect>
}
 80180c8:	bf00      	nop
 80180ca:	3708      	adds	r7, #8
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}

080180d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b082      	sub	sp, #8
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
 80180d8:	460b      	mov	r3, r1
 80180da:	70fb      	strb	r3, [r7, #3]
 80180dc:	4613      	mov	r3, r2
 80180de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7fc fa4d 	bl	8014586 <USBH_LL_NotifyURBChange>
#endif
}
 80180ec:	bf00      	nop
 80180ee:	3708      	adds	r7, #8
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}

080180f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018102:	4618      	mov	r0, r3
 8018104:	f7fc f9ad 	bl	8014462 <USBH_LL_PortEnabled>
}
 8018108:	bf00      	nop
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b082      	sub	sp, #8
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801811e:	4618      	mov	r0, r3
 8018120:	f7fc f9b9 	bl	8014496 <USBH_LL_PortDisabled>
}
 8018124:	bf00      	nop
 8018126:	3708      	adds	r7, #8
 8018128:	46bd      	mov	sp, r7
 801812a:	bd80      	pop	{r7, pc}

0801812c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801813a:	2b01      	cmp	r3, #1
 801813c:	d12a      	bne.n	8018194 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801813e:	4a18      	ldr	r2, [pc, #96]	; (80181a0 <USBH_LL_Init+0x74>)
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	4a15      	ldr	r2, [pc, #84]	; (80181a0 <USBH_LL_Init+0x74>)
 801814a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801814e:	4b14      	ldr	r3, [pc, #80]	; (80181a0 <USBH_LL_Init+0x74>)
 8018150:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018154:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8018156:	4b12      	ldr	r3, [pc, #72]	; (80181a0 <USBH_LL_Init+0x74>)
 8018158:	2208      	movs	r2, #8
 801815a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801815c:	4b10      	ldr	r3, [pc, #64]	; (80181a0 <USBH_LL_Init+0x74>)
 801815e:	2201      	movs	r2, #1
 8018160:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018162:	4b0f      	ldr	r3, [pc, #60]	; (80181a0 <USBH_LL_Init+0x74>)
 8018164:	2200      	movs	r2, #0
 8018166:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8018168:	4b0d      	ldr	r3, [pc, #52]	; (80181a0 <USBH_LL_Init+0x74>)
 801816a:	2202      	movs	r2, #2
 801816c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801816e:	4b0c      	ldr	r3, [pc, #48]	; (80181a0 <USBH_LL_Init+0x74>)
 8018170:	2200      	movs	r2, #0
 8018172:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8018174:	480a      	ldr	r0, [pc, #40]	; (80181a0 <USBH_LL_Init+0x74>)
 8018176:	f7f0 f8a8 	bl	80082ca <HAL_HCD_Init>
 801817a:	4603      	mov	r3, r0
 801817c:	2b00      	cmp	r3, #0
 801817e:	d001      	beq.n	8018184 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8018180:	f7ea fd3e 	bl	8002c00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018184:	4806      	ldr	r0, [pc, #24]	; (80181a0 <USBH_LL_Init+0x74>)
 8018186:	f7f0 fc85 	bl	8008a94 <HAL_HCD_GetCurrentFrame>
 801818a:	4603      	mov	r3, r0
 801818c:	4619      	mov	r1, r3
 801818e:	6878      	ldr	r0, [r7, #4]
 8018190:	f7fc f92e 	bl	80143f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018194:	2300      	movs	r3, #0
}
 8018196:	4618      	mov	r0, r3
 8018198:	3708      	adds	r7, #8
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	2004c6bc 	.word	0x2004c6bc

080181a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b084      	sub	sp, #16
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181ac:	2300      	movs	r3, #0
 80181ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80181b0:	2300      	movs	r3, #0
 80181b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7f0 fbf4 	bl	80089a8 <HAL_HCD_Start>
 80181c0:	4603      	mov	r3, r0
 80181c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80181c4:	7bfb      	ldrb	r3, [r7, #15]
 80181c6:	4618      	mov	r0, r3
 80181c8:	f000 f95c 	bl	8018484 <USBH_Get_USB_Status>
 80181cc:	4603      	mov	r3, r0
 80181ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80181d2:	4618      	mov	r0, r3
 80181d4:	3710      	adds	r7, #16
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}

080181da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80181da:	b580      	push	{r7, lr}
 80181dc:	b084      	sub	sp, #16
 80181de:	af00      	add	r7, sp, #0
 80181e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181e2:	2300      	movs	r3, #0
 80181e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80181e6:	2300      	movs	r3, #0
 80181e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80181f0:	4618      	mov	r0, r3
 80181f2:	f7f0 fbfc 	bl	80089ee <HAL_HCD_Stop>
 80181f6:	4603      	mov	r3, r0
 80181f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80181fa:	7bfb      	ldrb	r3, [r7, #15]
 80181fc:	4618      	mov	r0, r3
 80181fe:	f000 f941 	bl	8018484 <USBH_Get_USB_Status>
 8018202:	4603      	mov	r3, r0
 8018204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018206:	7bbb      	ldrb	r3, [r7, #14]
}
 8018208:	4618      	mov	r0, r3
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}

08018210 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b084      	sub	sp, #16
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018218:	2301      	movs	r3, #1
 801821a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018222:	4618      	mov	r0, r3
 8018224:	f7f0 fc44 	bl	8008ab0 <HAL_HCD_GetCurrentSpeed>
 8018228:	4603      	mov	r3, r0
 801822a:	2b02      	cmp	r3, #2
 801822c:	d00c      	beq.n	8018248 <USBH_LL_GetSpeed+0x38>
 801822e:	2b02      	cmp	r3, #2
 8018230:	d80d      	bhi.n	801824e <USBH_LL_GetSpeed+0x3e>
 8018232:	2b00      	cmp	r3, #0
 8018234:	d002      	beq.n	801823c <USBH_LL_GetSpeed+0x2c>
 8018236:	2b01      	cmp	r3, #1
 8018238:	d003      	beq.n	8018242 <USBH_LL_GetSpeed+0x32>
 801823a:	e008      	b.n	801824e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801823c:	2300      	movs	r3, #0
 801823e:	73fb      	strb	r3, [r7, #15]
    break;
 8018240:	e008      	b.n	8018254 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8018242:	2301      	movs	r3, #1
 8018244:	73fb      	strb	r3, [r7, #15]
    break;
 8018246:	e005      	b.n	8018254 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8018248:	2302      	movs	r3, #2
 801824a:	73fb      	strb	r3, [r7, #15]
    break;
 801824c:	e002      	b.n	8018254 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801824e:	2301      	movs	r3, #1
 8018250:	73fb      	strb	r3, [r7, #15]
    break;
 8018252:	bf00      	nop
  }
  return  speed;
 8018254:	7bfb      	ldrb	r3, [r7, #15]
}
 8018256:	4618      	mov	r0, r3
 8018258:	3710      	adds	r7, #16
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}

0801825e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801825e:	b580      	push	{r7, lr}
 8018260:	b084      	sub	sp, #16
 8018262:	af00      	add	r7, sp, #0
 8018264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018266:	2300      	movs	r3, #0
 8018268:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801826a:	2300      	movs	r3, #0
 801826c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018274:	4618      	mov	r0, r3
 8018276:	f7f0 fbd7 	bl	8008a28 <HAL_HCD_ResetPort>
 801827a:	4603      	mov	r3, r0
 801827c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801827e:	7bfb      	ldrb	r3, [r7, #15]
 8018280:	4618      	mov	r0, r3
 8018282:	f000 f8ff 	bl	8018484 <USBH_Get_USB_Status>
 8018286:	4603      	mov	r3, r0
 8018288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801828a:	7bbb      	ldrb	r3, [r7, #14]
}
 801828c:	4618      	mov	r0, r3
 801828e:	3710      	adds	r7, #16
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b082      	sub	sp, #8
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	460b      	mov	r3, r1
 801829e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80182a6:	78fa      	ldrb	r2, [r7, #3]
 80182a8:	4611      	mov	r1, r2
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7f0 fbde 	bl	8008a6c <HAL_HCD_HC_GetXferCount>
 80182b0:	4603      	mov	r3, r0
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3708      	adds	r7, #8
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}

080182ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80182ba:	b590      	push	{r4, r7, lr}
 80182bc:	b089      	sub	sp, #36	; 0x24
 80182be:	af04      	add	r7, sp, #16
 80182c0:	6078      	str	r0, [r7, #4]
 80182c2:	4608      	mov	r0, r1
 80182c4:	4611      	mov	r1, r2
 80182c6:	461a      	mov	r2, r3
 80182c8:	4603      	mov	r3, r0
 80182ca:	70fb      	strb	r3, [r7, #3]
 80182cc:	460b      	mov	r3, r1
 80182ce:	70bb      	strb	r3, [r7, #2]
 80182d0:	4613      	mov	r3, r2
 80182d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182d4:	2300      	movs	r3, #0
 80182d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80182d8:	2300      	movs	r3, #0
 80182da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80182e2:	787c      	ldrb	r4, [r7, #1]
 80182e4:	78ba      	ldrb	r2, [r7, #2]
 80182e6:	78f9      	ldrb	r1, [r7, #3]
 80182e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80182ea:	9302      	str	r3, [sp, #8]
 80182ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80182f0:	9301      	str	r3, [sp, #4]
 80182f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80182f6:	9300      	str	r3, [sp, #0]
 80182f8:	4623      	mov	r3, r4
 80182fa:	f7f0 f848 	bl	800838e <HAL_HCD_HC_Init>
 80182fe:	4603      	mov	r3, r0
 8018300:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018302:	7bfb      	ldrb	r3, [r7, #15]
 8018304:	4618      	mov	r0, r3
 8018306:	f000 f8bd 	bl	8018484 <USBH_Get_USB_Status>
 801830a:	4603      	mov	r3, r0
 801830c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801830e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018310:	4618      	mov	r0, r3
 8018312:	3714      	adds	r7, #20
 8018314:	46bd      	mov	sp, r7
 8018316:	bd90      	pop	{r4, r7, pc}

08018318 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b084      	sub	sp, #16
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
 8018320:	460b      	mov	r3, r1
 8018322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018324:	2300      	movs	r3, #0
 8018326:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018328:	2300      	movs	r3, #0
 801832a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018332:	78fa      	ldrb	r2, [r7, #3]
 8018334:	4611      	mov	r1, r2
 8018336:	4618      	mov	r0, r3
 8018338:	f7f0 f8b8 	bl	80084ac <HAL_HCD_HC_Halt>
 801833c:	4603      	mov	r3, r0
 801833e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018340:	7bfb      	ldrb	r3, [r7, #15]
 8018342:	4618      	mov	r0, r3
 8018344:	f000 f89e 	bl	8018484 <USBH_Get_USB_Status>
 8018348:	4603      	mov	r3, r0
 801834a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801834c:	7bbb      	ldrb	r3, [r7, #14]
}
 801834e:	4618      	mov	r0, r3
 8018350:	3710      	adds	r7, #16
 8018352:	46bd      	mov	sp, r7
 8018354:	bd80      	pop	{r7, pc}

08018356 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018356:	b590      	push	{r4, r7, lr}
 8018358:	b089      	sub	sp, #36	; 0x24
 801835a:	af04      	add	r7, sp, #16
 801835c:	6078      	str	r0, [r7, #4]
 801835e:	4608      	mov	r0, r1
 8018360:	4611      	mov	r1, r2
 8018362:	461a      	mov	r2, r3
 8018364:	4603      	mov	r3, r0
 8018366:	70fb      	strb	r3, [r7, #3]
 8018368:	460b      	mov	r3, r1
 801836a:	70bb      	strb	r3, [r7, #2]
 801836c:	4613      	mov	r3, r2
 801836e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018370:	2300      	movs	r3, #0
 8018372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018374:	2300      	movs	r3, #0
 8018376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801837e:	787c      	ldrb	r4, [r7, #1]
 8018380:	78ba      	ldrb	r2, [r7, #2]
 8018382:	78f9      	ldrb	r1, [r7, #3]
 8018384:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018388:	9303      	str	r3, [sp, #12]
 801838a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801838c:	9302      	str	r3, [sp, #8]
 801838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018390:	9301      	str	r3, [sp, #4]
 8018392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	4623      	mov	r3, r4
 801839a:	f7f0 f8ab 	bl	80084f4 <HAL_HCD_HC_SubmitRequest>
 801839e:	4603      	mov	r3, r0
 80183a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80183a2:	7bfb      	ldrb	r3, [r7, #15]
 80183a4:	4618      	mov	r0, r3
 80183a6:	f000 f86d 	bl	8018484 <USBH_Get_USB_Status>
 80183aa:	4603      	mov	r3, r0
 80183ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80183b0:	4618      	mov	r0, r3
 80183b2:	3714      	adds	r7, #20
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd90      	pop	{r4, r7, pc}

080183b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	460b      	mov	r3, r1
 80183c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80183ca:	78fa      	ldrb	r2, [r7, #3]
 80183cc:	4611      	mov	r1, r2
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7f0 fb38 	bl	8008a44 <HAL_HCD_HC_GetURBState>
 80183d4:	4603      	mov	r3, r0
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	3708      	adds	r7, #8
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}

080183de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80183de:	b580      	push	{r7, lr}
 80183e0:	b082      	sub	sp, #8
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	6078      	str	r0, [r7, #4]
 80183e6:	460b      	mov	r3, r1
 80183e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80183f0:	2b01      	cmp	r3, #1
 80183f2:	d103      	bne.n	80183fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80183f4:	78fb      	ldrb	r3, [r7, #3]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f000 f870 	bl	80184dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80183fc:	20c8      	movs	r0, #200	; 0xc8
 80183fe:	f7ed fe1b 	bl	8006038 <HAL_Delay>
  return USBH_OK;
 8018402:	2300      	movs	r3, #0
}
 8018404:	4618      	mov	r0, r3
 8018406:	3708      	adds	r7, #8
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}

0801840c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801840c:	b480      	push	{r7}
 801840e:	b085      	sub	sp, #20
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	460b      	mov	r3, r1
 8018416:	70fb      	strb	r3, [r7, #3]
 8018418:	4613      	mov	r3, r2
 801841a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018422:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018424:	78fb      	ldrb	r3, [r7, #3]
 8018426:	68fa      	ldr	r2, [r7, #12]
 8018428:	212c      	movs	r1, #44	; 0x2c
 801842a:	fb01 f303 	mul.w	r3, r1, r3
 801842e:	4413      	add	r3, r2
 8018430:	333b      	adds	r3, #59	; 0x3b
 8018432:	781b      	ldrb	r3, [r3, #0]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d009      	beq.n	801844c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018438:	78fb      	ldrb	r3, [r7, #3]
 801843a:	68fa      	ldr	r2, [r7, #12]
 801843c:	212c      	movs	r1, #44	; 0x2c
 801843e:	fb01 f303 	mul.w	r3, r1, r3
 8018442:	4413      	add	r3, r2
 8018444:	3354      	adds	r3, #84	; 0x54
 8018446:	78ba      	ldrb	r2, [r7, #2]
 8018448:	701a      	strb	r2, [r3, #0]
 801844a:	e008      	b.n	801845e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801844c:	78fb      	ldrb	r3, [r7, #3]
 801844e:	68fa      	ldr	r2, [r7, #12]
 8018450:	212c      	movs	r1, #44	; 0x2c
 8018452:	fb01 f303 	mul.w	r3, r1, r3
 8018456:	4413      	add	r3, r2
 8018458:	3355      	adds	r3, #85	; 0x55
 801845a:	78ba      	ldrb	r2, [r7, #2]
 801845c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801845e:	2300      	movs	r3, #0
}
 8018460:	4618      	mov	r0, r3
 8018462:	3714      	adds	r7, #20
 8018464:	46bd      	mov	sp, r7
 8018466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846a:	4770      	bx	lr

0801846c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	f7ed fddf 	bl	8006038 <HAL_Delay>
}
 801847a:	bf00      	nop
 801847c:	3708      	adds	r7, #8
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
	...

08018484 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018484:	b480      	push	{r7}
 8018486:	b085      	sub	sp, #20
 8018488:	af00      	add	r7, sp, #0
 801848a:	4603      	mov	r3, r0
 801848c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801848e:	2300      	movs	r3, #0
 8018490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018492:	79fb      	ldrb	r3, [r7, #7]
 8018494:	2b03      	cmp	r3, #3
 8018496:	d817      	bhi.n	80184c8 <USBH_Get_USB_Status+0x44>
 8018498:	a201      	add	r2, pc, #4	; (adr r2, 80184a0 <USBH_Get_USB_Status+0x1c>)
 801849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801849e:	bf00      	nop
 80184a0:	080184b1 	.word	0x080184b1
 80184a4:	080184b7 	.word	0x080184b7
 80184a8:	080184bd 	.word	0x080184bd
 80184ac:	080184c3 	.word	0x080184c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80184b0:	2300      	movs	r3, #0
 80184b2:	73fb      	strb	r3, [r7, #15]
    break;
 80184b4:	e00b      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80184b6:	2302      	movs	r3, #2
 80184b8:	73fb      	strb	r3, [r7, #15]
    break;
 80184ba:	e008      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80184bc:	2301      	movs	r3, #1
 80184be:	73fb      	strb	r3, [r7, #15]
    break;
 80184c0:	e005      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80184c2:	2302      	movs	r3, #2
 80184c4:	73fb      	strb	r3, [r7, #15]
    break;
 80184c6:	e002      	b.n	80184ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80184c8:	2302      	movs	r3, #2
 80184ca:	73fb      	strb	r3, [r7, #15]
    break;
 80184cc:	bf00      	nop
  }
  return usb_status;
 80184ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80184d0:	4618      	mov	r0, r3
 80184d2:	3714      	adds	r7, #20
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr

080184dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b084      	sub	sp, #16
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	4603      	mov	r3, r0
 80184e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80184e6:	79fb      	ldrb	r3, [r7, #7]
 80184e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80184ea:	79fb      	ldrb	r3, [r7, #7]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d102      	bne.n	80184f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80184f0:	2301      	movs	r3, #1
 80184f2:	73fb      	strb	r3, [r7, #15]
 80184f4:	e001      	b.n	80184fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80184f6:	2300      	movs	r3, #0
 80184f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80184fa:	7bfb      	ldrb	r3, [r7, #15]
 80184fc:	461a      	mov	r2, r3
 80184fe:	2120      	movs	r1, #32
 8018500:	4803      	ldr	r0, [pc, #12]	; (8018510 <MX_DriverVbusFS+0x34>)
 8018502:	f7ef fe8b 	bl	800821c <HAL_GPIO_WritePin>
}
 8018506:	bf00      	nop
 8018508:	3710      	adds	r7, #16
 801850a:	46bd      	mov	sp, r7
 801850c:	bd80      	pop	{r7, pc}
 801850e:	bf00      	nop
 8018510:	40020c00 	.word	0x40020c00

08018514 <arm_rfft_fast_init_f32>:
 8018514:	084b      	lsrs	r3, r1, #1
 8018516:	2b80      	cmp	r3, #128	; 0x80
 8018518:	b430      	push	{r4, r5}
 801851a:	8201      	strh	r1, [r0, #16]
 801851c:	8003      	strh	r3, [r0, #0]
 801851e:	d070      	beq.n	8018602 <arm_rfft_fast_init_f32+0xee>
 8018520:	d916      	bls.n	8018550 <arm_rfft_fast_init_f32+0x3c>
 8018522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018526:	d05f      	beq.n	80185e8 <arm_rfft_fast_init_f32+0xd4>
 8018528:	d936      	bls.n	8018598 <arm_rfft_fast_init_f32+0x84>
 801852a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801852e:	d026      	beq.n	801857e <arm_rfft_fast_init_f32+0x6a>
 8018530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018534:	d112      	bne.n	801855c <arm_rfft_fast_init_f32+0x48>
 8018536:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 801853a:	4c38      	ldr	r4, [pc, #224]	; (801861c <arm_rfft_fast_init_f32+0x108>)
 801853c:	4938      	ldr	r1, [pc, #224]	; (8018620 <arm_rfft_fast_init_f32+0x10c>)
 801853e:	2300      	movs	r3, #0
 8018540:	4a38      	ldr	r2, [pc, #224]	; (8018624 <arm_rfft_fast_init_f32+0x110>)
 8018542:	8185      	strh	r5, [r0, #12]
 8018544:	6084      	str	r4, [r0, #8]
 8018546:	6041      	str	r1, [r0, #4]
 8018548:	6142      	str	r2, [r0, #20]
 801854a:	4618      	mov	r0, r3
 801854c:	bc30      	pop	{r4, r5}
 801854e:	4770      	bx	lr
 8018550:	2b20      	cmp	r3, #32
 8018552:	d031      	beq.n	80185b8 <arm_rfft_fast_init_f32+0xa4>
 8018554:	2b40      	cmp	r3, #64	; 0x40
 8018556:	d006      	beq.n	8018566 <arm_rfft_fast_init_f32+0x52>
 8018558:	2b10      	cmp	r3, #16
 801855a:	d039      	beq.n	80185d0 <arm_rfft_fast_init_f32+0xbc>
 801855c:	f04f 33ff 	mov.w	r3, #4294967295
 8018560:	bc30      	pop	{r4, r5}
 8018562:	4618      	mov	r0, r3
 8018564:	4770      	bx	lr
 8018566:	2538      	movs	r5, #56	; 0x38
 8018568:	4c2f      	ldr	r4, [pc, #188]	; (8018628 <arm_rfft_fast_init_f32+0x114>)
 801856a:	4930      	ldr	r1, [pc, #192]	; (801862c <arm_rfft_fast_init_f32+0x118>)
 801856c:	2300      	movs	r3, #0
 801856e:	4a30      	ldr	r2, [pc, #192]	; (8018630 <arm_rfft_fast_init_f32+0x11c>)
 8018570:	8185      	strh	r5, [r0, #12]
 8018572:	6084      	str	r4, [r0, #8]
 8018574:	6041      	str	r1, [r0, #4]
 8018576:	6142      	str	r2, [r0, #20]
 8018578:	4618      	mov	r0, r3
 801857a:	bc30      	pop	{r4, r5}
 801857c:	4770      	bx	lr
 801857e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8018582:	4c2c      	ldr	r4, [pc, #176]	; (8018634 <arm_rfft_fast_init_f32+0x120>)
 8018584:	492c      	ldr	r1, [pc, #176]	; (8018638 <arm_rfft_fast_init_f32+0x124>)
 8018586:	2300      	movs	r3, #0
 8018588:	4a2c      	ldr	r2, [pc, #176]	; (801863c <arm_rfft_fast_init_f32+0x128>)
 801858a:	8185      	strh	r5, [r0, #12]
 801858c:	6084      	str	r4, [r0, #8]
 801858e:	6041      	str	r1, [r0, #4]
 8018590:	6142      	str	r2, [r0, #20]
 8018592:	4618      	mov	r0, r3
 8018594:	bc30      	pop	{r4, r5}
 8018596:	4770      	bx	lr
 8018598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801859c:	d1de      	bne.n	801855c <arm_rfft_fast_init_f32+0x48>
 801859e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80185a2:	4c27      	ldr	r4, [pc, #156]	; (8018640 <arm_rfft_fast_init_f32+0x12c>)
 80185a4:	4927      	ldr	r1, [pc, #156]	; (8018644 <arm_rfft_fast_init_f32+0x130>)
 80185a6:	2300      	movs	r3, #0
 80185a8:	4a27      	ldr	r2, [pc, #156]	; (8018648 <arm_rfft_fast_init_f32+0x134>)
 80185aa:	8185      	strh	r5, [r0, #12]
 80185ac:	6084      	str	r4, [r0, #8]
 80185ae:	6041      	str	r1, [r0, #4]
 80185b0:	6142      	str	r2, [r0, #20]
 80185b2:	4618      	mov	r0, r3
 80185b4:	bc30      	pop	{r4, r5}
 80185b6:	4770      	bx	lr
 80185b8:	2530      	movs	r5, #48	; 0x30
 80185ba:	4c24      	ldr	r4, [pc, #144]	; (801864c <arm_rfft_fast_init_f32+0x138>)
 80185bc:	4924      	ldr	r1, [pc, #144]	; (8018650 <arm_rfft_fast_init_f32+0x13c>)
 80185be:	2300      	movs	r3, #0
 80185c0:	4a24      	ldr	r2, [pc, #144]	; (8018654 <arm_rfft_fast_init_f32+0x140>)
 80185c2:	8185      	strh	r5, [r0, #12]
 80185c4:	6084      	str	r4, [r0, #8]
 80185c6:	6041      	str	r1, [r0, #4]
 80185c8:	6142      	str	r2, [r0, #20]
 80185ca:	4618      	mov	r0, r3
 80185cc:	bc30      	pop	{r4, r5}
 80185ce:	4770      	bx	lr
 80185d0:	2514      	movs	r5, #20
 80185d2:	4c21      	ldr	r4, [pc, #132]	; (8018658 <arm_rfft_fast_init_f32+0x144>)
 80185d4:	4921      	ldr	r1, [pc, #132]	; (801865c <arm_rfft_fast_init_f32+0x148>)
 80185d6:	2300      	movs	r3, #0
 80185d8:	4a21      	ldr	r2, [pc, #132]	; (8018660 <arm_rfft_fast_init_f32+0x14c>)
 80185da:	8185      	strh	r5, [r0, #12]
 80185dc:	6084      	str	r4, [r0, #8]
 80185de:	6041      	str	r1, [r0, #4]
 80185e0:	6142      	str	r2, [r0, #20]
 80185e2:	4618      	mov	r0, r3
 80185e4:	bc30      	pop	{r4, r5}
 80185e6:	4770      	bx	lr
 80185e8:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80185ec:	4c1d      	ldr	r4, [pc, #116]	; (8018664 <arm_rfft_fast_init_f32+0x150>)
 80185ee:	491e      	ldr	r1, [pc, #120]	; (8018668 <arm_rfft_fast_init_f32+0x154>)
 80185f0:	2300      	movs	r3, #0
 80185f2:	4a1e      	ldr	r2, [pc, #120]	; (801866c <arm_rfft_fast_init_f32+0x158>)
 80185f4:	8185      	strh	r5, [r0, #12]
 80185f6:	6084      	str	r4, [r0, #8]
 80185f8:	6041      	str	r1, [r0, #4]
 80185fa:	6142      	str	r2, [r0, #20]
 80185fc:	4618      	mov	r0, r3
 80185fe:	bc30      	pop	{r4, r5}
 8018600:	4770      	bx	lr
 8018602:	25d0      	movs	r5, #208	; 0xd0
 8018604:	4c1a      	ldr	r4, [pc, #104]	; (8018670 <arm_rfft_fast_init_f32+0x15c>)
 8018606:	491b      	ldr	r1, [pc, #108]	; (8018674 <arm_rfft_fast_init_f32+0x160>)
 8018608:	2300      	movs	r3, #0
 801860a:	4a1b      	ldr	r2, [pc, #108]	; (8018678 <arm_rfft_fast_init_f32+0x164>)
 801860c:	8185      	strh	r5, [r0, #12]
 801860e:	6084      	str	r4, [r0, #8]
 8018610:	6041      	str	r1, [r0, #4]
 8018612:	6142      	str	r2, [r0, #20]
 8018614:	4618      	mov	r0, r3
 8018616:	bc30      	pop	{r4, r5}
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop
 801861c:	0802bc9c 	.word	0x0802bc9c
 8018620:	0801ce94 	.word	0x0801ce94
 8018624:	08023004 	.word	0x08023004
 8018628:	08020f94 	.word	0x08020f94
 801862c:	0802da5c 	.word	0x0802da5c
 8018630:	0802ff4c 	.word	0x0802ff4c
 8018634:	08029984 	.word	0x08029984
 8018638:	08027884 	.word	0x08027884
 801863c:	08021004 	.word	0x08021004
 8018640:	0802fbdc 	.word	0x0802fbdc
 8018644:	08027004 	.word	0x08027004
 8018648:	0802dc5c 	.word	0x0802dc5c
 801864c:	0802a83c 	.word	0x0802a83c
 8018650:	08029884 	.word	0x08029884
 8018654:	08020e94 	.word	0x08020e94
 8018658:	0802a794 	.word	0x0802a794
 801865c:	08027804 	.word	0x08027804
 8018660:	0802a7bc 	.word	0x0802a7bc
 8018664:	0802e45c 	.word	0x0802e45c
 8018668:	0802ac9c 	.word	0x0802ac9c
 801866c:	0802e7dc 	.word	0x0802e7dc
 8018670:	0803014c 	.word	0x0803014c
 8018674:	0802a89c 	.word	0x0802a89c
 8018678:	0802f7dc 	.word	0x0802f7dc

0801867c <arm_rfft_fast_f32>:
 801867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018680:	8a05      	ldrh	r5, [r0, #16]
 8018682:	4606      	mov	r6, r0
 8018684:	4617      	mov	r7, r2
 8018686:	460c      	mov	r4, r1
 8018688:	086d      	lsrs	r5, r5, #1
 801868a:	8005      	strh	r5, [r0, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d15e      	bne.n	801874e <arm_rfft_fast_f32+0xd2>
 8018690:	461a      	mov	r2, r3
 8018692:	2301      	movs	r3, #1
 8018694:	f000 fbde 	bl	8018e54 <arm_cfft_f32>
 8018698:	edd4 7a00 	vldr	s15, [r4]
 801869c:	ed94 7a01 	vldr	s14, [r4, #4]
 80186a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80186a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80186a8:	8832      	ldrh	r2, [r6, #0]
 80186aa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80186ae:	6975      	ldr	r5, [r6, #20]
 80186b0:	3a01      	subs	r2, #1
 80186b2:	eeb0 3a46 	vmov.f32	s6, s12
 80186b6:	3510      	adds	r5, #16
 80186b8:	f107 0610 	add.w	r6, r7, #16
 80186bc:	ee77 6a87 	vadd.f32	s13, s15, s14
 80186c0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 80186c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80186c8:	f104 0310 	add.w	r3, r4, #16
 80186cc:	3808      	subs	r0, #8
 80186ce:	ee26 7a86 	vmul.f32	s14, s13, s12
 80186d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80186d6:	ed87 7a00 	vstr	s14, [r7]
 80186da:	edc7 7a01 	vstr	s15, [r7, #4]
 80186de:	ed90 7a02 	vldr	s14, [r0, #8]
 80186e2:	3a01      	subs	r2, #1
 80186e4:	ed53 6a02 	vldr	s13, [r3, #-8]
 80186e8:	f1a0 0008 	sub.w	r0, r0, #8
 80186ec:	ed15 6a02 	vldr	s12, [r5, #-8]
 80186f0:	f103 0308 	add.w	r3, r3, #8
 80186f4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80186f8:	edd0 3a05 	vldr	s7, [r0, #20]
 80186fc:	ed13 5a03 	vldr	s10, [r3, #-12]
 8018700:	ee77 4a26 	vadd.f32	s9, s14, s13
 8018704:	ed55 5a01 	vldr	s11, [r5, #-4]
 8018708:	f106 0608 	add.w	r6, r6, #8
 801870c:	ee66 6a27 	vmul.f32	s13, s12, s15
 8018710:	f105 0508 	add.w	r5, r5, #8
 8018714:	ee33 4a85 	vadd.f32	s8, s7, s10
 8018718:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801871c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8018720:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018724:	ee26 6a04 	vmul.f32	s12, s12, s8
 8018728:	ee77 7a05 	vadd.f32	s15, s14, s10
 801872c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018730:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018734:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8018738:	ee67 7a83 	vmul.f32	s15, s15, s6
 801873c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018740:	ed46 7a03 	vstr	s15, [r6, #-12]
 8018744:	ed06 7a04 	vstr	s14, [r6, #-16]
 8018748:	d1c9      	bne.n	80186de <arm_rfft_fast_f32+0x62>
 801874a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801874e:	edd1 7a00 	vldr	s15, [r1]
 8018752:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8018756:	edd1 6a01 	vldr	s13, [r1, #4]
 801875a:	1e68      	subs	r0, r5, #1
 801875c:	6975      	ldr	r5, [r6, #20]
 801875e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018762:	00c1      	lsls	r1, r0, #3
 8018764:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018768:	ee27 7a23 	vmul.f32	s14, s14, s7
 801876c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8018770:	ed82 7a00 	vstr	s14, [r2]
 8018774:	edc2 7a01 	vstr	s15, [r2, #4]
 8018778:	b3e0      	cbz	r0, 80187f4 <arm_rfft_fast_f32+0x178>
 801877a:	3908      	subs	r1, #8
 801877c:	f104 0210 	add.w	r2, r4, #16
 8018780:	3510      	adds	r5, #16
 8018782:	440c      	add	r4, r1
 8018784:	f107 0110 	add.w	r1, r7, #16
 8018788:	ed94 7a02 	vldr	s14, [r4, #8]
 801878c:	3801      	subs	r0, #1
 801878e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8018792:	f1a4 0408 	sub.w	r4, r4, #8
 8018796:	ed15 6a02 	vldr	s12, [r5, #-8]
 801879a:	f102 0208 	add.w	r2, r2, #8
 801879e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80187a2:	ed94 4a05 	vldr	s8, [r4, #20]
 80187a6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80187aa:	ee77 6a26 	vadd.f32	s13, s14, s13
 80187ae:	ed55 5a01 	vldr	s11, [r5, #-4]
 80187b2:	f101 0108 	add.w	r1, r1, #8
 80187b6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80187ba:	f105 0508 	add.w	r5, r5, #8
 80187be:	ee74 4a05 	vadd.f32	s9, s8, s10
 80187c2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80187c6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80187ca:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80187ce:	ee26 6a24 	vmul.f32	s12, s12, s9
 80187d2:	ee77 7a05 	vadd.f32	s15, s14, s10
 80187d6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80187da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80187de:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80187e2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80187e6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80187ea:	ed41 7a03 	vstr	s15, [r1, #-12]
 80187ee:	ed01 7a04 	vstr	s14, [r1, #-16]
 80187f2:	d1c9      	bne.n	8018788 <arm_rfft_fast_f32+0x10c>
 80187f4:	461a      	mov	r2, r3
 80187f6:	4639      	mov	r1, r7
 80187f8:	4630      	mov	r0, r6
 80187fa:	2301      	movs	r3, #1
 80187fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018800:	f000 bb28 	b.w	8018e54 <arm_cfft_f32>

08018804 <arm_cfft_radix8by2_f32>:
 8018804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018808:	4607      	mov	r7, r0
 801880a:	4608      	mov	r0, r1
 801880c:	ed2d 8b06 	vpush	{d8-d10}
 8018810:	f8b7 e000 	ldrh.w	lr, [r7]
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801881a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 801881e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8018822:	f000 80b0 	beq.w	8018986 <arm_cfft_radix8by2_f32+0x182>
 8018826:	008b      	lsls	r3, r1, #2
 8018828:	3210      	adds	r2, #16
 801882a:	f100 0610 	add.w	r6, r0, #16
 801882e:	f108 0510 	add.w	r5, r8, #16
 8018832:	3310      	adds	r3, #16
 8018834:	18c4      	adds	r4, r0, r3
 8018836:	4443      	add	r3, r8
 8018838:	ed55 6a04 	vldr	s13, [r5, #-16]
 801883c:	f1be 0e01 	subs.w	lr, lr, #1
 8018840:	ed56 4a04 	vldr	s9, [r6, #-16]
 8018844:	f104 0410 	add.w	r4, r4, #16
 8018848:	ed15 7a03 	vldr	s14, [r5, #-12]
 801884c:	f106 0610 	add.w	r6, r6, #16
 8018850:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8018854:	ed55 7a02 	vldr	s15, [r5, #-8]
 8018858:	ed55 2a01 	vldr	s5, [r5, #-4]
 801885c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8018860:	ed53 0a04 	vldr	s1, [r3, #-16]
 8018864:	f102 0210 	add.w	r2, r2, #16
 8018868:	ed13 5a03 	vldr	s10, [r3, #-12]
 801886c:	f105 0510 	add.w	r5, r5, #16
 8018870:	ed13 3a02 	vldr	s6, [r3, #-8]
 8018874:	f103 0310 	add.w	r3, r3, #16
 8018878:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 801887c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8018880:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8018884:	ee33 8a83 	vadd.f32	s16, s7, s6
 8018888:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 801888c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8018890:	ee34 0a06 	vadd.f32	s0, s8, s12
 8018894:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8018898:	ee76 aa87 	vadd.f32	s21, s13, s14
 801889c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80188a0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80188a4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 80188a8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80188ac:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 80188b0:	ee71 8a05 	vadd.f32	s17, s2, s10
 80188b4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80188b8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 80188bc:	ee72 9a22 	vadd.f32	s19, s4, s5
 80188c0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80188c4:	ee35 5a41 	vsub.f32	s10, s10, s2
 80188c8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 80188cc:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 80188d0:	ee36 6a44 	vsub.f32	s12, s12, s8
 80188d4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 80188d8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80188dc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 80188e0:	ee72 7a62 	vsub.f32	s15, s4, s5
 80188e4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 80188e8:	ee73 2a63 	vsub.f32	s5, s6, s7
 80188ec:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 80188f0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80188f4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80188f8:	ee24 3a84 	vmul.f32	s6, s9, s8
 80188fc:	ee27 2a26 	vmul.f32	s4, s14, s13
 8018900:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8018904:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8018908:	ee27 7a04 	vmul.f32	s14, s14, s8
 801890c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018910:	ee65 6a26 	vmul.f32	s13, s10, s13
 8018914:	ee25 5a04 	vmul.f32	s10, s10, s8
 8018918:	ee37 7a64 	vsub.f32	s14, s14, s9
 801891c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018920:	ee33 4a02 	vadd.f32	s8, s6, s4
 8018924:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8018928:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 801892c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8018930:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8018934:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8018938:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 801893c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8018940:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8018944:	ee27 4a87 	vmul.f32	s8, s15, s14
 8018948:	ee61 5a87 	vmul.f32	s11, s3, s14
 801894c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018950:	ee22 5a87 	vmul.f32	s10, s5, s14
 8018954:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018958:	ee26 6a26 	vmul.f32	s12, s12, s13
 801895c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8018960:	ee74 4a84 	vadd.f32	s9, s9, s8
 8018964:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018968:	ee35 6a46 	vsub.f32	s12, s10, s12
 801896c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018970:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8018974:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8018978:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 801897c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8018980:	f47f af5a 	bne.w	8018838 <arm_cfft_radix8by2_f32+0x34>
 8018984:	687a      	ldr	r2, [r7, #4]
 8018986:	b28c      	uxth	r4, r1
 8018988:	2302      	movs	r3, #2
 801898a:	4621      	mov	r1, r4
 801898c:	f000 fbc2 	bl	8019114 <arm_radix8_butterfly_f32>
 8018990:	4621      	mov	r1, r4
 8018992:	687a      	ldr	r2, [r7, #4]
 8018994:	4640      	mov	r0, r8
 8018996:	2302      	movs	r3, #2
 8018998:	ecbd 8b06 	vpop	{d8-d10}
 801899c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189a0:	f000 bbb8 	b.w	8019114 <arm_radix8_butterfly_f32>

080189a4 <arm_cfft_radix8by4_f32>:
 80189a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a8:	ed2d 8b06 	vpush	{d8-d10}
 80189ac:	8804      	ldrh	r4, [r0, #0]
 80189ae:	b08f      	sub	sp, #60	; 0x3c
 80189b0:	ed91 6a00 	vldr	s12, [r1]
 80189b4:	460a      	mov	r2, r1
 80189b6:	0864      	lsrs	r4, r4, #1
 80189b8:	ed91 7a01 	vldr	s14, [r1, #4]
 80189bc:	9101      	str	r1, [sp, #4]
 80189be:	00a3      	lsls	r3, r4, #2
 80189c0:	6841      	ldr	r1, [r0, #4]
 80189c2:	0864      	lsrs	r4, r4, #1
 80189c4:	900c      	str	r0, [sp, #48]	; 0x30
 80189c6:	9205      	str	r2, [sp, #20]
 80189c8:	f101 0610 	add.w	r6, r1, #16
 80189cc:	4625      	mov	r5, r4
 80189ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80189d0:	f101 0408 	add.w	r4, r1, #8
 80189d4:	9602      	str	r6, [sp, #8]
 80189d6:	9407      	str	r4, [sp, #28]
 80189d8:	18d4      	adds	r4, r2, r3
 80189da:	1eaa      	subs	r2, r5, #2
 80189dc:	f101 0518 	add.w	r5, r1, #24
 80189e0:	18e0      	adds	r0, r4, r3
 80189e2:	edd4 4a00 	vldr	s9, [r4]
 80189e6:	ed94 4a01 	vldr	s8, [r4, #4]
 80189ea:	46a6      	mov	lr, r4
 80189ec:	edd0 6a00 	vldr	s13, [r0]
 80189f0:	18c7      	adds	r7, r0, r3
 80189f2:	edd0 7a01 	vldr	s15, [r0, #4]
 80189f6:	46a0      	mov	r8, r4
 80189f8:	ee76 5a26 	vadd.f32	s11, s12, s13
 80189fc:	ed97 5a00 	vldr	s10, [r7]
 8018a00:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018a04:	4604      	mov	r4, r0
 8018a06:	9506      	str	r5, [sp, #24]
 8018a08:	4605      	mov	r5, r0
 8018a0a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8018a0e:	900a      	str	r0, [sp, #40]	; 0x28
 8018a10:	9801      	ldr	r0, [sp, #4]
 8018a12:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a1a:	ed97 3a01 	vldr	s6, [r7, #4]
 8018a1e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8018a22:	46bc      	mov	ip, r7
 8018a24:	ee76 3a84 	vadd.f32	s7, s13, s8
 8018a28:	9704      	str	r7, [sp, #16]
 8018a2a:	ee36 7a44 	vsub.f32	s14, s12, s8
 8018a2e:	f8cd e00c 	str.w	lr, [sp, #12]
 8018a32:	ee12 9a90 	vmov	r9, s5
 8018a36:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8018a3a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8018a3e:	1f3e      	subs	r6, r7, #4
 8018a40:	f840 9b08 	str.w	r9, [r0], #8
 8018a44:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8018a48:	edde 2a01 	vldr	s5, [lr, #4]
 8018a4c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8018a50:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8018a54:	eddc 4a01 	vldr	s9, [ip, #4]
 8018a58:	ee36 6a22 	vadd.f32	s12, s12, s5
 8018a5c:	9001      	str	r0, [sp, #4]
 8018a5e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018a62:	9805      	ldr	r0, [sp, #20]
 8018a64:	ee13 9a90 	vmov	r9, s7
 8018a68:	ee37 7a43 	vsub.f32	s14, s14, s6
 8018a6c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8018a70:	f1ae 0704 	sub.w	r7, lr, #4
 8018a74:	ee74 4a05 	vadd.f32	s9, s8, s10
 8018a78:	ee76 6a83 	vadd.f32	s13, s13, s6
 8018a7c:	ed80 6a01 	vstr	s12, [r0, #4]
 8018a80:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8018a84:	f848 9b08 	str.w	r9, [r8], #8
 8018a88:	edce 4a01 	vstr	s9, [lr, #4]
 8018a8c:	ee15 ea90 	vmov	lr, s11
 8018a90:	f844 eb08 	str.w	lr, [r4], #8
 8018a94:	ee16 ea90 	vmov	lr, s13
 8018a98:	9408      	str	r4, [sp, #32]
 8018a9a:	462c      	mov	r4, r5
 8018a9c:	ed85 7a01 	vstr	s14, [r5, #4]
 8018aa0:	9d04      	ldr	r5, [sp, #16]
 8018aa2:	f84c eb08 	str.w	lr, [ip], #8
 8018aa6:	edc5 7a01 	vstr	s15, [r5, #4]
 8018aaa:	0855      	lsrs	r5, r2, #1
 8018aac:	9509      	str	r5, [sp, #36]	; 0x24
 8018aae:	f000 8130 	beq.w	8018d12 <arm_cfft_radix8by4_f32+0x36e>
 8018ab2:	9805      	ldr	r0, [sp, #20]
 8018ab4:	3b08      	subs	r3, #8
 8018ab6:	46ab      	mov	fp, r5
 8018ab8:	f1a4 020c 	sub.w	r2, r4, #12
 8018abc:	f100 0510 	add.w	r5, r0, #16
 8018ac0:	f101 0920 	add.w	r9, r1, #32
 8018ac4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8018ac8:	f8dd a008 	ldr.w	sl, [sp, #8]
 8018acc:	4433      	add	r3, r6
 8018ace:	3410      	adds	r4, #16
 8018ad0:	4660      	mov	r0, ip
 8018ad2:	4641      	mov	r1, r8
 8018ad4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8018ad8:	ed54 6a02 	vldr	s13, [r4, #-8]
 8018adc:	f1bb 0b01 	subs.w	fp, fp, #1
 8018ae0:	ed55 5a02 	vldr	s11, [r5, #-8]
 8018ae4:	f10a 0a08 	add.w	sl, sl, #8
 8018ae8:	edd1 7a00 	vldr	s15, [r1]
 8018aec:	f105 0508 	add.w	r5, r5, #8
 8018af0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8018af4:	edd0 2a00 	vldr	s5, [r0]
 8018af8:	ed14 7a01 	vldr	s14, [r4, #-4]
 8018afc:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8018b00:	ed55 6a03 	vldr	s13, [r5, #-12]
 8018b04:	f1a2 0208 	sub.w	r2, r2, #8
 8018b08:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8018b0c:	ed90 2a01 	vldr	s4, [r0, #4]
 8018b10:	ee36 5a87 	vadd.f32	s10, s13, s14
 8018b14:	ed91 6a01 	vldr	s12, [r1, #4]
 8018b18:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018b1c:	f109 0910 	add.w	r9, r9, #16
 8018b20:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8018b24:	f104 0408 	add.w	r4, r4, #8
 8018b28:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8018b2c:	f10e 0e18 	add.w	lr, lr, #24
 8018b30:	ee37 3a67 	vsub.f32	s6, s14, s15
 8018b34:	f1a3 0308 	sub.w	r3, r3, #8
 8018b38:	ed45 6a04 	vstr	s13, [r5, #-16]
 8018b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b40:	edd1 6a01 	vldr	s13, [r1, #4]
 8018b44:	ee75 1a86 	vadd.f32	s3, s11, s12
 8018b48:	edd0 4a01 	vldr	s9, [r0, #4]
 8018b4c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8018b50:	ee75 6a26 	vadd.f32	s13, s10, s13
 8018b54:	ee35 5a46 	vsub.f32	s10, s10, s12
 8018b58:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8018b5c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018b60:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8018b64:	ee35 5a42 	vsub.f32	s10, s10, s4
 8018b68:	ed45 6a03 	vstr	s13, [r5, #-12]
 8018b6c:	ee36 2a02 	vadd.f32	s4, s12, s4
 8018b70:	edd6 7a00 	vldr	s15, [r6]
 8018b74:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8018b78:	ed97 1a00 	vldr	s2, [r7]
 8018b7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018b80:	ed92 8a04 	vldr	s16, [r2, #16]
 8018b84:	ee71 8a27 	vadd.f32	s17, s2, s15
 8018b88:	ed93 aa04 	vldr	s20, [r3, #16]
 8018b8c:	ed16 7a01 	vldr	s14, [r6, #-4]
 8018b90:	ee71 7a67 	vsub.f32	s15, s2, s15
 8018b94:	ed57 0a01 	vldr	s1, [r7, #-4]
 8018b98:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8018b9c:	ee38 6a88 	vadd.f32	s12, s17, s16
 8018ba0:	edd3 9a03 	vldr	s19, [r3, #12]
 8018ba4:	ee30 0a87 	vadd.f32	s0, s1, s14
 8018ba8:	ed92 9a03 	vldr	s18, [r2, #12]
 8018bac:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8018bb0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8018bb4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8018bb8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8018bbc:	ee16 ca10 	vmov	ip, s12
 8018bc0:	ee30 6a49 	vsub.f32	s12, s0, s18
 8018bc4:	ee77 4a01 	vadd.f32	s9, s14, s2
 8018bc8:	f847 c908 	str.w	ip, [r7], #-8
 8018bcc:	ee34 4a29 	vadd.f32	s8, s8, s19
 8018bd0:	edd2 8a03 	vldr	s17, [r2, #12]
 8018bd4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8018bd8:	ed93 8a03 	vldr	s16, [r3, #12]
 8018bdc:	ee71 0a47 	vsub.f32	s1, s2, s14
 8018be0:	ee30 0a28 	vadd.f32	s0, s0, s17
 8018be4:	ee39 1a67 	vsub.f32	s2, s18, s15
 8018be8:	ee36 6a69 	vsub.f32	s12, s12, s19
 8018bec:	ee30 0a08 	vadd.f32	s0, s0, s16
 8018bf0:	ee75 5aca 	vsub.f32	s11, s11, s20
 8018bf4:	ed87 0a01 	vstr	s0, [r7, #4]
 8018bf8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8018bfc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8018c00:	ee21 8a80 	vmul.f32	s16, s3, s0
 8018c04:	ee23 7a26 	vmul.f32	s14, s6, s13
 8018c08:	ee64 7a26 	vmul.f32	s15, s8, s13
 8018c0c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8018c10:	ee24 4a00 	vmul.f32	s8, s8, s0
 8018c14:	ee23 3a00 	vmul.f32	s6, s6, s0
 8018c18:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8018c1c:	ee24 0a80 	vmul.f32	s0, s9, s0
 8018c20:	ee38 7a07 	vadd.f32	s14, s16, s14
 8018c24:	ee76 6a84 	vadd.f32	s13, s13, s8
 8018c28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018c2c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8018c30:	ee17 ca10 	vmov	ip, s14
 8018c34:	f841 cb08 	str.w	ip, [r1], #8
 8018c38:	ed01 3a01 	vstr	s6, [r1, #-4]
 8018c3c:	ed82 0a04 	vstr	s0, [r2, #16]
 8018c40:	edc2 6a03 	vstr	s13, [r2, #12]
 8018c44:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8018c48:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8018c4c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8018c50:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8018c54:	ee65 4a27 	vmul.f32	s9, s10, s15
 8018c58:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8018c5c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8018c60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018c64:	ee25 5a26 	vmul.f32	s10, s10, s13
 8018c68:	ee66 6a26 	vmul.f32	s13, s12, s13
 8018c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c70:	ee34 6a24 	vadd.f32	s12, s8, s9
 8018c74:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8018c78:	ee35 5a63 	vsub.f32	s10, s10, s7
 8018c7c:	ee17 ca90 	vmov	ip, s15
 8018c80:	ed04 6a04 	vstr	s12, [r4, #-16]
 8018c84:	ed04 5a03 	vstr	s10, [r4, #-12]
 8018c88:	f846 c908 	str.w	ip, [r6], #-8
 8018c8c:	edc6 6a01 	vstr	s13, [r6, #4]
 8018c90:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8018c94:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8018c98:	ee62 5a27 	vmul.f32	s11, s4, s15
 8018c9c:	ee22 6a87 	vmul.f32	s12, s5, s14
 8018ca0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018ca4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8018ca8:	ee61 6a07 	vmul.f32	s13, s2, s14
 8018cac:	ee20 7a87 	vmul.f32	s14, s1, s14
 8018cb0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8018cb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018cb8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018cbc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8018cc0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8018cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018cc8:	ee16 ca10 	vmov	ip, s12
 8018ccc:	f840 cb08 	str.w	ip, [r0], #8
 8018cd0:	ed40 2a01 	vstr	s5, [r0, #-4]
 8018cd4:	edc3 0a04 	vstr	s1, [r3, #16]
 8018cd8:	edc3 7a03 	vstr	s15, [r3, #12]
 8018cdc:	f47f aefc 	bne.w	8018ad8 <arm_cfft_radix8by4_f32+0x134>
 8018ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018ce2:	9802      	ldr	r0, [sp, #8]
 8018ce4:	00cb      	lsls	r3, r1, #3
 8018ce6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8018cea:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8018cee:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8018cf2:	4498      	add	r8, r3
 8018cf4:	449c      	add	ip, r3
 8018cf6:	9102      	str	r1, [sp, #8]
 8018cf8:	9901      	ldr	r1, [sp, #4]
 8018cfa:	4419      	add	r1, r3
 8018cfc:	9101      	str	r1, [sp, #4]
 8018cfe:	9907      	ldr	r1, [sp, #28]
 8018d00:	4419      	add	r1, r3
 8018d02:	9107      	str	r1, [sp, #28]
 8018d04:	9908      	ldr	r1, [sp, #32]
 8018d06:	4419      	add	r1, r3
 8018d08:	9b06      	ldr	r3, [sp, #24]
 8018d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d0e:	9108      	str	r1, [sp, #32]
 8018d10:	9306      	str	r3, [sp, #24]
 8018d12:	9a01      	ldr	r2, [sp, #4]
 8018d14:	2304      	movs	r3, #4
 8018d16:	9e08      	ldr	r6, [sp, #32]
 8018d18:	edd2 7a00 	vldr	s15, [r2]
 8018d1c:	ed96 7a00 	vldr	s14, [r6]
 8018d20:	edd8 2a00 	vldr	s5, [r8]
 8018d24:	ee77 5a87 	vadd.f32	s11, s15, s14
 8018d28:	ed9c 3a00 	vldr	s6, [ip]
 8018d2c:	ed92 6a01 	vldr	s12, [r2, #4]
 8018d30:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8018d34:	edd6 6a01 	vldr	s13, [r6, #4]
 8018d38:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8018d3c:	ed9c 2a01 	vldr	s4, [ip, #4]
 8018d40:	ee36 5a26 	vadd.f32	s10, s12, s13
 8018d44:	edd8 7a01 	vldr	s15, [r8, #4]
 8018d48:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018d4c:	9d02      	ldr	r5, [sp, #8]
 8018d4e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8018d52:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8018d56:	ee37 4a27 	vadd.f32	s8, s14, s15
 8018d5a:	9805      	ldr	r0, [sp, #20]
 8018d5c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8018d60:	4621      	mov	r1, r4
 8018d62:	ed82 6a00 	vstr	s12, [r2]
 8018d66:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8018d6a:	edd8 3a01 	vldr	s7, [r8, #4]
 8018d6e:	ee75 5a67 	vsub.f32	s11, s10, s15
 8018d72:	eddc 1a01 	vldr	s3, [ip, #4]
 8018d76:	ee34 4a42 	vsub.f32	s8, s8, s4
 8018d7a:	ee75 3a23 	vadd.f32	s7, s10, s7
 8018d7e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8018d82:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8018d86:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8018d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d8e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8018d92:	ed82 5a01 	vstr	s10, [r2, #4]
 8018d96:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8018d9a:	9a07      	ldr	r2, [sp, #28]
 8018d9c:	ee77 7a02 	vadd.f32	s15, s14, s4
 8018da0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8018da4:	edd2 2a00 	vldr	s5, [r2]
 8018da8:	ed92 5a01 	vldr	s10, [r2, #4]
 8018dac:	ee64 3a22 	vmul.f32	s7, s8, s5
 8018db0:	ee24 4a05 	vmul.f32	s8, s8, s10
 8018db4:	ee24 5a85 	vmul.f32	s10, s9, s10
 8018db8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8018dbc:	ee33 5a85 	vadd.f32	s10, s7, s10
 8018dc0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8018dc4:	ed88 5a00 	vstr	s10, [r8]
 8018dc8:	edc8 4a01 	vstr	s9, [r8, #4]
 8018dcc:	edd5 4a01 	vldr	s9, [r5, #4]
 8018dd0:	edd5 6a00 	vldr	s13, [r5]
 8018dd4:	9d06      	ldr	r5, [sp, #24]
 8018dd6:	ee26 5a26 	vmul.f32	s10, s12, s13
 8018dda:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018dde:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8018de2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8018de6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8018dea:	ee75 5a25 	vadd.f32	s11, s10, s11
 8018dee:	ed86 6a01 	vstr	s12, [r6, #4]
 8018df2:	edc6 5a00 	vstr	s11, [r6]
 8018df6:	edd5 5a01 	vldr	s11, [r5, #4]
 8018dfa:	edd5 6a00 	vldr	s13, [r5]
 8018dfe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018e00:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8018e04:	ee67 6a26 	vmul.f32	s13, s14, s13
 8018e08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018e0c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8018e10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018e14:	ee36 7a07 	vadd.f32	s14, s12, s14
 8018e18:	edcc 7a01 	vstr	s15, [ip, #4]
 8018e1c:	ed8c 7a00 	vstr	s14, [ip]
 8018e20:	6872      	ldr	r2, [r6, #4]
 8018e22:	f000 f977 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e26:	9803      	ldr	r0, [sp, #12]
 8018e28:	4621      	mov	r1, r4
 8018e2a:	6872      	ldr	r2, [r6, #4]
 8018e2c:	2304      	movs	r3, #4
 8018e2e:	f000 f971 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018e34:	4621      	mov	r1, r4
 8018e36:	6872      	ldr	r2, [r6, #4]
 8018e38:	2304      	movs	r3, #4
 8018e3a:	f000 f96b 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e3e:	4621      	mov	r1, r4
 8018e40:	6872      	ldr	r2, [r6, #4]
 8018e42:	2304      	movs	r3, #4
 8018e44:	9804      	ldr	r0, [sp, #16]
 8018e46:	b00f      	add	sp, #60	; 0x3c
 8018e48:	ecbd 8b06 	vpop	{d8-d10}
 8018e4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e50:	f000 b960 	b.w	8019114 <arm_radix8_butterfly_f32>

08018e54 <arm_cfft_f32>:
 8018e54:	2a01      	cmp	r2, #1
 8018e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e5a:	4606      	mov	r6, r0
 8018e5c:	4617      	mov	r7, r2
 8018e5e:	460c      	mov	r4, r1
 8018e60:	4698      	mov	r8, r3
 8018e62:	8805      	ldrh	r5, [r0, #0]
 8018e64:	d053      	beq.n	8018f0e <arm_cfft_f32+0xba>
 8018e66:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8018e6a:	d04b      	beq.n	8018f04 <arm_cfft_f32+0xb0>
 8018e6c:	d916      	bls.n	8018e9c <arm_cfft_f32+0x48>
 8018e6e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8018e72:	d01a      	beq.n	8018eaa <arm_cfft_f32+0x56>
 8018e74:	d95a      	bls.n	8018f2c <arm_cfft_f32+0xd8>
 8018e76:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8018e7a:	d043      	beq.n	8018f04 <arm_cfft_f32+0xb0>
 8018e7c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8018e80:	d105      	bne.n	8018e8e <arm_cfft_f32+0x3a>
 8018e82:	2301      	movs	r3, #1
 8018e84:	6872      	ldr	r2, [r6, #4]
 8018e86:	4629      	mov	r1, r5
 8018e88:	4620      	mov	r0, r4
 8018e8a:	f000 f943 	bl	8019114 <arm_radix8_butterfly_f32>
 8018e8e:	f1b8 0f00 	cmp.w	r8, #0
 8018e92:	d111      	bne.n	8018eb8 <arm_cfft_f32+0x64>
 8018e94:	2f01      	cmp	r7, #1
 8018e96:	d016      	beq.n	8018ec6 <arm_cfft_f32+0x72>
 8018e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e9c:	2d20      	cmp	r5, #32
 8018e9e:	d031      	beq.n	8018f04 <arm_cfft_f32+0xb0>
 8018ea0:	d948      	bls.n	8018f34 <arm_cfft_f32+0xe0>
 8018ea2:	2d40      	cmp	r5, #64	; 0x40
 8018ea4:	d0ed      	beq.n	8018e82 <arm_cfft_f32+0x2e>
 8018ea6:	2d80      	cmp	r5, #128	; 0x80
 8018ea8:	d1f1      	bne.n	8018e8e <arm_cfft_f32+0x3a>
 8018eaa:	4621      	mov	r1, r4
 8018eac:	4630      	mov	r0, r6
 8018eae:	f7ff fca9 	bl	8018804 <arm_cfft_radix8by2_f32>
 8018eb2:	f1b8 0f00 	cmp.w	r8, #0
 8018eb6:	d0ed      	beq.n	8018e94 <arm_cfft_f32+0x40>
 8018eb8:	68b2      	ldr	r2, [r6, #8]
 8018eba:	4620      	mov	r0, r4
 8018ebc:	89b1      	ldrh	r1, [r6, #12]
 8018ebe:	f7e7 f9a7 	bl	8000210 <arm_bitreversal_32>
 8018ec2:	2f01      	cmp	r7, #1
 8018ec4:	d1e8      	bne.n	8018e98 <arm_cfft_f32+0x44>
 8018ec6:	ee07 5a90 	vmov	s15, r5
 8018eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018ed2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018ed6:	2d00      	cmp	r5, #0
 8018ed8:	d0de      	beq.n	8018e98 <arm_cfft_f32+0x44>
 8018eda:	f104 0108 	add.w	r1, r4, #8
 8018ede:	2300      	movs	r3, #0
 8018ee0:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018ee4:	3301      	adds	r3, #1
 8018ee6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8018eea:	3108      	adds	r1, #8
 8018eec:	429d      	cmp	r5, r3
 8018eee:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018ef2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018ef6:	ed01 7a04 	vstr	s14, [r1, #-16]
 8018efa:	ed41 7a03 	vstr	s15, [r1, #-12]
 8018efe:	d1ef      	bne.n	8018ee0 <arm_cfft_f32+0x8c>
 8018f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f04:	4621      	mov	r1, r4
 8018f06:	4630      	mov	r0, r6
 8018f08:	f7ff fd4c 	bl	80189a4 <arm_cfft_radix8by4_f32>
 8018f0c:	e7bf      	b.n	8018e8e <arm_cfft_f32+0x3a>
 8018f0e:	b1a5      	cbz	r5, 8018f3a <arm_cfft_f32+0xe6>
 8018f10:	f101 030c 	add.w	r3, r1, #12
 8018f14:	2200      	movs	r2, #0
 8018f16:	ed53 7a02 	vldr	s15, [r3, #-8]
 8018f1a:	3201      	adds	r2, #1
 8018f1c:	3308      	adds	r3, #8
 8018f1e:	eef1 7a67 	vneg.f32	s15, s15
 8018f22:	4295      	cmp	r5, r2
 8018f24:	ed43 7a04 	vstr	s15, [r3, #-16]
 8018f28:	d1f5      	bne.n	8018f16 <arm_cfft_f32+0xc2>
 8018f2a:	e79c      	b.n	8018e66 <arm_cfft_f32+0x12>
 8018f2c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8018f30:	d0a7      	beq.n	8018e82 <arm_cfft_f32+0x2e>
 8018f32:	e7ac      	b.n	8018e8e <arm_cfft_f32+0x3a>
 8018f34:	2d10      	cmp	r5, #16
 8018f36:	d0b8      	beq.n	8018eaa <arm_cfft_f32+0x56>
 8018f38:	e7a9      	b.n	8018e8e <arm_cfft_f32+0x3a>
 8018f3a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8018f3e:	d896      	bhi.n	8018e6e <arm_cfft_f32+0x1a>
 8018f40:	e7ac      	b.n	8018e9c <arm_cfft_f32+0x48>
 8018f42:	bf00      	nop

08018f44 <arm_cmplx_mag_f32>:
 8018f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f48:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8018f4c:	b084      	sub	sp, #16
 8018f4e:	d07f      	beq.n	8019050 <arm_cmplx_mag_f32+0x10c>
 8018f50:	f100 0420 	add.w	r4, r0, #32
 8018f54:	f101 0510 	add.w	r5, r1, #16
 8018f58:	4646      	mov	r6, r8
 8018f5a:	2700      	movs	r7, #0
 8018f5c:	e05a      	b.n	8019014 <arm_cmplx_mag_f32+0xd0>
 8018f5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018f62:	eeb4 0a40 	vcmp.f32	s0, s0
 8018f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f6a:	f040 80a4 	bne.w	80190b6 <arm_cmplx_mag_f32+0x172>
 8018f6e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8018f72:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8018f76:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8018f7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018f7e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018f82:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f8e:	f2c0 808f 	blt.w	80190b0 <arm_cmplx_mag_f32+0x16c>
 8018f92:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018f96:	eeb4 0a40 	vcmp.f32	s0, s0
 8018f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9e:	f040 80af 	bne.w	8019100 <arm_cmplx_mag_f32+0x1bc>
 8018fa2:	ed05 0a03 	vstr	s0, [r5, #-12]
 8018fa6:	ed54 7a04 	vldr	s15, [r4, #-16]
 8018faa:	ed14 0a03 	vldr	s0, [r4, #-12]
 8018fae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018fb2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018fb6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc2:	db72      	blt.n	80190aa <arm_cmplx_mag_f32+0x166>
 8018fc4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018fc8:	eeb4 0a40 	vcmp.f32	s0, s0
 8018fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd0:	f040 808c 	bne.w	80190ec <arm_cmplx_mag_f32+0x1a8>
 8018fd4:	ed05 0a02 	vstr	s0, [r5, #-8]
 8018fd8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8018fdc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8018fe0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018fe4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018fe8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff4:	db20      	blt.n	8019038 <arm_cmplx_mag_f32+0xf4>
 8018ff6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8018ffa:	eeb4 0a40 	vcmp.f32	s0, s0
 8018ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019002:	d169      	bne.n	80190d8 <arm_cmplx_mag_f32+0x194>
 8019004:	3e01      	subs	r6, #1
 8019006:	ed05 0a01 	vstr	s0, [r5, #-4]
 801900a:	f104 0420 	add.w	r4, r4, #32
 801900e:	f105 0510 	add.w	r5, r5, #16
 8019012:	d019      	beq.n	8019048 <arm_cmplx_mag_f32+0x104>
 8019014:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8019018:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 801901c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019020:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019024:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019030:	da95      	bge.n	8018f5e <arm_cmplx_mag_f32+0x1a>
 8019032:	f845 7c10 	str.w	r7, [r5, #-16]
 8019036:	e79c      	b.n	8018f72 <arm_cmplx_mag_f32+0x2e>
 8019038:	3e01      	subs	r6, #1
 801903a:	f845 7c04 	str.w	r7, [r5, #-4]
 801903e:	f104 0420 	add.w	r4, r4, #32
 8019042:	f105 0510 	add.w	r5, r5, #16
 8019046:	d1e5      	bne.n	8019014 <arm_cmplx_mag_f32+0xd0>
 8019048:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 801904c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8019050:	f012 0503 	ands.w	r5, r2, #3
 8019054:	d026      	beq.n	80190a4 <arm_cmplx_mag_f32+0x160>
 8019056:	f100 0408 	add.w	r4, r0, #8
 801905a:	2600      	movs	r6, #0
 801905c:	e00c      	b.n	8019078 <arm_cmplx_mag_f32+0x134>
 801905e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019062:	eeb4 0a40 	vcmp.f32	s0, s0
 8019066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801906a:	d12e      	bne.n	80190ca <arm_cmplx_mag_f32+0x186>
 801906c:	3d01      	subs	r5, #1
 801906e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8019072:	f104 0408 	add.w	r4, r4, #8
 8019076:	d015      	beq.n	80190a4 <arm_cmplx_mag_f32+0x160>
 8019078:	ed54 7a02 	vldr	s15, [r4, #-8]
 801907c:	3104      	adds	r1, #4
 801907e:	ed14 0a01 	vldr	s0, [r4, #-4]
 8019082:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019086:	ee20 0a00 	vmul.f32	s0, s0, s0
 801908a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801908e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019096:	dae2      	bge.n	801905e <arm_cmplx_mag_f32+0x11a>
 8019098:	3d01      	subs	r5, #1
 801909a:	f841 6c04 	str.w	r6, [r1, #-4]
 801909e:	f104 0408 	add.w	r4, r4, #8
 80190a2:	d1e9      	bne.n	8019078 <arm_cmplx_mag_f32+0x134>
 80190a4:	b004      	add	sp, #16
 80190a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190aa:	f845 7c08 	str.w	r7, [r5, #-8]
 80190ae:	e793      	b.n	8018fd8 <arm_cmplx_mag_f32+0x94>
 80190b0:	f845 7c0c 	str.w	r7, [r5, #-12]
 80190b4:	e777      	b.n	8018fa6 <arm_cmplx_mag_f32+0x62>
 80190b6:	eeb0 0a67 	vmov.f32	s0, s15
 80190ba:	9203      	str	r2, [sp, #12]
 80190bc:	9102      	str	r1, [sp, #8]
 80190be:	9001      	str	r0, [sp, #4]
 80190c0:	f001 fbde 	bl	801a880 <sqrtf>
 80190c4:	a801      	add	r0, sp, #4
 80190c6:	c807      	ldmia	r0, {r0, r1, r2}
 80190c8:	e751      	b.n	8018f6e <arm_cmplx_mag_f32+0x2a>
 80190ca:	eeb0 0a67 	vmov.f32	s0, s15
 80190ce:	9101      	str	r1, [sp, #4]
 80190d0:	f001 fbd6 	bl	801a880 <sqrtf>
 80190d4:	9901      	ldr	r1, [sp, #4]
 80190d6:	e7c9      	b.n	801906c <arm_cmplx_mag_f32+0x128>
 80190d8:	eeb0 0a67 	vmov.f32	s0, s15
 80190dc:	9203      	str	r2, [sp, #12]
 80190de:	9102      	str	r1, [sp, #8]
 80190e0:	9001      	str	r0, [sp, #4]
 80190e2:	f001 fbcd 	bl	801a880 <sqrtf>
 80190e6:	a801      	add	r0, sp, #4
 80190e8:	c807      	ldmia	r0, {r0, r1, r2}
 80190ea:	e78b      	b.n	8019004 <arm_cmplx_mag_f32+0xc0>
 80190ec:	eeb0 0a67 	vmov.f32	s0, s15
 80190f0:	9203      	str	r2, [sp, #12]
 80190f2:	9102      	str	r1, [sp, #8]
 80190f4:	9001      	str	r0, [sp, #4]
 80190f6:	f001 fbc3 	bl	801a880 <sqrtf>
 80190fa:	a801      	add	r0, sp, #4
 80190fc:	c807      	ldmia	r0, {r0, r1, r2}
 80190fe:	e769      	b.n	8018fd4 <arm_cmplx_mag_f32+0x90>
 8019100:	eeb0 0a67 	vmov.f32	s0, s15
 8019104:	9203      	str	r2, [sp, #12]
 8019106:	9102      	str	r1, [sp, #8]
 8019108:	9001      	str	r0, [sp, #4]
 801910a:	f001 fbb9 	bl	801a880 <sqrtf>
 801910e:	a801      	add	r0, sp, #4
 8019110:	c807      	ldmia	r0, {r0, r1, r2}
 8019112:	e746      	b.n	8018fa2 <arm_cmplx_mag_f32+0x5e>

08019114 <arm_radix8_butterfly_f32>:
 8019114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019118:	469e      	mov	lr, r3
 801911a:	4603      	mov	r3, r0
 801911c:	468a      	mov	sl, r1
 801911e:	468b      	mov	fp, r1
 8019120:	3304      	adds	r3, #4
 8019122:	ed2d 8b10 	vpush	{d8-d15}
 8019126:	469c      	mov	ip, r3
 8019128:	b09d      	sub	sp, #116	; 0x74
 801912a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8019438 <arm_radix8_butterfly_f32+0x324>
 801912e:	9019      	str	r0, [sp, #100]	; 0x64
 8019130:	921a      	str	r2, [sp, #104]	; 0x68
 8019132:	931b      	str	r3, [sp, #108]	; 0x6c
 8019134:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8019138:	f04f 0800 	mov.w	r8, #0
 801913c:	461a      	mov	r2, r3
 801913e:	9311      	str	r3, [sp, #68]	; 0x44
 8019140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8019144:	4611      	mov	r1, r2
 8019146:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801914a:	9300      	str	r3, [sp, #0]
 801914c:	0053      	lsls	r3, r2, #1
 801914e:	18d5      	adds	r5, r2, r3
 8019150:	9301      	str	r3, [sp, #4]
 8019152:	0113      	lsls	r3, r2, #4
 8019154:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019156:	194c      	adds	r4, r1, r5
 8019158:	eb02 0609 	add.w	r6, r2, r9
 801915c:	9302      	str	r3, [sp, #8]
 801915e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8019162:	4613      	mov	r3, r2
 8019164:	190a      	adds	r2, r1, r4
 8019166:	eb06 0709 	add.w	r7, r6, r9
 801916a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801916e:	1888      	adds	r0, r1, r2
 8019170:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019174:	4401      	add	r1, r0
 8019176:	3204      	adds	r2, #4
 8019178:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801917c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019180:	9b00      	ldr	r3, [sp, #0]
 8019182:	3104      	adds	r1, #4
 8019184:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8019188:	44d8      	add	r8, fp
 801918a:	ed90 7a00 	vldr	s14, [r0]
 801918e:	ed94 5a00 	vldr	s10, [r4]
 8019192:	45c2      	cmp	sl, r8
 8019194:	edd7 3a00 	vldr	s7, [r7]
 8019198:	ed96 6a00 	vldr	s12, [r6]
 801919c:	ee37 1a85 	vadd.f32	s2, s15, s10
 80191a0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80191a4:	ee73 4a87 	vadd.f32	s9, s7, s14
 80191a8:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80191ac:	edd5 7a00 	vldr	s15, [r5]
 80191b0:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80191b4:	ed11 7a01 	vldr	s14, [r1, #-4]
 80191b8:	ee36 2a26 	vadd.f32	s4, s12, s13
 80191bc:	ee37 4a87 	vadd.f32	s8, s15, s14
 80191c0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80191c4:	ee71 5a24 	vadd.f32	s11, s2, s9
 80191c8:	ee32 6a04 	vadd.f32	s12, s4, s8
 80191cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80191d0:	ee31 1a64 	vsub.f32	s2, s2, s9
 80191d4:	ee75 4a86 	vadd.f32	s9, s11, s12
 80191d8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80191dc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80191e0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80191e4:	ee32 2a44 	vsub.f32	s4, s4, s8
 80191e8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80191ec:	ed94 0a01 	vldr	s0, [r4, #4]
 80191f0:	edc4 5a00 	vstr	s11, [r4]
 80191f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80191f8:	edd6 5a01 	vldr	s11, [r6, #4]
 80191fc:	edd5 2a01 	vldr	s5, [r5, #4]
 8019200:	ee75 1a27 	vadd.f32	s3, s10, s15
 8019204:	ed92 4a00 	vldr	s8, [r2]
 8019208:	ee75 7a67 	vsub.f32	s15, s10, s15
 801920c:	edd1 4a00 	vldr	s9, [r1]
 8019210:	ee27 7a09 	vmul.f32	s14, s14, s18
 8019214:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8019218:	ed9c 6a00 	vldr	s12, [ip]
 801921c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8019220:	edd0 0a01 	vldr	s1, [r0, #4]
 8019224:	ed97 5a01 	vldr	s10, [r7, #4]
 8019228:	ee35 4a84 	vadd.f32	s8, s11, s8
 801922c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8019230:	ee73 5a26 	vadd.f32	s11, s6, s13
 8019234:	ee76 2a00 	vadd.f32	s5, s12, s0
 8019238:	ee73 6a66 	vsub.f32	s13, s6, s13
 801923c:	ee36 6a40 	vsub.f32	s12, s12, s0
 8019240:	ee35 0a20 	vadd.f32	s0, s10, s1
 8019244:	ee65 5a89 	vmul.f32	s11, s11, s18
 8019248:	ee35 5a60 	vsub.f32	s10, s10, s1
 801924c:	ee32 3a80 	vadd.f32	s6, s5, s0
 8019250:	ee74 0a24 	vadd.f32	s1, s8, s9
 8019254:	ee66 6a89 	vmul.f32	s13, s13, s18
 8019258:	ee74 4a64 	vsub.f32	s9, s8, s9
 801925c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8019260:	ee75 2a25 	vadd.f32	s5, s10, s11
 8019264:	ee33 0a20 	vadd.f32	s0, s6, s1
 8019268:	ee75 5a65 	vsub.f32	s11, s10, s11
 801926c:	ee33 3a60 	vsub.f32	s6, s6, s1
 8019270:	ee36 5a26 	vadd.f32	s10, s12, s13
 8019274:	ed8c 0a00 	vstr	s0, [ip]
 8019278:	ee76 6a66 	vsub.f32	s13, s12, s13
 801927c:	449c      	add	ip, r3
 801927e:	ee33 6a87 	vadd.f32	s12, s7, s14
 8019282:	ed84 3a01 	vstr	s6, [r4, #4]
 8019286:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801928a:	441c      	add	r4, r3
 801928c:	ee71 3a24 	vadd.f32	s7, s2, s9
 8019290:	ee71 4a64 	vsub.f32	s9, s2, s9
 8019294:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8019298:	edc7 3a00 	vstr	s7, [r7]
 801929c:	ee34 1a42 	vsub.f32	s2, s8, s4
 80192a0:	edc0 4a00 	vstr	s9, [r0]
 80192a4:	ee77 3aa5 	vadd.f32	s7, s15, s11
 80192a8:	ee75 4a46 	vsub.f32	s9, s10, s12
 80192ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80192b0:	ed87 1a01 	vstr	s2, [r7, #4]
 80192b4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80192b8:	441f      	add	r7, r3
 80192ba:	ee32 4a04 	vadd.f32	s8, s4, s8
 80192be:	ee71 1ae2 	vsub.f32	s3, s3, s5
 80192c2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80192c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80192ca:	ed80 4a01 	vstr	s8, [r0, #4]
 80192ce:	ed86 3a00 	vstr	s6, [r6]
 80192d2:	4418      	add	r0, r3
 80192d4:	ed41 1a01 	vstr	s3, [r1, #-4]
 80192d8:	ed42 3a01 	vstr	s7, [r2, #-4]
 80192dc:	edc5 7a00 	vstr	s15, [r5]
 80192e0:	edc6 4a01 	vstr	s9, [r6, #4]
 80192e4:	441e      	add	r6, r3
 80192e6:	ed81 6a00 	vstr	s12, [r1]
 80192ea:	4419      	add	r1, r3
 80192ec:	edc2 5a00 	vstr	s11, [r2]
 80192f0:	441a      	add	r2, r3
 80192f2:	ed85 7a01 	vstr	s14, [r5, #4]
 80192f6:	441d      	add	r5, r3
 80192f8:	f63f af44 	bhi.w	8019184 <arm_radix8_butterfly_f32+0x70>
 80192fc:	9300      	str	r3, [sp, #0]
 80192fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019300:	2b07      	cmp	r3, #7
 8019302:	f240 81f4 	bls.w	80196ee <arm_radix8_butterfly_f32+0x5da>
 8019306:	9901      	ldr	r1, [sp, #4]
 8019308:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801930c:	9d02      	ldr	r5, [sp, #8]
 801930e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8019312:	3101      	adds	r1, #1
 8019314:	eb04 000e 	add.w	r0, r4, lr
 8019318:	00e4      	lsls	r4, r4, #3
 801931a:	3508      	adds	r5, #8
 801931c:	4419      	add	r1, r3
 801931e:	eb00 0c0e 	add.w	ip, r0, lr
 8019322:	9413      	str	r4, [sp, #76]	; 0x4c
 8019324:	00c0      	lsls	r0, r0, #3
 8019326:	185e      	adds	r6, r3, r1
 8019328:	4617      	mov	r7, r2
 801932a:	9218      	str	r2, [sp, #96]	; 0x60
 801932c:	f109 0908 	add.w	r9, r9, #8
 8019330:	199c      	adds	r4, r3, r6
 8019332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019334:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019336:	9012      	str	r0, [sp, #72]	; 0x48
 8019338:	195d      	adds	r5, r3, r5
 801933a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801933c:	443a      	add	r2, r7
 801933e:	950c      	str	r5, [sp, #48]	; 0x30
 8019340:	4698      	mov	r8, r3
 8019342:	4420      	add	r0, r4
 8019344:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019346:	19d7      	adds	r7, r2, r7
 8019348:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801934c:	4405      	add	r5, r0
 801934e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019352:	9710      	str	r7, [sp, #64]	; 0x40
 8019354:	eb0c 070e 	add.w	r7, ip, lr
 8019358:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801935c:	3404      	adds	r4, #4
 801935e:	3004      	adds	r0, #4
 8019360:	44c8      	add	r8, r9
 8019362:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8019366:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019368:	940a      	str	r4, [sp, #40]	; 0x28
 801936a:	9009      	str	r0, [sp, #36]	; 0x24
 801936c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019370:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019372:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019376:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019378:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801937c:	eb07 080e 	add.w	r8, r7, lr
 8019380:	eb04 0900 	add.w	r9, r4, r0
 8019384:	00f8      	lsls	r0, r7, #3
 8019386:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801938a:	3504      	adds	r5, #4
 801938c:	4607      	mov	r7, r0
 801938e:	9017      	str	r0, [sp, #92]	; 0x5c
 8019390:	910b      	str	r1, [sp, #44]	; 0x2c
 8019392:	4618      	mov	r0, r3
 8019394:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8019398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801939a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801939e:	18e3      	adds	r3, r4, r3
 80193a0:	9508      	str	r5, [sp, #32]
 80193a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80193a4:	910e      	str	r1, [sp, #56]	; 0x38
 80193a6:	4621      	mov	r1, r4
 80193a8:	eb04 0805 	add.w	r8, r4, r5
 80193ac:	9304      	str	r3, [sp, #16]
 80193ae:	19e5      	adds	r5, r4, r7
 80193b0:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80193b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80193b6:	9316      	str	r3, [sp, #88]	; 0x58
 80193b8:	190b      	adds	r3, r1, r4
 80193ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80193bc:	9505      	str	r5, [sp, #20]
 80193be:	9303      	str	r3, [sp, #12]
 80193c0:	f100 0308 	add.w	r3, r0, #8
 80193c4:	9707      	str	r7, [sp, #28]
 80193c6:	4638      	mov	r0, r7
 80193c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80193ca:	2301      	movs	r3, #1
 80193cc:	9306      	str	r3, [sp, #24]
 80193ce:	9b00      	ldr	r3, [sp, #0]
 80193d0:	ed90 fa00 	vldr	s30, [r0]
 80193d4:	edd0 ba01 	vldr	s23, [r0, #4]
 80193d8:	9803      	ldr	r0, [sp, #12]
 80193da:	9903      	ldr	r1, [sp, #12]
 80193dc:	ed90 ba01 	vldr	s22, [r0, #4]
 80193e0:	9804      	ldr	r0, [sp, #16]
 80193e2:	edd1 ea00 	vldr	s29, [r1]
 80193e6:	edd0 aa01 	vldr	s21, [r0, #4]
 80193ea:	9805      	ldr	r0, [sp, #20]
 80193ec:	9905      	ldr	r1, [sp, #20]
 80193ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80193f2:	ed91 da00 	vldr	s26, [r1]
 80193f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80193f8:	9c04      	ldr	r4, [sp, #16]
 80193fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80193fe:	edd8 7a01 	vldr	s15, [r8, #4]
 8019402:	9100      	str	r1, [sp, #0]
 8019404:	edd2 fa00 	vldr	s31, [r2]
 8019408:	ed94 ea00 	vldr	s28, [r4]
 801940c:	ed92 ca01 	vldr	s24, [r2, #4]
 8019410:	f8dd e020 	ldr.w	lr, [sp, #32]
 8019414:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019416:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019418:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801941a:	edd9 da00 	vldr	s27, [r9]
 801941e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019420:	edd8 ca00 	vldr	s25, [r8]
 8019424:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019428:	f8dd c018 	ldr.w	ip, [sp, #24]
 801942c:	ed99 aa01 	vldr	s20, [r9, #4]
 8019430:	edcd 7a02 	vstr	s15, [sp, #8]
 8019434:	9800      	ldr	r0, [sp, #0]
 8019436:	e001      	b.n	801943c <arm_radix8_butterfly_f32+0x328>
 8019438:	3f3504f3 	.word	0x3f3504f3
 801943c:	edd5 3a00 	vldr	s7, [r5]
 8019440:	44dc      	add	ip, fp
 8019442:	ed91 7a00 	vldr	s14, [r1]
 8019446:	edd4 8a00 	vldr	s17, [r4]
 801944a:	45e2      	cmp	sl, ip
 801944c:	ed57 7a01 	vldr	s15, [r7, #-4]
 8019450:	ed90 5a00 	vldr	s10, [r0]
 8019454:	ed56 5a01 	vldr	s11, [r6, #-4]
 8019458:	ee38 6aa7 	vadd.f32	s12, s17, s15
 801945c:	ed92 1a00 	vldr	s2, [r2]
 8019460:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8019464:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8019468:	ee75 9a25 	vadd.f32	s19, s10, s11
 801946c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8019470:	ed92 8a01 	vldr	s16, [r2, #4]
 8019474:	ee73 6a84 	vadd.f32	s13, s7, s8
 8019478:	ee75 5a65 	vsub.f32	s11, s10, s11
 801947c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8019480:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019484:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8019488:	ee75 7a84 	vadd.f32	s15, s11, s8
 801948c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8019490:	ee31 7a85 	vadd.f32	s14, s3, s10
 8019494:	ee67 7a89 	vmul.f32	s15, s15, s18
 8019498:	ee33 3a46 	vsub.f32	s6, s6, s12
 801949c:	ed82 7a00 	vstr	s14, [r2]
 80194a0:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80194a4:	ed96 6a00 	vldr	s12, [r6]
 80194a8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80194ac:	edd5 3a01 	vldr	s7, [r5, #4]
 80194b0:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80194b4:	ed90 7a01 	vldr	s14, [r0, #4]
 80194b8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80194bc:	edde 4a00 	vldr	s9, [lr]
 80194c0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80194c4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80194c8:	edd1 6a01 	vldr	s13, [r1, #4]
 80194cc:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80194d0:	edd7 0a00 	vldr	s1, [r7]
 80194d4:	ee77 5a06 	vadd.f32	s11, s14, s12
 80194d8:	ed94 7a01 	vldr	s14, [r4, #4]
 80194dc:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80194e0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80194e4:	ee78 4a66 	vsub.f32	s9, s16, s13
 80194e8:	ee78 3a26 	vadd.f32	s7, s16, s13
 80194ec:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80194f0:	ee77 6a20 	vadd.f32	s13, s14, s1
 80194f4:	ee24 4a09 	vmul.f32	s8, s8, s18
 80194f8:	ee37 7a60 	vsub.f32	s14, s14, s1
 80194fc:	ee20 8a09 	vmul.f32	s16, s0, s18
 8019500:	ee75 0a86 	vadd.f32	s1, s11, s12
 8019504:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8019508:	ee62 2a89 	vmul.f32	s5, s5, s18
 801950c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8019510:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8019514:	ee77 7a62 	vsub.f32	s15, s14, s5
 8019518:	ee74 5a88 	vadd.f32	s11, s9, s16
 801951c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8019520:	ee77 4a22 	vadd.f32	s9, s14, s5
 8019524:	ee71 2a04 	vadd.f32	s5, s2, s8
 8019528:	ee31 7a44 	vsub.f32	s14, s2, s8
 801952c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8019530:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019534:	ee33 6a46 	vsub.f32	s12, s6, s12
 8019538:	ee33 3ae9 	vsub.f32	s6, s7, s19
 801953c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8019540:	ee38 4a68 	vsub.f32	s8, s16, s17
 8019544:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8019548:	ee72 5a25 	vadd.f32	s11, s4, s11
 801954c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8019550:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8019554:	ee77 2a27 	vadd.f32	s5, s14, s15
 8019558:	ee37 7a67 	vsub.f32	s14, s14, s15
 801955c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8019560:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8019564:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8019568:	ee2a 5a85 	vmul.f32	s10, s21, s10
 801956c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8019570:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8019574:	ee70 0a20 	vadd.f32	s1, s0, s1
 8019578:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801957c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8019580:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8019584:	edc2 0a01 	vstr	s1, [r2, #4]
 8019588:	ee38 8a88 	vadd.f32	s16, s17, s16
 801958c:	441a      	add	r2, r3
 801958e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8019592:	ee31 5a45 	vsub.f32	s10, s2, s10
 8019596:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801959a:	ed81 8a00 	vstr	s16, [r1]
 801959e:	ee39 0a80 	vadd.f32	s0, s19, s0
 80195a2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80195a6:	ed81 5a01 	vstr	s10, [r1, #4]
 80195aa:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80195ae:	edcd 3a00 	vstr	s7, [sp]
 80195b2:	ed9d 5a02 	vldr	s10, [sp, #8]
 80195b6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80195ba:	eddd 3a01 	vldr	s7, [sp, #4]
 80195be:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80195c2:	ed84 0a00 	vstr	s0, [r4]
 80195c6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80195ca:	ed84 3a01 	vstr	s6, [r4, #4]
 80195ce:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80195d2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80195d6:	eddd 3a00 	vldr	s7, [sp]
 80195da:	ee25 5a25 	vmul.f32	s10, s10, s11
 80195de:	4419      	add	r1, r3
 80195e0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80195e4:	441c      	add	r4, r3
 80195e6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80195ea:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80195ee:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80195f2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80195f6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80195fa:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80195fe:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8019602:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8019606:	ee2d 4a84 	vmul.f32	s8, s27, s8
 801960a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801960e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8019612:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8019616:	ee38 8a01 	vadd.f32	s16, s16, s2
 801961a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801961e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8019622:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8019626:	ed07 8a01 	vstr	s16, [r7, #-4]
 801962a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801962e:	ed87 6a00 	vstr	s12, [r7]
 8019632:	ee74 2a62 	vsub.f32	s5, s8, s5
 8019636:	edc0 0a00 	vstr	s1, [r0]
 801963a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801963e:	edc0 3a01 	vstr	s7, [r0, #4]
 8019642:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019646:	ed0e 5a01 	vstr	s10, [lr, #-4]
 801964a:	edce 4a00 	vstr	s9, [lr]
 801964e:	4418      	add	r0, r3
 8019650:	ed06 0a01 	vstr	s0, [r6, #-4]
 8019654:	441f      	add	r7, r3
 8019656:	edc6 2a00 	vstr	s5, [r6]
 801965a:	449e      	add	lr, r3
 801965c:	ed85 3a00 	vstr	s6, [r5]
 8019660:	441e      	add	r6, r3
 8019662:	ed85 7a01 	vstr	s14, [r5, #4]
 8019666:	441d      	add	r5, r3
 8019668:	f63f aee8 	bhi.w	801943c <arm_radix8_butterfly_f32+0x328>
 801966c:	9a06      	ldr	r2, [sp, #24]
 801966e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019670:	3201      	adds	r2, #1
 8019672:	4611      	mov	r1, r2
 8019674:	9206      	str	r2, [sp, #24]
 8019676:	9a07      	ldr	r2, [sp, #28]
 8019678:	4402      	add	r2, r0
 801967a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801967c:	9207      	str	r2, [sp, #28]
 801967e:	9a03      	ldr	r2, [sp, #12]
 8019680:	4402      	add	r2, r0
 8019682:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019684:	9203      	str	r2, [sp, #12]
 8019686:	9a04      	ldr	r2, [sp, #16]
 8019688:	4402      	add	r2, r0
 801968a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801968c:	9204      	str	r2, [sp, #16]
 801968e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019690:	4491      	add	r9, r2
 8019692:	9a05      	ldr	r2, [sp, #20]
 8019694:	4402      	add	r2, r0
 8019696:	9205      	str	r2, [sp, #20]
 8019698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801969a:	4490      	add	r8, r2
 801969c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801969e:	3208      	adds	r2, #8
 80196a0:	920f      	str	r2, [sp, #60]	; 0x3c
 80196a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196a4:	3208      	adds	r2, #8
 80196a6:	920e      	str	r2, [sp, #56]	; 0x38
 80196a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80196aa:	3208      	adds	r2, #8
 80196ac:	920d      	str	r2, [sp, #52]	; 0x34
 80196ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80196b0:	3208      	adds	r2, #8
 80196b2:	920c      	str	r2, [sp, #48]	; 0x30
 80196b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80196b6:	3208      	adds	r2, #8
 80196b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80196ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196bc:	3208      	adds	r2, #8
 80196be:	920a      	str	r2, [sp, #40]	; 0x28
 80196c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196c2:	3208      	adds	r2, #8
 80196c4:	9209      	str	r2, [sp, #36]	; 0x24
 80196c6:	9a08      	ldr	r2, [sp, #32]
 80196c8:	3208      	adds	r2, #8
 80196ca:	9208      	str	r2, [sp, #32]
 80196cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80196ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80196d0:	4622      	mov	r2, r4
 80196d2:	4288      	cmp	r0, r1
 80196d4:	d005      	beq.n	80196e2 <arm_radix8_butterfly_f32+0x5ce>
 80196d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80196d8:	4621      	mov	r1, r4
 80196da:	4401      	add	r1, r0
 80196dc:	9807      	ldr	r0, [sp, #28]
 80196de:	9110      	str	r1, [sp, #64]	; 0x40
 80196e0:	e676      	b.n	80193d0 <arm_radix8_butterfly_f32+0x2bc>
 80196e2:	4683      	mov	fp, r0
 80196e4:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 80196e8:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80196ec:	e522      	b.n	8019134 <arm_radix8_butterfly_f32+0x20>
 80196ee:	b01d      	add	sp, #116	; 0x74
 80196f0:	ecbd 8b10 	vpop	{d8-d15}
 80196f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196f8 <__errno>:
 80196f8:	4b01      	ldr	r3, [pc, #4]	; (8019700 <__errno+0x8>)
 80196fa:	6818      	ldr	r0, [r3, #0]
 80196fc:	4770      	bx	lr
 80196fe:	bf00      	nop
 8019700:	20000060 	.word	0x20000060

08019704 <__libc_init_array>:
 8019704:	b570      	push	{r4, r5, r6, lr}
 8019706:	4d0d      	ldr	r5, [pc, #52]	; (801973c <__libc_init_array+0x38>)
 8019708:	4c0d      	ldr	r4, [pc, #52]	; (8019740 <__libc_init_array+0x3c>)
 801970a:	1b64      	subs	r4, r4, r5
 801970c:	10a4      	asrs	r4, r4, #2
 801970e:	2600      	movs	r6, #0
 8019710:	42a6      	cmp	r6, r4
 8019712:	d109      	bne.n	8019728 <__libc_init_array+0x24>
 8019714:	4d0b      	ldr	r5, [pc, #44]	; (8019744 <__libc_init_array+0x40>)
 8019716:	4c0c      	ldr	r4, [pc, #48]	; (8019748 <__libc_init_array+0x44>)
 8019718:	f001 fb2c 	bl	801ad74 <_init>
 801971c:	1b64      	subs	r4, r4, r5
 801971e:	10a4      	asrs	r4, r4, #2
 8019720:	2600      	movs	r6, #0
 8019722:	42a6      	cmp	r6, r4
 8019724:	d105      	bne.n	8019732 <__libc_init_array+0x2e>
 8019726:	bd70      	pop	{r4, r5, r6, pc}
 8019728:	f855 3b04 	ldr.w	r3, [r5], #4
 801972c:	4798      	blx	r3
 801972e:	3601      	adds	r6, #1
 8019730:	e7ee      	b.n	8019710 <__libc_init_array+0xc>
 8019732:	f855 3b04 	ldr.w	r3, [r5], #4
 8019736:	4798      	blx	r3
 8019738:	3601      	adds	r6, #1
 801973a:	e7f2      	b.n	8019722 <__libc_init_array+0x1e>
 801973c:	0803038c 	.word	0x0803038c
 8019740:	0803038c 	.word	0x0803038c
 8019744:	0803038c 	.word	0x0803038c
 8019748:	08030390 	.word	0x08030390

0801974c <malloc>:
 801974c:	4b02      	ldr	r3, [pc, #8]	; (8019758 <malloc+0xc>)
 801974e:	4601      	mov	r1, r0
 8019750:	6818      	ldr	r0, [r3, #0]
 8019752:	f000 b871 	b.w	8019838 <_malloc_r>
 8019756:	bf00      	nop
 8019758:	20000060 	.word	0x20000060

0801975c <free>:
 801975c:	4b02      	ldr	r3, [pc, #8]	; (8019768 <free+0xc>)
 801975e:	4601      	mov	r1, r0
 8019760:	6818      	ldr	r0, [r3, #0]
 8019762:	f000 b819 	b.w	8019798 <_free_r>
 8019766:	bf00      	nop
 8019768:	20000060 	.word	0x20000060

0801976c <memcpy>:
 801976c:	440a      	add	r2, r1
 801976e:	4291      	cmp	r1, r2
 8019770:	f100 33ff 	add.w	r3, r0, #4294967295
 8019774:	d100      	bne.n	8019778 <memcpy+0xc>
 8019776:	4770      	bx	lr
 8019778:	b510      	push	{r4, lr}
 801977a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801977e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019782:	4291      	cmp	r1, r2
 8019784:	d1f9      	bne.n	801977a <memcpy+0xe>
 8019786:	bd10      	pop	{r4, pc}

08019788 <memset>:
 8019788:	4402      	add	r2, r0
 801978a:	4603      	mov	r3, r0
 801978c:	4293      	cmp	r3, r2
 801978e:	d100      	bne.n	8019792 <memset+0xa>
 8019790:	4770      	bx	lr
 8019792:	f803 1b01 	strb.w	r1, [r3], #1
 8019796:	e7f9      	b.n	801978c <memset+0x4>

08019798 <_free_r>:
 8019798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801979a:	2900      	cmp	r1, #0
 801979c:	d048      	beq.n	8019830 <_free_r+0x98>
 801979e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80197a2:	9001      	str	r0, [sp, #4]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	f1a1 0404 	sub.w	r4, r1, #4
 80197aa:	bfb8      	it	lt
 80197ac:	18e4      	addlt	r4, r4, r3
 80197ae:	f000 fc2f 	bl	801a010 <__malloc_lock>
 80197b2:	4a20      	ldr	r2, [pc, #128]	; (8019834 <_free_r+0x9c>)
 80197b4:	9801      	ldr	r0, [sp, #4]
 80197b6:	6813      	ldr	r3, [r2, #0]
 80197b8:	4615      	mov	r5, r2
 80197ba:	b933      	cbnz	r3, 80197ca <_free_r+0x32>
 80197bc:	6063      	str	r3, [r4, #4]
 80197be:	6014      	str	r4, [r2, #0]
 80197c0:	b003      	add	sp, #12
 80197c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80197c6:	f000 bc29 	b.w	801a01c <__malloc_unlock>
 80197ca:	42a3      	cmp	r3, r4
 80197cc:	d90b      	bls.n	80197e6 <_free_r+0x4e>
 80197ce:	6821      	ldr	r1, [r4, #0]
 80197d0:	1862      	adds	r2, r4, r1
 80197d2:	4293      	cmp	r3, r2
 80197d4:	bf04      	itt	eq
 80197d6:	681a      	ldreq	r2, [r3, #0]
 80197d8:	685b      	ldreq	r3, [r3, #4]
 80197da:	6063      	str	r3, [r4, #4]
 80197dc:	bf04      	itt	eq
 80197de:	1852      	addeq	r2, r2, r1
 80197e0:	6022      	streq	r2, [r4, #0]
 80197e2:	602c      	str	r4, [r5, #0]
 80197e4:	e7ec      	b.n	80197c0 <_free_r+0x28>
 80197e6:	461a      	mov	r2, r3
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	b10b      	cbz	r3, 80197f0 <_free_r+0x58>
 80197ec:	42a3      	cmp	r3, r4
 80197ee:	d9fa      	bls.n	80197e6 <_free_r+0x4e>
 80197f0:	6811      	ldr	r1, [r2, #0]
 80197f2:	1855      	adds	r5, r2, r1
 80197f4:	42a5      	cmp	r5, r4
 80197f6:	d10b      	bne.n	8019810 <_free_r+0x78>
 80197f8:	6824      	ldr	r4, [r4, #0]
 80197fa:	4421      	add	r1, r4
 80197fc:	1854      	adds	r4, r2, r1
 80197fe:	42a3      	cmp	r3, r4
 8019800:	6011      	str	r1, [r2, #0]
 8019802:	d1dd      	bne.n	80197c0 <_free_r+0x28>
 8019804:	681c      	ldr	r4, [r3, #0]
 8019806:	685b      	ldr	r3, [r3, #4]
 8019808:	6053      	str	r3, [r2, #4]
 801980a:	4421      	add	r1, r4
 801980c:	6011      	str	r1, [r2, #0]
 801980e:	e7d7      	b.n	80197c0 <_free_r+0x28>
 8019810:	d902      	bls.n	8019818 <_free_r+0x80>
 8019812:	230c      	movs	r3, #12
 8019814:	6003      	str	r3, [r0, #0]
 8019816:	e7d3      	b.n	80197c0 <_free_r+0x28>
 8019818:	6825      	ldr	r5, [r4, #0]
 801981a:	1961      	adds	r1, r4, r5
 801981c:	428b      	cmp	r3, r1
 801981e:	bf04      	itt	eq
 8019820:	6819      	ldreq	r1, [r3, #0]
 8019822:	685b      	ldreq	r3, [r3, #4]
 8019824:	6063      	str	r3, [r4, #4]
 8019826:	bf04      	itt	eq
 8019828:	1949      	addeq	r1, r1, r5
 801982a:	6021      	streq	r1, [r4, #0]
 801982c:	6054      	str	r4, [r2, #4]
 801982e:	e7c7      	b.n	80197c0 <_free_r+0x28>
 8019830:	b003      	add	sp, #12
 8019832:	bd30      	pop	{r4, r5, pc}
 8019834:	200084e4 	.word	0x200084e4

08019838 <_malloc_r>:
 8019838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801983a:	1ccd      	adds	r5, r1, #3
 801983c:	f025 0503 	bic.w	r5, r5, #3
 8019840:	3508      	adds	r5, #8
 8019842:	2d0c      	cmp	r5, #12
 8019844:	bf38      	it	cc
 8019846:	250c      	movcc	r5, #12
 8019848:	2d00      	cmp	r5, #0
 801984a:	4606      	mov	r6, r0
 801984c:	db01      	blt.n	8019852 <_malloc_r+0x1a>
 801984e:	42a9      	cmp	r1, r5
 8019850:	d903      	bls.n	801985a <_malloc_r+0x22>
 8019852:	230c      	movs	r3, #12
 8019854:	6033      	str	r3, [r6, #0]
 8019856:	2000      	movs	r0, #0
 8019858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801985a:	f000 fbd9 	bl	801a010 <__malloc_lock>
 801985e:	4921      	ldr	r1, [pc, #132]	; (80198e4 <_malloc_r+0xac>)
 8019860:	680a      	ldr	r2, [r1, #0]
 8019862:	4614      	mov	r4, r2
 8019864:	b99c      	cbnz	r4, 801988e <_malloc_r+0x56>
 8019866:	4f20      	ldr	r7, [pc, #128]	; (80198e8 <_malloc_r+0xb0>)
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	b923      	cbnz	r3, 8019876 <_malloc_r+0x3e>
 801986c:	4621      	mov	r1, r4
 801986e:	4630      	mov	r0, r6
 8019870:	f000 f8e0 	bl	8019a34 <_sbrk_r>
 8019874:	6038      	str	r0, [r7, #0]
 8019876:	4629      	mov	r1, r5
 8019878:	4630      	mov	r0, r6
 801987a:	f000 f8db 	bl	8019a34 <_sbrk_r>
 801987e:	1c43      	adds	r3, r0, #1
 8019880:	d123      	bne.n	80198ca <_malloc_r+0x92>
 8019882:	230c      	movs	r3, #12
 8019884:	6033      	str	r3, [r6, #0]
 8019886:	4630      	mov	r0, r6
 8019888:	f000 fbc8 	bl	801a01c <__malloc_unlock>
 801988c:	e7e3      	b.n	8019856 <_malloc_r+0x1e>
 801988e:	6823      	ldr	r3, [r4, #0]
 8019890:	1b5b      	subs	r3, r3, r5
 8019892:	d417      	bmi.n	80198c4 <_malloc_r+0x8c>
 8019894:	2b0b      	cmp	r3, #11
 8019896:	d903      	bls.n	80198a0 <_malloc_r+0x68>
 8019898:	6023      	str	r3, [r4, #0]
 801989a:	441c      	add	r4, r3
 801989c:	6025      	str	r5, [r4, #0]
 801989e:	e004      	b.n	80198aa <_malloc_r+0x72>
 80198a0:	6863      	ldr	r3, [r4, #4]
 80198a2:	42a2      	cmp	r2, r4
 80198a4:	bf0c      	ite	eq
 80198a6:	600b      	streq	r3, [r1, #0]
 80198a8:	6053      	strne	r3, [r2, #4]
 80198aa:	4630      	mov	r0, r6
 80198ac:	f000 fbb6 	bl	801a01c <__malloc_unlock>
 80198b0:	f104 000b 	add.w	r0, r4, #11
 80198b4:	1d23      	adds	r3, r4, #4
 80198b6:	f020 0007 	bic.w	r0, r0, #7
 80198ba:	1ac2      	subs	r2, r0, r3
 80198bc:	d0cc      	beq.n	8019858 <_malloc_r+0x20>
 80198be:	1a1b      	subs	r3, r3, r0
 80198c0:	50a3      	str	r3, [r4, r2]
 80198c2:	e7c9      	b.n	8019858 <_malloc_r+0x20>
 80198c4:	4622      	mov	r2, r4
 80198c6:	6864      	ldr	r4, [r4, #4]
 80198c8:	e7cc      	b.n	8019864 <_malloc_r+0x2c>
 80198ca:	1cc4      	adds	r4, r0, #3
 80198cc:	f024 0403 	bic.w	r4, r4, #3
 80198d0:	42a0      	cmp	r0, r4
 80198d2:	d0e3      	beq.n	801989c <_malloc_r+0x64>
 80198d4:	1a21      	subs	r1, r4, r0
 80198d6:	4630      	mov	r0, r6
 80198d8:	f000 f8ac 	bl	8019a34 <_sbrk_r>
 80198dc:	3001      	adds	r0, #1
 80198de:	d1dd      	bne.n	801989c <_malloc_r+0x64>
 80198e0:	e7cf      	b.n	8019882 <_malloc_r+0x4a>
 80198e2:	bf00      	nop
 80198e4:	200084e4 	.word	0x200084e4
 80198e8:	200084e8 	.word	0x200084e8

080198ec <iprintf>:
 80198ec:	b40f      	push	{r0, r1, r2, r3}
 80198ee:	4b0a      	ldr	r3, [pc, #40]	; (8019918 <iprintf+0x2c>)
 80198f0:	b513      	push	{r0, r1, r4, lr}
 80198f2:	681c      	ldr	r4, [r3, #0]
 80198f4:	b124      	cbz	r4, 8019900 <iprintf+0x14>
 80198f6:	69a3      	ldr	r3, [r4, #24]
 80198f8:	b913      	cbnz	r3, 8019900 <iprintf+0x14>
 80198fa:	4620      	mov	r0, r4
 80198fc:	f000 fa84 	bl	8019e08 <__sinit>
 8019900:	ab05      	add	r3, sp, #20
 8019902:	9a04      	ldr	r2, [sp, #16]
 8019904:	68a1      	ldr	r1, [r4, #8]
 8019906:	9301      	str	r3, [sp, #4]
 8019908:	4620      	mov	r0, r4
 801990a:	f000 fbb7 	bl	801a07c <_vfiprintf_r>
 801990e:	b002      	add	sp, #8
 8019910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019914:	b004      	add	sp, #16
 8019916:	4770      	bx	lr
 8019918:	20000060 	.word	0x20000060

0801991c <putchar>:
 801991c:	4b09      	ldr	r3, [pc, #36]	; (8019944 <putchar+0x28>)
 801991e:	b513      	push	{r0, r1, r4, lr}
 8019920:	681c      	ldr	r4, [r3, #0]
 8019922:	4601      	mov	r1, r0
 8019924:	b134      	cbz	r4, 8019934 <putchar+0x18>
 8019926:	69a3      	ldr	r3, [r4, #24]
 8019928:	b923      	cbnz	r3, 8019934 <putchar+0x18>
 801992a:	9001      	str	r0, [sp, #4]
 801992c:	4620      	mov	r0, r4
 801992e:	f000 fa6b 	bl	8019e08 <__sinit>
 8019932:	9901      	ldr	r1, [sp, #4]
 8019934:	68a2      	ldr	r2, [r4, #8]
 8019936:	4620      	mov	r0, r4
 8019938:	b002      	add	sp, #8
 801993a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801993e:	f000 be61 	b.w	801a604 <_putc_r>
 8019942:	bf00      	nop
 8019944:	20000060 	.word	0x20000060

08019948 <_puts_r>:
 8019948:	b570      	push	{r4, r5, r6, lr}
 801994a:	460e      	mov	r6, r1
 801994c:	4605      	mov	r5, r0
 801994e:	b118      	cbz	r0, 8019958 <_puts_r+0x10>
 8019950:	6983      	ldr	r3, [r0, #24]
 8019952:	b90b      	cbnz	r3, 8019958 <_puts_r+0x10>
 8019954:	f000 fa58 	bl	8019e08 <__sinit>
 8019958:	69ab      	ldr	r3, [r5, #24]
 801995a:	68ac      	ldr	r4, [r5, #8]
 801995c:	b913      	cbnz	r3, 8019964 <_puts_r+0x1c>
 801995e:	4628      	mov	r0, r5
 8019960:	f000 fa52 	bl	8019e08 <__sinit>
 8019964:	4b2c      	ldr	r3, [pc, #176]	; (8019a18 <_puts_r+0xd0>)
 8019966:	429c      	cmp	r4, r3
 8019968:	d120      	bne.n	80199ac <_puts_r+0x64>
 801996a:	686c      	ldr	r4, [r5, #4]
 801996c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801996e:	07db      	lsls	r3, r3, #31
 8019970:	d405      	bmi.n	801997e <_puts_r+0x36>
 8019972:	89a3      	ldrh	r3, [r4, #12]
 8019974:	0598      	lsls	r0, r3, #22
 8019976:	d402      	bmi.n	801997e <_puts_r+0x36>
 8019978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801997a:	f000 fae3 	bl	8019f44 <__retarget_lock_acquire_recursive>
 801997e:	89a3      	ldrh	r3, [r4, #12]
 8019980:	0719      	lsls	r1, r3, #28
 8019982:	d51d      	bpl.n	80199c0 <_puts_r+0x78>
 8019984:	6923      	ldr	r3, [r4, #16]
 8019986:	b1db      	cbz	r3, 80199c0 <_puts_r+0x78>
 8019988:	3e01      	subs	r6, #1
 801998a:	68a3      	ldr	r3, [r4, #8]
 801998c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019990:	3b01      	subs	r3, #1
 8019992:	60a3      	str	r3, [r4, #8]
 8019994:	bb39      	cbnz	r1, 80199e6 <_puts_r+0x9e>
 8019996:	2b00      	cmp	r3, #0
 8019998:	da38      	bge.n	8019a0c <_puts_r+0xc4>
 801999a:	4622      	mov	r2, r4
 801999c:	210a      	movs	r1, #10
 801999e:	4628      	mov	r0, r5
 80199a0:	f000 f858 	bl	8019a54 <__swbuf_r>
 80199a4:	3001      	adds	r0, #1
 80199a6:	d011      	beq.n	80199cc <_puts_r+0x84>
 80199a8:	250a      	movs	r5, #10
 80199aa:	e011      	b.n	80199d0 <_puts_r+0x88>
 80199ac:	4b1b      	ldr	r3, [pc, #108]	; (8019a1c <_puts_r+0xd4>)
 80199ae:	429c      	cmp	r4, r3
 80199b0:	d101      	bne.n	80199b6 <_puts_r+0x6e>
 80199b2:	68ac      	ldr	r4, [r5, #8]
 80199b4:	e7da      	b.n	801996c <_puts_r+0x24>
 80199b6:	4b1a      	ldr	r3, [pc, #104]	; (8019a20 <_puts_r+0xd8>)
 80199b8:	429c      	cmp	r4, r3
 80199ba:	bf08      	it	eq
 80199bc:	68ec      	ldreq	r4, [r5, #12]
 80199be:	e7d5      	b.n	801996c <_puts_r+0x24>
 80199c0:	4621      	mov	r1, r4
 80199c2:	4628      	mov	r0, r5
 80199c4:	f000 f898 	bl	8019af8 <__swsetup_r>
 80199c8:	2800      	cmp	r0, #0
 80199ca:	d0dd      	beq.n	8019988 <_puts_r+0x40>
 80199cc:	f04f 35ff 	mov.w	r5, #4294967295
 80199d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199d2:	07da      	lsls	r2, r3, #31
 80199d4:	d405      	bmi.n	80199e2 <_puts_r+0x9a>
 80199d6:	89a3      	ldrh	r3, [r4, #12]
 80199d8:	059b      	lsls	r3, r3, #22
 80199da:	d402      	bmi.n	80199e2 <_puts_r+0x9a>
 80199dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199de:	f000 fab2 	bl	8019f46 <__retarget_lock_release_recursive>
 80199e2:	4628      	mov	r0, r5
 80199e4:	bd70      	pop	{r4, r5, r6, pc}
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	da04      	bge.n	80199f4 <_puts_r+0xac>
 80199ea:	69a2      	ldr	r2, [r4, #24]
 80199ec:	429a      	cmp	r2, r3
 80199ee:	dc06      	bgt.n	80199fe <_puts_r+0xb6>
 80199f0:	290a      	cmp	r1, #10
 80199f2:	d004      	beq.n	80199fe <_puts_r+0xb6>
 80199f4:	6823      	ldr	r3, [r4, #0]
 80199f6:	1c5a      	adds	r2, r3, #1
 80199f8:	6022      	str	r2, [r4, #0]
 80199fa:	7019      	strb	r1, [r3, #0]
 80199fc:	e7c5      	b.n	801998a <_puts_r+0x42>
 80199fe:	4622      	mov	r2, r4
 8019a00:	4628      	mov	r0, r5
 8019a02:	f000 f827 	bl	8019a54 <__swbuf_r>
 8019a06:	3001      	adds	r0, #1
 8019a08:	d1bf      	bne.n	801998a <_puts_r+0x42>
 8019a0a:	e7df      	b.n	80199cc <_puts_r+0x84>
 8019a0c:	6823      	ldr	r3, [r4, #0]
 8019a0e:	250a      	movs	r5, #10
 8019a10:	1c5a      	adds	r2, r3, #1
 8019a12:	6022      	str	r2, [r4, #0]
 8019a14:	701d      	strb	r5, [r3, #0]
 8019a16:	e7db      	b.n	80199d0 <_puts_r+0x88>
 8019a18:	08030310 	.word	0x08030310
 8019a1c:	08030330 	.word	0x08030330
 8019a20:	080302f0 	.word	0x080302f0

08019a24 <puts>:
 8019a24:	4b02      	ldr	r3, [pc, #8]	; (8019a30 <puts+0xc>)
 8019a26:	4601      	mov	r1, r0
 8019a28:	6818      	ldr	r0, [r3, #0]
 8019a2a:	f7ff bf8d 	b.w	8019948 <_puts_r>
 8019a2e:	bf00      	nop
 8019a30:	20000060 	.word	0x20000060

08019a34 <_sbrk_r>:
 8019a34:	b538      	push	{r3, r4, r5, lr}
 8019a36:	4d06      	ldr	r5, [pc, #24]	; (8019a50 <_sbrk_r+0x1c>)
 8019a38:	2300      	movs	r3, #0
 8019a3a:	4604      	mov	r4, r0
 8019a3c:	4608      	mov	r0, r1
 8019a3e:	602b      	str	r3, [r5, #0]
 8019a40:	f7ea fa3e 	bl	8003ec0 <_sbrk>
 8019a44:	1c43      	adds	r3, r0, #1
 8019a46:	d102      	bne.n	8019a4e <_sbrk_r+0x1a>
 8019a48:	682b      	ldr	r3, [r5, #0]
 8019a4a:	b103      	cbz	r3, 8019a4e <_sbrk_r+0x1a>
 8019a4c:	6023      	str	r3, [r4, #0]
 8019a4e:	bd38      	pop	{r3, r4, r5, pc}
 8019a50:	2004c9cc 	.word	0x2004c9cc

08019a54 <__swbuf_r>:
 8019a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a56:	460e      	mov	r6, r1
 8019a58:	4614      	mov	r4, r2
 8019a5a:	4605      	mov	r5, r0
 8019a5c:	b118      	cbz	r0, 8019a66 <__swbuf_r+0x12>
 8019a5e:	6983      	ldr	r3, [r0, #24]
 8019a60:	b90b      	cbnz	r3, 8019a66 <__swbuf_r+0x12>
 8019a62:	f000 f9d1 	bl	8019e08 <__sinit>
 8019a66:	4b21      	ldr	r3, [pc, #132]	; (8019aec <__swbuf_r+0x98>)
 8019a68:	429c      	cmp	r4, r3
 8019a6a:	d12b      	bne.n	8019ac4 <__swbuf_r+0x70>
 8019a6c:	686c      	ldr	r4, [r5, #4]
 8019a6e:	69a3      	ldr	r3, [r4, #24]
 8019a70:	60a3      	str	r3, [r4, #8]
 8019a72:	89a3      	ldrh	r3, [r4, #12]
 8019a74:	071a      	lsls	r2, r3, #28
 8019a76:	d52f      	bpl.n	8019ad8 <__swbuf_r+0x84>
 8019a78:	6923      	ldr	r3, [r4, #16]
 8019a7a:	b36b      	cbz	r3, 8019ad8 <__swbuf_r+0x84>
 8019a7c:	6923      	ldr	r3, [r4, #16]
 8019a7e:	6820      	ldr	r0, [r4, #0]
 8019a80:	1ac0      	subs	r0, r0, r3
 8019a82:	6963      	ldr	r3, [r4, #20]
 8019a84:	b2f6      	uxtb	r6, r6
 8019a86:	4283      	cmp	r3, r0
 8019a88:	4637      	mov	r7, r6
 8019a8a:	dc04      	bgt.n	8019a96 <__swbuf_r+0x42>
 8019a8c:	4621      	mov	r1, r4
 8019a8e:	4628      	mov	r0, r5
 8019a90:	f000 f926 	bl	8019ce0 <_fflush_r>
 8019a94:	bb30      	cbnz	r0, 8019ae4 <__swbuf_r+0x90>
 8019a96:	68a3      	ldr	r3, [r4, #8]
 8019a98:	3b01      	subs	r3, #1
 8019a9a:	60a3      	str	r3, [r4, #8]
 8019a9c:	6823      	ldr	r3, [r4, #0]
 8019a9e:	1c5a      	adds	r2, r3, #1
 8019aa0:	6022      	str	r2, [r4, #0]
 8019aa2:	701e      	strb	r6, [r3, #0]
 8019aa4:	6963      	ldr	r3, [r4, #20]
 8019aa6:	3001      	adds	r0, #1
 8019aa8:	4283      	cmp	r3, r0
 8019aaa:	d004      	beq.n	8019ab6 <__swbuf_r+0x62>
 8019aac:	89a3      	ldrh	r3, [r4, #12]
 8019aae:	07db      	lsls	r3, r3, #31
 8019ab0:	d506      	bpl.n	8019ac0 <__swbuf_r+0x6c>
 8019ab2:	2e0a      	cmp	r6, #10
 8019ab4:	d104      	bne.n	8019ac0 <__swbuf_r+0x6c>
 8019ab6:	4621      	mov	r1, r4
 8019ab8:	4628      	mov	r0, r5
 8019aba:	f000 f911 	bl	8019ce0 <_fflush_r>
 8019abe:	b988      	cbnz	r0, 8019ae4 <__swbuf_r+0x90>
 8019ac0:	4638      	mov	r0, r7
 8019ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ac4:	4b0a      	ldr	r3, [pc, #40]	; (8019af0 <__swbuf_r+0x9c>)
 8019ac6:	429c      	cmp	r4, r3
 8019ac8:	d101      	bne.n	8019ace <__swbuf_r+0x7a>
 8019aca:	68ac      	ldr	r4, [r5, #8]
 8019acc:	e7cf      	b.n	8019a6e <__swbuf_r+0x1a>
 8019ace:	4b09      	ldr	r3, [pc, #36]	; (8019af4 <__swbuf_r+0xa0>)
 8019ad0:	429c      	cmp	r4, r3
 8019ad2:	bf08      	it	eq
 8019ad4:	68ec      	ldreq	r4, [r5, #12]
 8019ad6:	e7ca      	b.n	8019a6e <__swbuf_r+0x1a>
 8019ad8:	4621      	mov	r1, r4
 8019ada:	4628      	mov	r0, r5
 8019adc:	f000 f80c 	bl	8019af8 <__swsetup_r>
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	d0cb      	beq.n	8019a7c <__swbuf_r+0x28>
 8019ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8019ae8:	e7ea      	b.n	8019ac0 <__swbuf_r+0x6c>
 8019aea:	bf00      	nop
 8019aec:	08030310 	.word	0x08030310
 8019af0:	08030330 	.word	0x08030330
 8019af4:	080302f0 	.word	0x080302f0

08019af8 <__swsetup_r>:
 8019af8:	4b32      	ldr	r3, [pc, #200]	; (8019bc4 <__swsetup_r+0xcc>)
 8019afa:	b570      	push	{r4, r5, r6, lr}
 8019afc:	681d      	ldr	r5, [r3, #0]
 8019afe:	4606      	mov	r6, r0
 8019b00:	460c      	mov	r4, r1
 8019b02:	b125      	cbz	r5, 8019b0e <__swsetup_r+0x16>
 8019b04:	69ab      	ldr	r3, [r5, #24]
 8019b06:	b913      	cbnz	r3, 8019b0e <__swsetup_r+0x16>
 8019b08:	4628      	mov	r0, r5
 8019b0a:	f000 f97d 	bl	8019e08 <__sinit>
 8019b0e:	4b2e      	ldr	r3, [pc, #184]	; (8019bc8 <__swsetup_r+0xd0>)
 8019b10:	429c      	cmp	r4, r3
 8019b12:	d10f      	bne.n	8019b34 <__swsetup_r+0x3c>
 8019b14:	686c      	ldr	r4, [r5, #4]
 8019b16:	89a3      	ldrh	r3, [r4, #12]
 8019b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b1c:	0719      	lsls	r1, r3, #28
 8019b1e:	d42c      	bmi.n	8019b7a <__swsetup_r+0x82>
 8019b20:	06dd      	lsls	r5, r3, #27
 8019b22:	d411      	bmi.n	8019b48 <__swsetup_r+0x50>
 8019b24:	2309      	movs	r3, #9
 8019b26:	6033      	str	r3, [r6, #0]
 8019b28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b2c:	81a3      	strh	r3, [r4, #12]
 8019b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b32:	e03e      	b.n	8019bb2 <__swsetup_r+0xba>
 8019b34:	4b25      	ldr	r3, [pc, #148]	; (8019bcc <__swsetup_r+0xd4>)
 8019b36:	429c      	cmp	r4, r3
 8019b38:	d101      	bne.n	8019b3e <__swsetup_r+0x46>
 8019b3a:	68ac      	ldr	r4, [r5, #8]
 8019b3c:	e7eb      	b.n	8019b16 <__swsetup_r+0x1e>
 8019b3e:	4b24      	ldr	r3, [pc, #144]	; (8019bd0 <__swsetup_r+0xd8>)
 8019b40:	429c      	cmp	r4, r3
 8019b42:	bf08      	it	eq
 8019b44:	68ec      	ldreq	r4, [r5, #12]
 8019b46:	e7e6      	b.n	8019b16 <__swsetup_r+0x1e>
 8019b48:	0758      	lsls	r0, r3, #29
 8019b4a:	d512      	bpl.n	8019b72 <__swsetup_r+0x7a>
 8019b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b4e:	b141      	cbz	r1, 8019b62 <__swsetup_r+0x6a>
 8019b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b54:	4299      	cmp	r1, r3
 8019b56:	d002      	beq.n	8019b5e <__swsetup_r+0x66>
 8019b58:	4630      	mov	r0, r6
 8019b5a:	f7ff fe1d 	bl	8019798 <_free_r>
 8019b5e:	2300      	movs	r3, #0
 8019b60:	6363      	str	r3, [r4, #52]	; 0x34
 8019b62:	89a3      	ldrh	r3, [r4, #12]
 8019b64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019b68:	81a3      	strh	r3, [r4, #12]
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	6063      	str	r3, [r4, #4]
 8019b6e:	6923      	ldr	r3, [r4, #16]
 8019b70:	6023      	str	r3, [r4, #0]
 8019b72:	89a3      	ldrh	r3, [r4, #12]
 8019b74:	f043 0308 	orr.w	r3, r3, #8
 8019b78:	81a3      	strh	r3, [r4, #12]
 8019b7a:	6923      	ldr	r3, [r4, #16]
 8019b7c:	b94b      	cbnz	r3, 8019b92 <__swsetup_r+0x9a>
 8019b7e:	89a3      	ldrh	r3, [r4, #12]
 8019b80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b88:	d003      	beq.n	8019b92 <__swsetup_r+0x9a>
 8019b8a:	4621      	mov	r1, r4
 8019b8c:	4630      	mov	r0, r6
 8019b8e:	f000 f9ff 	bl	8019f90 <__smakebuf_r>
 8019b92:	89a0      	ldrh	r0, [r4, #12]
 8019b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b98:	f010 0301 	ands.w	r3, r0, #1
 8019b9c:	d00a      	beq.n	8019bb4 <__swsetup_r+0xbc>
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	60a3      	str	r3, [r4, #8]
 8019ba2:	6963      	ldr	r3, [r4, #20]
 8019ba4:	425b      	negs	r3, r3
 8019ba6:	61a3      	str	r3, [r4, #24]
 8019ba8:	6923      	ldr	r3, [r4, #16]
 8019baa:	b943      	cbnz	r3, 8019bbe <__swsetup_r+0xc6>
 8019bac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019bb0:	d1ba      	bne.n	8019b28 <__swsetup_r+0x30>
 8019bb2:	bd70      	pop	{r4, r5, r6, pc}
 8019bb4:	0781      	lsls	r1, r0, #30
 8019bb6:	bf58      	it	pl
 8019bb8:	6963      	ldrpl	r3, [r4, #20]
 8019bba:	60a3      	str	r3, [r4, #8]
 8019bbc:	e7f4      	b.n	8019ba8 <__swsetup_r+0xb0>
 8019bbe:	2000      	movs	r0, #0
 8019bc0:	e7f7      	b.n	8019bb2 <__swsetup_r+0xba>
 8019bc2:	bf00      	nop
 8019bc4:	20000060 	.word	0x20000060
 8019bc8:	08030310 	.word	0x08030310
 8019bcc:	08030330 	.word	0x08030330
 8019bd0:	080302f0 	.word	0x080302f0

08019bd4 <__sflush_r>:
 8019bd4:	898a      	ldrh	r2, [r1, #12]
 8019bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bda:	4605      	mov	r5, r0
 8019bdc:	0710      	lsls	r0, r2, #28
 8019bde:	460c      	mov	r4, r1
 8019be0:	d458      	bmi.n	8019c94 <__sflush_r+0xc0>
 8019be2:	684b      	ldr	r3, [r1, #4]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	dc05      	bgt.n	8019bf4 <__sflush_r+0x20>
 8019be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	dc02      	bgt.n	8019bf4 <__sflush_r+0x20>
 8019bee:	2000      	movs	r0, #0
 8019bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019bf6:	2e00      	cmp	r6, #0
 8019bf8:	d0f9      	beq.n	8019bee <__sflush_r+0x1a>
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c00:	682f      	ldr	r7, [r5, #0]
 8019c02:	602b      	str	r3, [r5, #0]
 8019c04:	d032      	beq.n	8019c6c <__sflush_r+0x98>
 8019c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c08:	89a3      	ldrh	r3, [r4, #12]
 8019c0a:	075a      	lsls	r2, r3, #29
 8019c0c:	d505      	bpl.n	8019c1a <__sflush_r+0x46>
 8019c0e:	6863      	ldr	r3, [r4, #4]
 8019c10:	1ac0      	subs	r0, r0, r3
 8019c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c14:	b10b      	cbz	r3, 8019c1a <__sflush_r+0x46>
 8019c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c18:	1ac0      	subs	r0, r0, r3
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	4602      	mov	r2, r0
 8019c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c20:	6a21      	ldr	r1, [r4, #32]
 8019c22:	4628      	mov	r0, r5
 8019c24:	47b0      	blx	r6
 8019c26:	1c43      	adds	r3, r0, #1
 8019c28:	89a3      	ldrh	r3, [r4, #12]
 8019c2a:	d106      	bne.n	8019c3a <__sflush_r+0x66>
 8019c2c:	6829      	ldr	r1, [r5, #0]
 8019c2e:	291d      	cmp	r1, #29
 8019c30:	d82c      	bhi.n	8019c8c <__sflush_r+0xb8>
 8019c32:	4a2a      	ldr	r2, [pc, #168]	; (8019cdc <__sflush_r+0x108>)
 8019c34:	40ca      	lsrs	r2, r1
 8019c36:	07d6      	lsls	r6, r2, #31
 8019c38:	d528      	bpl.n	8019c8c <__sflush_r+0xb8>
 8019c3a:	2200      	movs	r2, #0
 8019c3c:	6062      	str	r2, [r4, #4]
 8019c3e:	04d9      	lsls	r1, r3, #19
 8019c40:	6922      	ldr	r2, [r4, #16]
 8019c42:	6022      	str	r2, [r4, #0]
 8019c44:	d504      	bpl.n	8019c50 <__sflush_r+0x7c>
 8019c46:	1c42      	adds	r2, r0, #1
 8019c48:	d101      	bne.n	8019c4e <__sflush_r+0x7a>
 8019c4a:	682b      	ldr	r3, [r5, #0]
 8019c4c:	b903      	cbnz	r3, 8019c50 <__sflush_r+0x7c>
 8019c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8019c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c52:	602f      	str	r7, [r5, #0]
 8019c54:	2900      	cmp	r1, #0
 8019c56:	d0ca      	beq.n	8019bee <__sflush_r+0x1a>
 8019c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c5c:	4299      	cmp	r1, r3
 8019c5e:	d002      	beq.n	8019c66 <__sflush_r+0x92>
 8019c60:	4628      	mov	r0, r5
 8019c62:	f7ff fd99 	bl	8019798 <_free_r>
 8019c66:	2000      	movs	r0, #0
 8019c68:	6360      	str	r0, [r4, #52]	; 0x34
 8019c6a:	e7c1      	b.n	8019bf0 <__sflush_r+0x1c>
 8019c6c:	6a21      	ldr	r1, [r4, #32]
 8019c6e:	2301      	movs	r3, #1
 8019c70:	4628      	mov	r0, r5
 8019c72:	47b0      	blx	r6
 8019c74:	1c41      	adds	r1, r0, #1
 8019c76:	d1c7      	bne.n	8019c08 <__sflush_r+0x34>
 8019c78:	682b      	ldr	r3, [r5, #0]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d0c4      	beq.n	8019c08 <__sflush_r+0x34>
 8019c7e:	2b1d      	cmp	r3, #29
 8019c80:	d001      	beq.n	8019c86 <__sflush_r+0xb2>
 8019c82:	2b16      	cmp	r3, #22
 8019c84:	d101      	bne.n	8019c8a <__sflush_r+0xb6>
 8019c86:	602f      	str	r7, [r5, #0]
 8019c88:	e7b1      	b.n	8019bee <__sflush_r+0x1a>
 8019c8a:	89a3      	ldrh	r3, [r4, #12]
 8019c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c90:	81a3      	strh	r3, [r4, #12]
 8019c92:	e7ad      	b.n	8019bf0 <__sflush_r+0x1c>
 8019c94:	690f      	ldr	r7, [r1, #16]
 8019c96:	2f00      	cmp	r7, #0
 8019c98:	d0a9      	beq.n	8019bee <__sflush_r+0x1a>
 8019c9a:	0793      	lsls	r3, r2, #30
 8019c9c:	680e      	ldr	r6, [r1, #0]
 8019c9e:	bf08      	it	eq
 8019ca0:	694b      	ldreq	r3, [r1, #20]
 8019ca2:	600f      	str	r7, [r1, #0]
 8019ca4:	bf18      	it	ne
 8019ca6:	2300      	movne	r3, #0
 8019ca8:	eba6 0807 	sub.w	r8, r6, r7
 8019cac:	608b      	str	r3, [r1, #8]
 8019cae:	f1b8 0f00 	cmp.w	r8, #0
 8019cb2:	dd9c      	ble.n	8019bee <__sflush_r+0x1a>
 8019cb4:	6a21      	ldr	r1, [r4, #32]
 8019cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019cb8:	4643      	mov	r3, r8
 8019cba:	463a      	mov	r2, r7
 8019cbc:	4628      	mov	r0, r5
 8019cbe:	47b0      	blx	r6
 8019cc0:	2800      	cmp	r0, #0
 8019cc2:	dc06      	bgt.n	8019cd2 <__sflush_r+0xfe>
 8019cc4:	89a3      	ldrh	r3, [r4, #12]
 8019cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cca:	81a3      	strh	r3, [r4, #12]
 8019ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8019cd0:	e78e      	b.n	8019bf0 <__sflush_r+0x1c>
 8019cd2:	4407      	add	r7, r0
 8019cd4:	eba8 0800 	sub.w	r8, r8, r0
 8019cd8:	e7e9      	b.n	8019cae <__sflush_r+0xda>
 8019cda:	bf00      	nop
 8019cdc:	20400001 	.word	0x20400001

08019ce0 <_fflush_r>:
 8019ce0:	b538      	push	{r3, r4, r5, lr}
 8019ce2:	690b      	ldr	r3, [r1, #16]
 8019ce4:	4605      	mov	r5, r0
 8019ce6:	460c      	mov	r4, r1
 8019ce8:	b913      	cbnz	r3, 8019cf0 <_fflush_r+0x10>
 8019cea:	2500      	movs	r5, #0
 8019cec:	4628      	mov	r0, r5
 8019cee:	bd38      	pop	{r3, r4, r5, pc}
 8019cf0:	b118      	cbz	r0, 8019cfa <_fflush_r+0x1a>
 8019cf2:	6983      	ldr	r3, [r0, #24]
 8019cf4:	b90b      	cbnz	r3, 8019cfa <_fflush_r+0x1a>
 8019cf6:	f000 f887 	bl	8019e08 <__sinit>
 8019cfa:	4b14      	ldr	r3, [pc, #80]	; (8019d4c <_fflush_r+0x6c>)
 8019cfc:	429c      	cmp	r4, r3
 8019cfe:	d11b      	bne.n	8019d38 <_fflush_r+0x58>
 8019d00:	686c      	ldr	r4, [r5, #4]
 8019d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d0ef      	beq.n	8019cea <_fflush_r+0xa>
 8019d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d0c:	07d0      	lsls	r0, r2, #31
 8019d0e:	d404      	bmi.n	8019d1a <_fflush_r+0x3a>
 8019d10:	0599      	lsls	r1, r3, #22
 8019d12:	d402      	bmi.n	8019d1a <_fflush_r+0x3a>
 8019d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d16:	f000 f915 	bl	8019f44 <__retarget_lock_acquire_recursive>
 8019d1a:	4628      	mov	r0, r5
 8019d1c:	4621      	mov	r1, r4
 8019d1e:	f7ff ff59 	bl	8019bd4 <__sflush_r>
 8019d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d24:	07da      	lsls	r2, r3, #31
 8019d26:	4605      	mov	r5, r0
 8019d28:	d4e0      	bmi.n	8019cec <_fflush_r+0xc>
 8019d2a:	89a3      	ldrh	r3, [r4, #12]
 8019d2c:	059b      	lsls	r3, r3, #22
 8019d2e:	d4dd      	bmi.n	8019cec <_fflush_r+0xc>
 8019d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d32:	f000 f908 	bl	8019f46 <__retarget_lock_release_recursive>
 8019d36:	e7d9      	b.n	8019cec <_fflush_r+0xc>
 8019d38:	4b05      	ldr	r3, [pc, #20]	; (8019d50 <_fflush_r+0x70>)
 8019d3a:	429c      	cmp	r4, r3
 8019d3c:	d101      	bne.n	8019d42 <_fflush_r+0x62>
 8019d3e:	68ac      	ldr	r4, [r5, #8]
 8019d40:	e7df      	b.n	8019d02 <_fflush_r+0x22>
 8019d42:	4b04      	ldr	r3, [pc, #16]	; (8019d54 <_fflush_r+0x74>)
 8019d44:	429c      	cmp	r4, r3
 8019d46:	bf08      	it	eq
 8019d48:	68ec      	ldreq	r4, [r5, #12]
 8019d4a:	e7da      	b.n	8019d02 <_fflush_r+0x22>
 8019d4c:	08030310 	.word	0x08030310
 8019d50:	08030330 	.word	0x08030330
 8019d54:	080302f0 	.word	0x080302f0

08019d58 <std>:
 8019d58:	2300      	movs	r3, #0
 8019d5a:	b510      	push	{r4, lr}
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8019d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d66:	6083      	str	r3, [r0, #8]
 8019d68:	8181      	strh	r1, [r0, #12]
 8019d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8019d6c:	81c2      	strh	r2, [r0, #14]
 8019d6e:	6183      	str	r3, [r0, #24]
 8019d70:	4619      	mov	r1, r3
 8019d72:	2208      	movs	r2, #8
 8019d74:	305c      	adds	r0, #92	; 0x5c
 8019d76:	f7ff fd07 	bl	8019788 <memset>
 8019d7a:	4b05      	ldr	r3, [pc, #20]	; (8019d90 <std+0x38>)
 8019d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8019d7e:	4b05      	ldr	r3, [pc, #20]	; (8019d94 <std+0x3c>)
 8019d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d82:	4b05      	ldr	r3, [pc, #20]	; (8019d98 <std+0x40>)
 8019d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019d86:	4b05      	ldr	r3, [pc, #20]	; (8019d9c <std+0x44>)
 8019d88:	6224      	str	r4, [r4, #32]
 8019d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8019d8c:	bd10      	pop	{r4, pc}
 8019d8e:	bf00      	nop
 8019d90:	0801a695 	.word	0x0801a695
 8019d94:	0801a6b7 	.word	0x0801a6b7
 8019d98:	0801a6ef 	.word	0x0801a6ef
 8019d9c:	0801a713 	.word	0x0801a713

08019da0 <_cleanup_r>:
 8019da0:	4901      	ldr	r1, [pc, #4]	; (8019da8 <_cleanup_r+0x8>)
 8019da2:	f000 b8af 	b.w	8019f04 <_fwalk_reent>
 8019da6:	bf00      	nop
 8019da8:	08019ce1 	.word	0x08019ce1

08019dac <__sfmoreglue>:
 8019dac:	b570      	push	{r4, r5, r6, lr}
 8019dae:	1e4a      	subs	r2, r1, #1
 8019db0:	2568      	movs	r5, #104	; 0x68
 8019db2:	4355      	muls	r5, r2
 8019db4:	460e      	mov	r6, r1
 8019db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019dba:	f7ff fd3d 	bl	8019838 <_malloc_r>
 8019dbe:	4604      	mov	r4, r0
 8019dc0:	b140      	cbz	r0, 8019dd4 <__sfmoreglue+0x28>
 8019dc2:	2100      	movs	r1, #0
 8019dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8019dc8:	300c      	adds	r0, #12
 8019dca:	60a0      	str	r0, [r4, #8]
 8019dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019dd0:	f7ff fcda 	bl	8019788 <memset>
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	bd70      	pop	{r4, r5, r6, pc}

08019dd8 <__sfp_lock_acquire>:
 8019dd8:	4801      	ldr	r0, [pc, #4]	; (8019de0 <__sfp_lock_acquire+0x8>)
 8019dda:	f000 b8b3 	b.w	8019f44 <__retarget_lock_acquire_recursive>
 8019dde:	bf00      	nop
 8019de0:	2004c9c8 	.word	0x2004c9c8

08019de4 <__sfp_lock_release>:
 8019de4:	4801      	ldr	r0, [pc, #4]	; (8019dec <__sfp_lock_release+0x8>)
 8019de6:	f000 b8ae 	b.w	8019f46 <__retarget_lock_release_recursive>
 8019dea:	bf00      	nop
 8019dec:	2004c9c8 	.word	0x2004c9c8

08019df0 <__sinit_lock_acquire>:
 8019df0:	4801      	ldr	r0, [pc, #4]	; (8019df8 <__sinit_lock_acquire+0x8>)
 8019df2:	f000 b8a7 	b.w	8019f44 <__retarget_lock_acquire_recursive>
 8019df6:	bf00      	nop
 8019df8:	2004c9c3 	.word	0x2004c9c3

08019dfc <__sinit_lock_release>:
 8019dfc:	4801      	ldr	r0, [pc, #4]	; (8019e04 <__sinit_lock_release+0x8>)
 8019dfe:	f000 b8a2 	b.w	8019f46 <__retarget_lock_release_recursive>
 8019e02:	bf00      	nop
 8019e04:	2004c9c3 	.word	0x2004c9c3

08019e08 <__sinit>:
 8019e08:	b510      	push	{r4, lr}
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	f7ff fff0 	bl	8019df0 <__sinit_lock_acquire>
 8019e10:	69a3      	ldr	r3, [r4, #24]
 8019e12:	b11b      	cbz	r3, 8019e1c <__sinit+0x14>
 8019e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e18:	f7ff bff0 	b.w	8019dfc <__sinit_lock_release>
 8019e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019e20:	6523      	str	r3, [r4, #80]	; 0x50
 8019e22:	4b13      	ldr	r3, [pc, #76]	; (8019e70 <__sinit+0x68>)
 8019e24:	4a13      	ldr	r2, [pc, #76]	; (8019e74 <__sinit+0x6c>)
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8019e2a:	42a3      	cmp	r3, r4
 8019e2c:	bf04      	itt	eq
 8019e2e:	2301      	moveq	r3, #1
 8019e30:	61a3      	streq	r3, [r4, #24]
 8019e32:	4620      	mov	r0, r4
 8019e34:	f000 f820 	bl	8019e78 <__sfp>
 8019e38:	6060      	str	r0, [r4, #4]
 8019e3a:	4620      	mov	r0, r4
 8019e3c:	f000 f81c 	bl	8019e78 <__sfp>
 8019e40:	60a0      	str	r0, [r4, #8]
 8019e42:	4620      	mov	r0, r4
 8019e44:	f000 f818 	bl	8019e78 <__sfp>
 8019e48:	2200      	movs	r2, #0
 8019e4a:	60e0      	str	r0, [r4, #12]
 8019e4c:	2104      	movs	r1, #4
 8019e4e:	6860      	ldr	r0, [r4, #4]
 8019e50:	f7ff ff82 	bl	8019d58 <std>
 8019e54:	68a0      	ldr	r0, [r4, #8]
 8019e56:	2201      	movs	r2, #1
 8019e58:	2109      	movs	r1, #9
 8019e5a:	f7ff ff7d 	bl	8019d58 <std>
 8019e5e:	68e0      	ldr	r0, [r4, #12]
 8019e60:	2202      	movs	r2, #2
 8019e62:	2112      	movs	r1, #18
 8019e64:	f7ff ff78 	bl	8019d58 <std>
 8019e68:	2301      	movs	r3, #1
 8019e6a:	61a3      	str	r3, [r4, #24]
 8019e6c:	e7d2      	b.n	8019e14 <__sinit+0xc>
 8019e6e:	bf00      	nop
 8019e70:	080302ec 	.word	0x080302ec
 8019e74:	08019da1 	.word	0x08019da1

08019e78 <__sfp>:
 8019e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e7a:	4607      	mov	r7, r0
 8019e7c:	f7ff ffac 	bl	8019dd8 <__sfp_lock_acquire>
 8019e80:	4b1e      	ldr	r3, [pc, #120]	; (8019efc <__sfp+0x84>)
 8019e82:	681e      	ldr	r6, [r3, #0]
 8019e84:	69b3      	ldr	r3, [r6, #24]
 8019e86:	b913      	cbnz	r3, 8019e8e <__sfp+0x16>
 8019e88:	4630      	mov	r0, r6
 8019e8a:	f7ff ffbd 	bl	8019e08 <__sinit>
 8019e8e:	3648      	adds	r6, #72	; 0x48
 8019e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019e94:	3b01      	subs	r3, #1
 8019e96:	d503      	bpl.n	8019ea0 <__sfp+0x28>
 8019e98:	6833      	ldr	r3, [r6, #0]
 8019e9a:	b30b      	cbz	r3, 8019ee0 <__sfp+0x68>
 8019e9c:	6836      	ldr	r6, [r6, #0]
 8019e9e:	e7f7      	b.n	8019e90 <__sfp+0x18>
 8019ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ea4:	b9d5      	cbnz	r5, 8019edc <__sfp+0x64>
 8019ea6:	4b16      	ldr	r3, [pc, #88]	; (8019f00 <__sfp+0x88>)
 8019ea8:	60e3      	str	r3, [r4, #12]
 8019eaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019eae:	6665      	str	r5, [r4, #100]	; 0x64
 8019eb0:	f000 f847 	bl	8019f42 <__retarget_lock_init_recursive>
 8019eb4:	f7ff ff96 	bl	8019de4 <__sfp_lock_release>
 8019eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019ec0:	6025      	str	r5, [r4, #0]
 8019ec2:	61a5      	str	r5, [r4, #24]
 8019ec4:	2208      	movs	r2, #8
 8019ec6:	4629      	mov	r1, r5
 8019ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ecc:	f7ff fc5c 	bl	8019788 <memset>
 8019ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ed8:	4620      	mov	r0, r4
 8019eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019edc:	3468      	adds	r4, #104	; 0x68
 8019ede:	e7d9      	b.n	8019e94 <__sfp+0x1c>
 8019ee0:	2104      	movs	r1, #4
 8019ee2:	4638      	mov	r0, r7
 8019ee4:	f7ff ff62 	bl	8019dac <__sfmoreglue>
 8019ee8:	4604      	mov	r4, r0
 8019eea:	6030      	str	r0, [r6, #0]
 8019eec:	2800      	cmp	r0, #0
 8019eee:	d1d5      	bne.n	8019e9c <__sfp+0x24>
 8019ef0:	f7ff ff78 	bl	8019de4 <__sfp_lock_release>
 8019ef4:	230c      	movs	r3, #12
 8019ef6:	603b      	str	r3, [r7, #0]
 8019ef8:	e7ee      	b.n	8019ed8 <__sfp+0x60>
 8019efa:	bf00      	nop
 8019efc:	080302ec 	.word	0x080302ec
 8019f00:	ffff0001 	.word	0xffff0001

08019f04 <_fwalk_reent>:
 8019f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f08:	4606      	mov	r6, r0
 8019f0a:	4688      	mov	r8, r1
 8019f0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019f10:	2700      	movs	r7, #0
 8019f12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019f16:	f1b9 0901 	subs.w	r9, r9, #1
 8019f1a:	d505      	bpl.n	8019f28 <_fwalk_reent+0x24>
 8019f1c:	6824      	ldr	r4, [r4, #0]
 8019f1e:	2c00      	cmp	r4, #0
 8019f20:	d1f7      	bne.n	8019f12 <_fwalk_reent+0xe>
 8019f22:	4638      	mov	r0, r7
 8019f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f28:	89ab      	ldrh	r3, [r5, #12]
 8019f2a:	2b01      	cmp	r3, #1
 8019f2c:	d907      	bls.n	8019f3e <_fwalk_reent+0x3a>
 8019f2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019f32:	3301      	adds	r3, #1
 8019f34:	d003      	beq.n	8019f3e <_fwalk_reent+0x3a>
 8019f36:	4629      	mov	r1, r5
 8019f38:	4630      	mov	r0, r6
 8019f3a:	47c0      	blx	r8
 8019f3c:	4307      	orrs	r7, r0
 8019f3e:	3568      	adds	r5, #104	; 0x68
 8019f40:	e7e9      	b.n	8019f16 <_fwalk_reent+0x12>

08019f42 <__retarget_lock_init_recursive>:
 8019f42:	4770      	bx	lr

08019f44 <__retarget_lock_acquire_recursive>:
 8019f44:	4770      	bx	lr

08019f46 <__retarget_lock_release_recursive>:
 8019f46:	4770      	bx	lr

08019f48 <__swhatbuf_r>:
 8019f48:	b570      	push	{r4, r5, r6, lr}
 8019f4a:	460e      	mov	r6, r1
 8019f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f50:	2900      	cmp	r1, #0
 8019f52:	b096      	sub	sp, #88	; 0x58
 8019f54:	4614      	mov	r4, r2
 8019f56:	461d      	mov	r5, r3
 8019f58:	da07      	bge.n	8019f6a <__swhatbuf_r+0x22>
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	602b      	str	r3, [r5, #0]
 8019f5e:	89b3      	ldrh	r3, [r6, #12]
 8019f60:	061a      	lsls	r2, r3, #24
 8019f62:	d410      	bmi.n	8019f86 <__swhatbuf_r+0x3e>
 8019f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019f68:	e00e      	b.n	8019f88 <__swhatbuf_r+0x40>
 8019f6a:	466a      	mov	r2, sp
 8019f6c:	f000 fbf8 	bl	801a760 <_fstat_r>
 8019f70:	2800      	cmp	r0, #0
 8019f72:	dbf2      	blt.n	8019f5a <__swhatbuf_r+0x12>
 8019f74:	9a01      	ldr	r2, [sp, #4]
 8019f76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019f7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019f7e:	425a      	negs	r2, r3
 8019f80:	415a      	adcs	r2, r3
 8019f82:	602a      	str	r2, [r5, #0]
 8019f84:	e7ee      	b.n	8019f64 <__swhatbuf_r+0x1c>
 8019f86:	2340      	movs	r3, #64	; 0x40
 8019f88:	2000      	movs	r0, #0
 8019f8a:	6023      	str	r3, [r4, #0]
 8019f8c:	b016      	add	sp, #88	; 0x58
 8019f8e:	bd70      	pop	{r4, r5, r6, pc}

08019f90 <__smakebuf_r>:
 8019f90:	898b      	ldrh	r3, [r1, #12]
 8019f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f94:	079d      	lsls	r5, r3, #30
 8019f96:	4606      	mov	r6, r0
 8019f98:	460c      	mov	r4, r1
 8019f9a:	d507      	bpl.n	8019fac <__smakebuf_r+0x1c>
 8019f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019fa0:	6023      	str	r3, [r4, #0]
 8019fa2:	6123      	str	r3, [r4, #16]
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	6163      	str	r3, [r4, #20]
 8019fa8:	b002      	add	sp, #8
 8019faa:	bd70      	pop	{r4, r5, r6, pc}
 8019fac:	ab01      	add	r3, sp, #4
 8019fae:	466a      	mov	r2, sp
 8019fb0:	f7ff ffca 	bl	8019f48 <__swhatbuf_r>
 8019fb4:	9900      	ldr	r1, [sp, #0]
 8019fb6:	4605      	mov	r5, r0
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f7ff fc3d 	bl	8019838 <_malloc_r>
 8019fbe:	b948      	cbnz	r0, 8019fd4 <__smakebuf_r+0x44>
 8019fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fc4:	059a      	lsls	r2, r3, #22
 8019fc6:	d4ef      	bmi.n	8019fa8 <__smakebuf_r+0x18>
 8019fc8:	f023 0303 	bic.w	r3, r3, #3
 8019fcc:	f043 0302 	orr.w	r3, r3, #2
 8019fd0:	81a3      	strh	r3, [r4, #12]
 8019fd2:	e7e3      	b.n	8019f9c <__smakebuf_r+0xc>
 8019fd4:	4b0d      	ldr	r3, [pc, #52]	; (801a00c <__smakebuf_r+0x7c>)
 8019fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8019fd8:	89a3      	ldrh	r3, [r4, #12]
 8019fda:	6020      	str	r0, [r4, #0]
 8019fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fe0:	81a3      	strh	r3, [r4, #12]
 8019fe2:	9b00      	ldr	r3, [sp, #0]
 8019fe4:	6163      	str	r3, [r4, #20]
 8019fe6:	9b01      	ldr	r3, [sp, #4]
 8019fe8:	6120      	str	r0, [r4, #16]
 8019fea:	b15b      	cbz	r3, 801a004 <__smakebuf_r+0x74>
 8019fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ff0:	4630      	mov	r0, r6
 8019ff2:	f000 fbc7 	bl	801a784 <_isatty_r>
 8019ff6:	b128      	cbz	r0, 801a004 <__smakebuf_r+0x74>
 8019ff8:	89a3      	ldrh	r3, [r4, #12]
 8019ffa:	f023 0303 	bic.w	r3, r3, #3
 8019ffe:	f043 0301 	orr.w	r3, r3, #1
 801a002:	81a3      	strh	r3, [r4, #12]
 801a004:	89a0      	ldrh	r0, [r4, #12]
 801a006:	4305      	orrs	r5, r0
 801a008:	81a5      	strh	r5, [r4, #12]
 801a00a:	e7cd      	b.n	8019fa8 <__smakebuf_r+0x18>
 801a00c:	08019da1 	.word	0x08019da1

0801a010 <__malloc_lock>:
 801a010:	4801      	ldr	r0, [pc, #4]	; (801a018 <__malloc_lock+0x8>)
 801a012:	f7ff bf97 	b.w	8019f44 <__retarget_lock_acquire_recursive>
 801a016:	bf00      	nop
 801a018:	2004c9c4 	.word	0x2004c9c4

0801a01c <__malloc_unlock>:
 801a01c:	4801      	ldr	r0, [pc, #4]	; (801a024 <__malloc_unlock+0x8>)
 801a01e:	f7ff bf92 	b.w	8019f46 <__retarget_lock_release_recursive>
 801a022:	bf00      	nop
 801a024:	2004c9c4 	.word	0x2004c9c4

0801a028 <__sfputc_r>:
 801a028:	6893      	ldr	r3, [r2, #8]
 801a02a:	3b01      	subs	r3, #1
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	b410      	push	{r4}
 801a030:	6093      	str	r3, [r2, #8]
 801a032:	da08      	bge.n	801a046 <__sfputc_r+0x1e>
 801a034:	6994      	ldr	r4, [r2, #24]
 801a036:	42a3      	cmp	r3, r4
 801a038:	db01      	blt.n	801a03e <__sfputc_r+0x16>
 801a03a:	290a      	cmp	r1, #10
 801a03c:	d103      	bne.n	801a046 <__sfputc_r+0x1e>
 801a03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a042:	f7ff bd07 	b.w	8019a54 <__swbuf_r>
 801a046:	6813      	ldr	r3, [r2, #0]
 801a048:	1c58      	adds	r0, r3, #1
 801a04a:	6010      	str	r0, [r2, #0]
 801a04c:	7019      	strb	r1, [r3, #0]
 801a04e:	4608      	mov	r0, r1
 801a050:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a054:	4770      	bx	lr

0801a056 <__sfputs_r>:
 801a056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a058:	4606      	mov	r6, r0
 801a05a:	460f      	mov	r7, r1
 801a05c:	4614      	mov	r4, r2
 801a05e:	18d5      	adds	r5, r2, r3
 801a060:	42ac      	cmp	r4, r5
 801a062:	d101      	bne.n	801a068 <__sfputs_r+0x12>
 801a064:	2000      	movs	r0, #0
 801a066:	e007      	b.n	801a078 <__sfputs_r+0x22>
 801a068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a06c:	463a      	mov	r2, r7
 801a06e:	4630      	mov	r0, r6
 801a070:	f7ff ffda 	bl	801a028 <__sfputc_r>
 801a074:	1c43      	adds	r3, r0, #1
 801a076:	d1f3      	bne.n	801a060 <__sfputs_r+0xa>
 801a078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a07c <_vfiprintf_r>:
 801a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a080:	460d      	mov	r5, r1
 801a082:	b09d      	sub	sp, #116	; 0x74
 801a084:	4614      	mov	r4, r2
 801a086:	4698      	mov	r8, r3
 801a088:	4606      	mov	r6, r0
 801a08a:	b118      	cbz	r0, 801a094 <_vfiprintf_r+0x18>
 801a08c:	6983      	ldr	r3, [r0, #24]
 801a08e:	b90b      	cbnz	r3, 801a094 <_vfiprintf_r+0x18>
 801a090:	f7ff feba 	bl	8019e08 <__sinit>
 801a094:	4b89      	ldr	r3, [pc, #548]	; (801a2bc <_vfiprintf_r+0x240>)
 801a096:	429d      	cmp	r5, r3
 801a098:	d11b      	bne.n	801a0d2 <_vfiprintf_r+0x56>
 801a09a:	6875      	ldr	r5, [r6, #4]
 801a09c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a09e:	07d9      	lsls	r1, r3, #31
 801a0a0:	d405      	bmi.n	801a0ae <_vfiprintf_r+0x32>
 801a0a2:	89ab      	ldrh	r3, [r5, #12]
 801a0a4:	059a      	lsls	r2, r3, #22
 801a0a6:	d402      	bmi.n	801a0ae <_vfiprintf_r+0x32>
 801a0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0aa:	f7ff ff4b 	bl	8019f44 <__retarget_lock_acquire_recursive>
 801a0ae:	89ab      	ldrh	r3, [r5, #12]
 801a0b0:	071b      	lsls	r3, r3, #28
 801a0b2:	d501      	bpl.n	801a0b8 <_vfiprintf_r+0x3c>
 801a0b4:	692b      	ldr	r3, [r5, #16]
 801a0b6:	b9eb      	cbnz	r3, 801a0f4 <_vfiprintf_r+0x78>
 801a0b8:	4629      	mov	r1, r5
 801a0ba:	4630      	mov	r0, r6
 801a0bc:	f7ff fd1c 	bl	8019af8 <__swsetup_r>
 801a0c0:	b1c0      	cbz	r0, 801a0f4 <_vfiprintf_r+0x78>
 801a0c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0c4:	07dc      	lsls	r4, r3, #31
 801a0c6:	d50e      	bpl.n	801a0e6 <_vfiprintf_r+0x6a>
 801a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0cc:	b01d      	add	sp, #116	; 0x74
 801a0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d2:	4b7b      	ldr	r3, [pc, #492]	; (801a2c0 <_vfiprintf_r+0x244>)
 801a0d4:	429d      	cmp	r5, r3
 801a0d6:	d101      	bne.n	801a0dc <_vfiprintf_r+0x60>
 801a0d8:	68b5      	ldr	r5, [r6, #8]
 801a0da:	e7df      	b.n	801a09c <_vfiprintf_r+0x20>
 801a0dc:	4b79      	ldr	r3, [pc, #484]	; (801a2c4 <_vfiprintf_r+0x248>)
 801a0de:	429d      	cmp	r5, r3
 801a0e0:	bf08      	it	eq
 801a0e2:	68f5      	ldreq	r5, [r6, #12]
 801a0e4:	e7da      	b.n	801a09c <_vfiprintf_r+0x20>
 801a0e6:	89ab      	ldrh	r3, [r5, #12]
 801a0e8:	0598      	lsls	r0, r3, #22
 801a0ea:	d4ed      	bmi.n	801a0c8 <_vfiprintf_r+0x4c>
 801a0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0ee:	f7ff ff2a 	bl	8019f46 <__retarget_lock_release_recursive>
 801a0f2:	e7e9      	b.n	801a0c8 <_vfiprintf_r+0x4c>
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a0f8:	2320      	movs	r3, #32
 801a0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801a102:	2330      	movs	r3, #48	; 0x30
 801a104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a2c8 <_vfiprintf_r+0x24c>
 801a108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a10c:	f04f 0901 	mov.w	r9, #1
 801a110:	4623      	mov	r3, r4
 801a112:	469a      	mov	sl, r3
 801a114:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a118:	b10a      	cbz	r2, 801a11e <_vfiprintf_r+0xa2>
 801a11a:	2a25      	cmp	r2, #37	; 0x25
 801a11c:	d1f9      	bne.n	801a112 <_vfiprintf_r+0x96>
 801a11e:	ebba 0b04 	subs.w	fp, sl, r4
 801a122:	d00b      	beq.n	801a13c <_vfiprintf_r+0xc0>
 801a124:	465b      	mov	r3, fp
 801a126:	4622      	mov	r2, r4
 801a128:	4629      	mov	r1, r5
 801a12a:	4630      	mov	r0, r6
 801a12c:	f7ff ff93 	bl	801a056 <__sfputs_r>
 801a130:	3001      	adds	r0, #1
 801a132:	f000 80aa 	beq.w	801a28a <_vfiprintf_r+0x20e>
 801a136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a138:	445a      	add	r2, fp
 801a13a:	9209      	str	r2, [sp, #36]	; 0x24
 801a13c:	f89a 3000 	ldrb.w	r3, [sl]
 801a140:	2b00      	cmp	r3, #0
 801a142:	f000 80a2 	beq.w	801a28a <_vfiprintf_r+0x20e>
 801a146:	2300      	movs	r3, #0
 801a148:	f04f 32ff 	mov.w	r2, #4294967295
 801a14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a150:	f10a 0a01 	add.w	sl, sl, #1
 801a154:	9304      	str	r3, [sp, #16]
 801a156:	9307      	str	r3, [sp, #28]
 801a158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a15c:	931a      	str	r3, [sp, #104]	; 0x68
 801a15e:	4654      	mov	r4, sl
 801a160:	2205      	movs	r2, #5
 801a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a166:	4858      	ldr	r0, [pc, #352]	; (801a2c8 <_vfiprintf_r+0x24c>)
 801a168:	f7e6 f8b2 	bl	80002d0 <memchr>
 801a16c:	9a04      	ldr	r2, [sp, #16]
 801a16e:	b9d8      	cbnz	r0, 801a1a8 <_vfiprintf_r+0x12c>
 801a170:	06d1      	lsls	r1, r2, #27
 801a172:	bf44      	itt	mi
 801a174:	2320      	movmi	r3, #32
 801a176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a17a:	0713      	lsls	r3, r2, #28
 801a17c:	bf44      	itt	mi
 801a17e:	232b      	movmi	r3, #43	; 0x2b
 801a180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a184:	f89a 3000 	ldrb.w	r3, [sl]
 801a188:	2b2a      	cmp	r3, #42	; 0x2a
 801a18a:	d015      	beq.n	801a1b8 <_vfiprintf_r+0x13c>
 801a18c:	9a07      	ldr	r2, [sp, #28]
 801a18e:	4654      	mov	r4, sl
 801a190:	2000      	movs	r0, #0
 801a192:	f04f 0c0a 	mov.w	ip, #10
 801a196:	4621      	mov	r1, r4
 801a198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a19c:	3b30      	subs	r3, #48	; 0x30
 801a19e:	2b09      	cmp	r3, #9
 801a1a0:	d94e      	bls.n	801a240 <_vfiprintf_r+0x1c4>
 801a1a2:	b1b0      	cbz	r0, 801a1d2 <_vfiprintf_r+0x156>
 801a1a4:	9207      	str	r2, [sp, #28]
 801a1a6:	e014      	b.n	801a1d2 <_vfiprintf_r+0x156>
 801a1a8:	eba0 0308 	sub.w	r3, r0, r8
 801a1ac:	fa09 f303 	lsl.w	r3, r9, r3
 801a1b0:	4313      	orrs	r3, r2
 801a1b2:	9304      	str	r3, [sp, #16]
 801a1b4:	46a2      	mov	sl, r4
 801a1b6:	e7d2      	b.n	801a15e <_vfiprintf_r+0xe2>
 801a1b8:	9b03      	ldr	r3, [sp, #12]
 801a1ba:	1d19      	adds	r1, r3, #4
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	9103      	str	r1, [sp, #12]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	bfbb      	ittet	lt
 801a1c4:	425b      	neglt	r3, r3
 801a1c6:	f042 0202 	orrlt.w	r2, r2, #2
 801a1ca:	9307      	strge	r3, [sp, #28]
 801a1cc:	9307      	strlt	r3, [sp, #28]
 801a1ce:	bfb8      	it	lt
 801a1d0:	9204      	strlt	r2, [sp, #16]
 801a1d2:	7823      	ldrb	r3, [r4, #0]
 801a1d4:	2b2e      	cmp	r3, #46	; 0x2e
 801a1d6:	d10c      	bne.n	801a1f2 <_vfiprintf_r+0x176>
 801a1d8:	7863      	ldrb	r3, [r4, #1]
 801a1da:	2b2a      	cmp	r3, #42	; 0x2a
 801a1dc:	d135      	bne.n	801a24a <_vfiprintf_r+0x1ce>
 801a1de:	9b03      	ldr	r3, [sp, #12]
 801a1e0:	1d1a      	adds	r2, r3, #4
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	9203      	str	r2, [sp, #12]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	bfb8      	it	lt
 801a1ea:	f04f 33ff 	movlt.w	r3, #4294967295
 801a1ee:	3402      	adds	r4, #2
 801a1f0:	9305      	str	r3, [sp, #20]
 801a1f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a2d8 <_vfiprintf_r+0x25c>
 801a1f6:	7821      	ldrb	r1, [r4, #0]
 801a1f8:	2203      	movs	r2, #3
 801a1fa:	4650      	mov	r0, sl
 801a1fc:	f7e6 f868 	bl	80002d0 <memchr>
 801a200:	b140      	cbz	r0, 801a214 <_vfiprintf_r+0x198>
 801a202:	2340      	movs	r3, #64	; 0x40
 801a204:	eba0 000a 	sub.w	r0, r0, sl
 801a208:	fa03 f000 	lsl.w	r0, r3, r0
 801a20c:	9b04      	ldr	r3, [sp, #16]
 801a20e:	4303      	orrs	r3, r0
 801a210:	3401      	adds	r4, #1
 801a212:	9304      	str	r3, [sp, #16]
 801a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a218:	482c      	ldr	r0, [pc, #176]	; (801a2cc <_vfiprintf_r+0x250>)
 801a21a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a21e:	2206      	movs	r2, #6
 801a220:	f7e6 f856 	bl	80002d0 <memchr>
 801a224:	2800      	cmp	r0, #0
 801a226:	d03f      	beq.n	801a2a8 <_vfiprintf_r+0x22c>
 801a228:	4b29      	ldr	r3, [pc, #164]	; (801a2d0 <_vfiprintf_r+0x254>)
 801a22a:	bb1b      	cbnz	r3, 801a274 <_vfiprintf_r+0x1f8>
 801a22c:	9b03      	ldr	r3, [sp, #12]
 801a22e:	3307      	adds	r3, #7
 801a230:	f023 0307 	bic.w	r3, r3, #7
 801a234:	3308      	adds	r3, #8
 801a236:	9303      	str	r3, [sp, #12]
 801a238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a23a:	443b      	add	r3, r7
 801a23c:	9309      	str	r3, [sp, #36]	; 0x24
 801a23e:	e767      	b.n	801a110 <_vfiprintf_r+0x94>
 801a240:	fb0c 3202 	mla	r2, ip, r2, r3
 801a244:	460c      	mov	r4, r1
 801a246:	2001      	movs	r0, #1
 801a248:	e7a5      	b.n	801a196 <_vfiprintf_r+0x11a>
 801a24a:	2300      	movs	r3, #0
 801a24c:	3401      	adds	r4, #1
 801a24e:	9305      	str	r3, [sp, #20]
 801a250:	4619      	mov	r1, r3
 801a252:	f04f 0c0a 	mov.w	ip, #10
 801a256:	4620      	mov	r0, r4
 801a258:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a25c:	3a30      	subs	r2, #48	; 0x30
 801a25e:	2a09      	cmp	r2, #9
 801a260:	d903      	bls.n	801a26a <_vfiprintf_r+0x1ee>
 801a262:	2b00      	cmp	r3, #0
 801a264:	d0c5      	beq.n	801a1f2 <_vfiprintf_r+0x176>
 801a266:	9105      	str	r1, [sp, #20]
 801a268:	e7c3      	b.n	801a1f2 <_vfiprintf_r+0x176>
 801a26a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a26e:	4604      	mov	r4, r0
 801a270:	2301      	movs	r3, #1
 801a272:	e7f0      	b.n	801a256 <_vfiprintf_r+0x1da>
 801a274:	ab03      	add	r3, sp, #12
 801a276:	9300      	str	r3, [sp, #0]
 801a278:	462a      	mov	r2, r5
 801a27a:	4b16      	ldr	r3, [pc, #88]	; (801a2d4 <_vfiprintf_r+0x258>)
 801a27c:	a904      	add	r1, sp, #16
 801a27e:	4630      	mov	r0, r6
 801a280:	f3af 8000 	nop.w
 801a284:	4607      	mov	r7, r0
 801a286:	1c78      	adds	r0, r7, #1
 801a288:	d1d6      	bne.n	801a238 <_vfiprintf_r+0x1bc>
 801a28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a28c:	07d9      	lsls	r1, r3, #31
 801a28e:	d405      	bmi.n	801a29c <_vfiprintf_r+0x220>
 801a290:	89ab      	ldrh	r3, [r5, #12]
 801a292:	059a      	lsls	r2, r3, #22
 801a294:	d402      	bmi.n	801a29c <_vfiprintf_r+0x220>
 801a296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a298:	f7ff fe55 	bl	8019f46 <__retarget_lock_release_recursive>
 801a29c:	89ab      	ldrh	r3, [r5, #12]
 801a29e:	065b      	lsls	r3, r3, #25
 801a2a0:	f53f af12 	bmi.w	801a0c8 <_vfiprintf_r+0x4c>
 801a2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2a6:	e711      	b.n	801a0cc <_vfiprintf_r+0x50>
 801a2a8:	ab03      	add	r3, sp, #12
 801a2aa:	9300      	str	r3, [sp, #0]
 801a2ac:	462a      	mov	r2, r5
 801a2ae:	4b09      	ldr	r3, [pc, #36]	; (801a2d4 <_vfiprintf_r+0x258>)
 801a2b0:	a904      	add	r1, sp, #16
 801a2b2:	4630      	mov	r0, r6
 801a2b4:	f000 f880 	bl	801a3b8 <_printf_i>
 801a2b8:	e7e4      	b.n	801a284 <_vfiprintf_r+0x208>
 801a2ba:	bf00      	nop
 801a2bc:	08030310 	.word	0x08030310
 801a2c0:	08030330 	.word	0x08030330
 801a2c4:	080302f0 	.word	0x080302f0
 801a2c8:	08030350 	.word	0x08030350
 801a2cc:	0803035a 	.word	0x0803035a
 801a2d0:	00000000 	.word	0x00000000
 801a2d4:	0801a057 	.word	0x0801a057
 801a2d8:	08030356 	.word	0x08030356

0801a2dc <_printf_common>:
 801a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2e0:	4616      	mov	r6, r2
 801a2e2:	4699      	mov	r9, r3
 801a2e4:	688a      	ldr	r2, [r1, #8]
 801a2e6:	690b      	ldr	r3, [r1, #16]
 801a2e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	bfb8      	it	lt
 801a2f0:	4613      	movlt	r3, r2
 801a2f2:	6033      	str	r3, [r6, #0]
 801a2f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a2f8:	4607      	mov	r7, r0
 801a2fa:	460c      	mov	r4, r1
 801a2fc:	b10a      	cbz	r2, 801a302 <_printf_common+0x26>
 801a2fe:	3301      	adds	r3, #1
 801a300:	6033      	str	r3, [r6, #0]
 801a302:	6823      	ldr	r3, [r4, #0]
 801a304:	0699      	lsls	r1, r3, #26
 801a306:	bf42      	ittt	mi
 801a308:	6833      	ldrmi	r3, [r6, #0]
 801a30a:	3302      	addmi	r3, #2
 801a30c:	6033      	strmi	r3, [r6, #0]
 801a30e:	6825      	ldr	r5, [r4, #0]
 801a310:	f015 0506 	ands.w	r5, r5, #6
 801a314:	d106      	bne.n	801a324 <_printf_common+0x48>
 801a316:	f104 0a19 	add.w	sl, r4, #25
 801a31a:	68e3      	ldr	r3, [r4, #12]
 801a31c:	6832      	ldr	r2, [r6, #0]
 801a31e:	1a9b      	subs	r3, r3, r2
 801a320:	42ab      	cmp	r3, r5
 801a322:	dc26      	bgt.n	801a372 <_printf_common+0x96>
 801a324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a328:	1e13      	subs	r3, r2, #0
 801a32a:	6822      	ldr	r2, [r4, #0]
 801a32c:	bf18      	it	ne
 801a32e:	2301      	movne	r3, #1
 801a330:	0692      	lsls	r2, r2, #26
 801a332:	d42b      	bmi.n	801a38c <_printf_common+0xb0>
 801a334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a338:	4649      	mov	r1, r9
 801a33a:	4638      	mov	r0, r7
 801a33c:	47c0      	blx	r8
 801a33e:	3001      	adds	r0, #1
 801a340:	d01e      	beq.n	801a380 <_printf_common+0xa4>
 801a342:	6823      	ldr	r3, [r4, #0]
 801a344:	68e5      	ldr	r5, [r4, #12]
 801a346:	6832      	ldr	r2, [r6, #0]
 801a348:	f003 0306 	and.w	r3, r3, #6
 801a34c:	2b04      	cmp	r3, #4
 801a34e:	bf08      	it	eq
 801a350:	1aad      	subeq	r5, r5, r2
 801a352:	68a3      	ldr	r3, [r4, #8]
 801a354:	6922      	ldr	r2, [r4, #16]
 801a356:	bf0c      	ite	eq
 801a358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a35c:	2500      	movne	r5, #0
 801a35e:	4293      	cmp	r3, r2
 801a360:	bfc4      	itt	gt
 801a362:	1a9b      	subgt	r3, r3, r2
 801a364:	18ed      	addgt	r5, r5, r3
 801a366:	2600      	movs	r6, #0
 801a368:	341a      	adds	r4, #26
 801a36a:	42b5      	cmp	r5, r6
 801a36c:	d11a      	bne.n	801a3a4 <_printf_common+0xc8>
 801a36e:	2000      	movs	r0, #0
 801a370:	e008      	b.n	801a384 <_printf_common+0xa8>
 801a372:	2301      	movs	r3, #1
 801a374:	4652      	mov	r2, sl
 801a376:	4649      	mov	r1, r9
 801a378:	4638      	mov	r0, r7
 801a37a:	47c0      	blx	r8
 801a37c:	3001      	adds	r0, #1
 801a37e:	d103      	bne.n	801a388 <_printf_common+0xac>
 801a380:	f04f 30ff 	mov.w	r0, #4294967295
 801a384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a388:	3501      	adds	r5, #1
 801a38a:	e7c6      	b.n	801a31a <_printf_common+0x3e>
 801a38c:	18e1      	adds	r1, r4, r3
 801a38e:	1c5a      	adds	r2, r3, #1
 801a390:	2030      	movs	r0, #48	; 0x30
 801a392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a396:	4422      	add	r2, r4
 801a398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a39c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a3a0:	3302      	adds	r3, #2
 801a3a2:	e7c7      	b.n	801a334 <_printf_common+0x58>
 801a3a4:	2301      	movs	r3, #1
 801a3a6:	4622      	mov	r2, r4
 801a3a8:	4649      	mov	r1, r9
 801a3aa:	4638      	mov	r0, r7
 801a3ac:	47c0      	blx	r8
 801a3ae:	3001      	adds	r0, #1
 801a3b0:	d0e6      	beq.n	801a380 <_printf_common+0xa4>
 801a3b2:	3601      	adds	r6, #1
 801a3b4:	e7d9      	b.n	801a36a <_printf_common+0x8e>
	...

0801a3b8 <_printf_i>:
 801a3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3bc:	460c      	mov	r4, r1
 801a3be:	4691      	mov	r9, r2
 801a3c0:	7e27      	ldrb	r7, [r4, #24]
 801a3c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a3c4:	2f78      	cmp	r7, #120	; 0x78
 801a3c6:	4680      	mov	r8, r0
 801a3c8:	469a      	mov	sl, r3
 801a3ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a3ce:	d807      	bhi.n	801a3e0 <_printf_i+0x28>
 801a3d0:	2f62      	cmp	r7, #98	; 0x62
 801a3d2:	d80a      	bhi.n	801a3ea <_printf_i+0x32>
 801a3d4:	2f00      	cmp	r7, #0
 801a3d6:	f000 80d8 	beq.w	801a58a <_printf_i+0x1d2>
 801a3da:	2f58      	cmp	r7, #88	; 0x58
 801a3dc:	f000 80a3 	beq.w	801a526 <_printf_i+0x16e>
 801a3e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a3e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a3e8:	e03a      	b.n	801a460 <_printf_i+0xa8>
 801a3ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a3ee:	2b15      	cmp	r3, #21
 801a3f0:	d8f6      	bhi.n	801a3e0 <_printf_i+0x28>
 801a3f2:	a001      	add	r0, pc, #4	; (adr r0, 801a3f8 <_printf_i+0x40>)
 801a3f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a3f8:	0801a451 	.word	0x0801a451
 801a3fc:	0801a465 	.word	0x0801a465
 801a400:	0801a3e1 	.word	0x0801a3e1
 801a404:	0801a3e1 	.word	0x0801a3e1
 801a408:	0801a3e1 	.word	0x0801a3e1
 801a40c:	0801a3e1 	.word	0x0801a3e1
 801a410:	0801a465 	.word	0x0801a465
 801a414:	0801a3e1 	.word	0x0801a3e1
 801a418:	0801a3e1 	.word	0x0801a3e1
 801a41c:	0801a3e1 	.word	0x0801a3e1
 801a420:	0801a3e1 	.word	0x0801a3e1
 801a424:	0801a571 	.word	0x0801a571
 801a428:	0801a495 	.word	0x0801a495
 801a42c:	0801a553 	.word	0x0801a553
 801a430:	0801a3e1 	.word	0x0801a3e1
 801a434:	0801a3e1 	.word	0x0801a3e1
 801a438:	0801a593 	.word	0x0801a593
 801a43c:	0801a3e1 	.word	0x0801a3e1
 801a440:	0801a495 	.word	0x0801a495
 801a444:	0801a3e1 	.word	0x0801a3e1
 801a448:	0801a3e1 	.word	0x0801a3e1
 801a44c:	0801a55b 	.word	0x0801a55b
 801a450:	680b      	ldr	r3, [r1, #0]
 801a452:	1d1a      	adds	r2, r3, #4
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	600a      	str	r2, [r1, #0]
 801a458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a45c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a460:	2301      	movs	r3, #1
 801a462:	e0a3      	b.n	801a5ac <_printf_i+0x1f4>
 801a464:	6825      	ldr	r5, [r4, #0]
 801a466:	6808      	ldr	r0, [r1, #0]
 801a468:	062e      	lsls	r6, r5, #24
 801a46a:	f100 0304 	add.w	r3, r0, #4
 801a46e:	d50a      	bpl.n	801a486 <_printf_i+0xce>
 801a470:	6805      	ldr	r5, [r0, #0]
 801a472:	600b      	str	r3, [r1, #0]
 801a474:	2d00      	cmp	r5, #0
 801a476:	da03      	bge.n	801a480 <_printf_i+0xc8>
 801a478:	232d      	movs	r3, #45	; 0x2d
 801a47a:	426d      	negs	r5, r5
 801a47c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a480:	485e      	ldr	r0, [pc, #376]	; (801a5fc <_printf_i+0x244>)
 801a482:	230a      	movs	r3, #10
 801a484:	e019      	b.n	801a4ba <_printf_i+0x102>
 801a486:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a48a:	6805      	ldr	r5, [r0, #0]
 801a48c:	600b      	str	r3, [r1, #0]
 801a48e:	bf18      	it	ne
 801a490:	b22d      	sxthne	r5, r5
 801a492:	e7ef      	b.n	801a474 <_printf_i+0xbc>
 801a494:	680b      	ldr	r3, [r1, #0]
 801a496:	6825      	ldr	r5, [r4, #0]
 801a498:	1d18      	adds	r0, r3, #4
 801a49a:	6008      	str	r0, [r1, #0]
 801a49c:	0628      	lsls	r0, r5, #24
 801a49e:	d501      	bpl.n	801a4a4 <_printf_i+0xec>
 801a4a0:	681d      	ldr	r5, [r3, #0]
 801a4a2:	e002      	b.n	801a4aa <_printf_i+0xf2>
 801a4a4:	0669      	lsls	r1, r5, #25
 801a4a6:	d5fb      	bpl.n	801a4a0 <_printf_i+0xe8>
 801a4a8:	881d      	ldrh	r5, [r3, #0]
 801a4aa:	4854      	ldr	r0, [pc, #336]	; (801a5fc <_printf_i+0x244>)
 801a4ac:	2f6f      	cmp	r7, #111	; 0x6f
 801a4ae:	bf0c      	ite	eq
 801a4b0:	2308      	moveq	r3, #8
 801a4b2:	230a      	movne	r3, #10
 801a4b4:	2100      	movs	r1, #0
 801a4b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a4ba:	6866      	ldr	r6, [r4, #4]
 801a4bc:	60a6      	str	r6, [r4, #8]
 801a4be:	2e00      	cmp	r6, #0
 801a4c0:	bfa2      	ittt	ge
 801a4c2:	6821      	ldrge	r1, [r4, #0]
 801a4c4:	f021 0104 	bicge.w	r1, r1, #4
 801a4c8:	6021      	strge	r1, [r4, #0]
 801a4ca:	b90d      	cbnz	r5, 801a4d0 <_printf_i+0x118>
 801a4cc:	2e00      	cmp	r6, #0
 801a4ce:	d04d      	beq.n	801a56c <_printf_i+0x1b4>
 801a4d0:	4616      	mov	r6, r2
 801a4d2:	fbb5 f1f3 	udiv	r1, r5, r3
 801a4d6:	fb03 5711 	mls	r7, r3, r1, r5
 801a4da:	5dc7      	ldrb	r7, [r0, r7]
 801a4dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a4e0:	462f      	mov	r7, r5
 801a4e2:	42bb      	cmp	r3, r7
 801a4e4:	460d      	mov	r5, r1
 801a4e6:	d9f4      	bls.n	801a4d2 <_printf_i+0x11a>
 801a4e8:	2b08      	cmp	r3, #8
 801a4ea:	d10b      	bne.n	801a504 <_printf_i+0x14c>
 801a4ec:	6823      	ldr	r3, [r4, #0]
 801a4ee:	07df      	lsls	r7, r3, #31
 801a4f0:	d508      	bpl.n	801a504 <_printf_i+0x14c>
 801a4f2:	6923      	ldr	r3, [r4, #16]
 801a4f4:	6861      	ldr	r1, [r4, #4]
 801a4f6:	4299      	cmp	r1, r3
 801a4f8:	bfde      	ittt	le
 801a4fa:	2330      	movle	r3, #48	; 0x30
 801a4fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a500:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a504:	1b92      	subs	r2, r2, r6
 801a506:	6122      	str	r2, [r4, #16]
 801a508:	f8cd a000 	str.w	sl, [sp]
 801a50c:	464b      	mov	r3, r9
 801a50e:	aa03      	add	r2, sp, #12
 801a510:	4621      	mov	r1, r4
 801a512:	4640      	mov	r0, r8
 801a514:	f7ff fee2 	bl	801a2dc <_printf_common>
 801a518:	3001      	adds	r0, #1
 801a51a:	d14c      	bne.n	801a5b6 <_printf_i+0x1fe>
 801a51c:	f04f 30ff 	mov.w	r0, #4294967295
 801a520:	b004      	add	sp, #16
 801a522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a526:	4835      	ldr	r0, [pc, #212]	; (801a5fc <_printf_i+0x244>)
 801a528:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a52c:	6823      	ldr	r3, [r4, #0]
 801a52e:	680e      	ldr	r6, [r1, #0]
 801a530:	061f      	lsls	r7, r3, #24
 801a532:	f856 5b04 	ldr.w	r5, [r6], #4
 801a536:	600e      	str	r6, [r1, #0]
 801a538:	d514      	bpl.n	801a564 <_printf_i+0x1ac>
 801a53a:	07d9      	lsls	r1, r3, #31
 801a53c:	bf44      	itt	mi
 801a53e:	f043 0320 	orrmi.w	r3, r3, #32
 801a542:	6023      	strmi	r3, [r4, #0]
 801a544:	b91d      	cbnz	r5, 801a54e <_printf_i+0x196>
 801a546:	6823      	ldr	r3, [r4, #0]
 801a548:	f023 0320 	bic.w	r3, r3, #32
 801a54c:	6023      	str	r3, [r4, #0]
 801a54e:	2310      	movs	r3, #16
 801a550:	e7b0      	b.n	801a4b4 <_printf_i+0xfc>
 801a552:	6823      	ldr	r3, [r4, #0]
 801a554:	f043 0320 	orr.w	r3, r3, #32
 801a558:	6023      	str	r3, [r4, #0]
 801a55a:	2378      	movs	r3, #120	; 0x78
 801a55c:	4828      	ldr	r0, [pc, #160]	; (801a600 <_printf_i+0x248>)
 801a55e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a562:	e7e3      	b.n	801a52c <_printf_i+0x174>
 801a564:	065e      	lsls	r6, r3, #25
 801a566:	bf48      	it	mi
 801a568:	b2ad      	uxthmi	r5, r5
 801a56a:	e7e6      	b.n	801a53a <_printf_i+0x182>
 801a56c:	4616      	mov	r6, r2
 801a56e:	e7bb      	b.n	801a4e8 <_printf_i+0x130>
 801a570:	680b      	ldr	r3, [r1, #0]
 801a572:	6826      	ldr	r6, [r4, #0]
 801a574:	6960      	ldr	r0, [r4, #20]
 801a576:	1d1d      	adds	r5, r3, #4
 801a578:	600d      	str	r5, [r1, #0]
 801a57a:	0635      	lsls	r5, r6, #24
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	d501      	bpl.n	801a584 <_printf_i+0x1cc>
 801a580:	6018      	str	r0, [r3, #0]
 801a582:	e002      	b.n	801a58a <_printf_i+0x1d2>
 801a584:	0671      	lsls	r1, r6, #25
 801a586:	d5fb      	bpl.n	801a580 <_printf_i+0x1c8>
 801a588:	8018      	strh	r0, [r3, #0]
 801a58a:	2300      	movs	r3, #0
 801a58c:	6123      	str	r3, [r4, #16]
 801a58e:	4616      	mov	r6, r2
 801a590:	e7ba      	b.n	801a508 <_printf_i+0x150>
 801a592:	680b      	ldr	r3, [r1, #0]
 801a594:	1d1a      	adds	r2, r3, #4
 801a596:	600a      	str	r2, [r1, #0]
 801a598:	681e      	ldr	r6, [r3, #0]
 801a59a:	6862      	ldr	r2, [r4, #4]
 801a59c:	2100      	movs	r1, #0
 801a59e:	4630      	mov	r0, r6
 801a5a0:	f7e5 fe96 	bl	80002d0 <memchr>
 801a5a4:	b108      	cbz	r0, 801a5aa <_printf_i+0x1f2>
 801a5a6:	1b80      	subs	r0, r0, r6
 801a5a8:	6060      	str	r0, [r4, #4]
 801a5aa:	6863      	ldr	r3, [r4, #4]
 801a5ac:	6123      	str	r3, [r4, #16]
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a5b4:	e7a8      	b.n	801a508 <_printf_i+0x150>
 801a5b6:	6923      	ldr	r3, [r4, #16]
 801a5b8:	4632      	mov	r2, r6
 801a5ba:	4649      	mov	r1, r9
 801a5bc:	4640      	mov	r0, r8
 801a5be:	47d0      	blx	sl
 801a5c0:	3001      	adds	r0, #1
 801a5c2:	d0ab      	beq.n	801a51c <_printf_i+0x164>
 801a5c4:	6823      	ldr	r3, [r4, #0]
 801a5c6:	079b      	lsls	r3, r3, #30
 801a5c8:	d413      	bmi.n	801a5f2 <_printf_i+0x23a>
 801a5ca:	68e0      	ldr	r0, [r4, #12]
 801a5cc:	9b03      	ldr	r3, [sp, #12]
 801a5ce:	4298      	cmp	r0, r3
 801a5d0:	bfb8      	it	lt
 801a5d2:	4618      	movlt	r0, r3
 801a5d4:	e7a4      	b.n	801a520 <_printf_i+0x168>
 801a5d6:	2301      	movs	r3, #1
 801a5d8:	4632      	mov	r2, r6
 801a5da:	4649      	mov	r1, r9
 801a5dc:	4640      	mov	r0, r8
 801a5de:	47d0      	blx	sl
 801a5e0:	3001      	adds	r0, #1
 801a5e2:	d09b      	beq.n	801a51c <_printf_i+0x164>
 801a5e4:	3501      	adds	r5, #1
 801a5e6:	68e3      	ldr	r3, [r4, #12]
 801a5e8:	9903      	ldr	r1, [sp, #12]
 801a5ea:	1a5b      	subs	r3, r3, r1
 801a5ec:	42ab      	cmp	r3, r5
 801a5ee:	dcf2      	bgt.n	801a5d6 <_printf_i+0x21e>
 801a5f0:	e7eb      	b.n	801a5ca <_printf_i+0x212>
 801a5f2:	2500      	movs	r5, #0
 801a5f4:	f104 0619 	add.w	r6, r4, #25
 801a5f8:	e7f5      	b.n	801a5e6 <_printf_i+0x22e>
 801a5fa:	bf00      	nop
 801a5fc:	08030361 	.word	0x08030361
 801a600:	08030372 	.word	0x08030372

0801a604 <_putc_r>:
 801a604:	b570      	push	{r4, r5, r6, lr}
 801a606:	460d      	mov	r5, r1
 801a608:	4614      	mov	r4, r2
 801a60a:	4606      	mov	r6, r0
 801a60c:	b118      	cbz	r0, 801a616 <_putc_r+0x12>
 801a60e:	6983      	ldr	r3, [r0, #24]
 801a610:	b90b      	cbnz	r3, 801a616 <_putc_r+0x12>
 801a612:	f7ff fbf9 	bl	8019e08 <__sinit>
 801a616:	4b1c      	ldr	r3, [pc, #112]	; (801a688 <_putc_r+0x84>)
 801a618:	429c      	cmp	r4, r3
 801a61a:	d124      	bne.n	801a666 <_putc_r+0x62>
 801a61c:	6874      	ldr	r4, [r6, #4]
 801a61e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a620:	07d8      	lsls	r0, r3, #31
 801a622:	d405      	bmi.n	801a630 <_putc_r+0x2c>
 801a624:	89a3      	ldrh	r3, [r4, #12]
 801a626:	0599      	lsls	r1, r3, #22
 801a628:	d402      	bmi.n	801a630 <_putc_r+0x2c>
 801a62a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a62c:	f7ff fc8a 	bl	8019f44 <__retarget_lock_acquire_recursive>
 801a630:	68a3      	ldr	r3, [r4, #8]
 801a632:	3b01      	subs	r3, #1
 801a634:	2b00      	cmp	r3, #0
 801a636:	60a3      	str	r3, [r4, #8]
 801a638:	da05      	bge.n	801a646 <_putc_r+0x42>
 801a63a:	69a2      	ldr	r2, [r4, #24]
 801a63c:	4293      	cmp	r3, r2
 801a63e:	db1c      	blt.n	801a67a <_putc_r+0x76>
 801a640:	b2eb      	uxtb	r3, r5
 801a642:	2b0a      	cmp	r3, #10
 801a644:	d019      	beq.n	801a67a <_putc_r+0x76>
 801a646:	6823      	ldr	r3, [r4, #0]
 801a648:	1c5a      	adds	r2, r3, #1
 801a64a:	6022      	str	r2, [r4, #0]
 801a64c:	701d      	strb	r5, [r3, #0]
 801a64e:	b2ed      	uxtb	r5, r5
 801a650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a652:	07da      	lsls	r2, r3, #31
 801a654:	d405      	bmi.n	801a662 <_putc_r+0x5e>
 801a656:	89a3      	ldrh	r3, [r4, #12]
 801a658:	059b      	lsls	r3, r3, #22
 801a65a:	d402      	bmi.n	801a662 <_putc_r+0x5e>
 801a65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a65e:	f7ff fc72 	bl	8019f46 <__retarget_lock_release_recursive>
 801a662:	4628      	mov	r0, r5
 801a664:	bd70      	pop	{r4, r5, r6, pc}
 801a666:	4b09      	ldr	r3, [pc, #36]	; (801a68c <_putc_r+0x88>)
 801a668:	429c      	cmp	r4, r3
 801a66a:	d101      	bne.n	801a670 <_putc_r+0x6c>
 801a66c:	68b4      	ldr	r4, [r6, #8]
 801a66e:	e7d6      	b.n	801a61e <_putc_r+0x1a>
 801a670:	4b07      	ldr	r3, [pc, #28]	; (801a690 <_putc_r+0x8c>)
 801a672:	429c      	cmp	r4, r3
 801a674:	bf08      	it	eq
 801a676:	68f4      	ldreq	r4, [r6, #12]
 801a678:	e7d1      	b.n	801a61e <_putc_r+0x1a>
 801a67a:	4629      	mov	r1, r5
 801a67c:	4622      	mov	r2, r4
 801a67e:	4630      	mov	r0, r6
 801a680:	f7ff f9e8 	bl	8019a54 <__swbuf_r>
 801a684:	4605      	mov	r5, r0
 801a686:	e7e3      	b.n	801a650 <_putc_r+0x4c>
 801a688:	08030310 	.word	0x08030310
 801a68c:	08030330 	.word	0x08030330
 801a690:	080302f0 	.word	0x080302f0

0801a694 <__sread>:
 801a694:	b510      	push	{r4, lr}
 801a696:	460c      	mov	r4, r1
 801a698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a69c:	f000 f894 	bl	801a7c8 <_read_r>
 801a6a0:	2800      	cmp	r0, #0
 801a6a2:	bfab      	itete	ge
 801a6a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a6a6:	89a3      	ldrhlt	r3, [r4, #12]
 801a6a8:	181b      	addge	r3, r3, r0
 801a6aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a6ae:	bfac      	ite	ge
 801a6b0:	6563      	strge	r3, [r4, #84]	; 0x54
 801a6b2:	81a3      	strhlt	r3, [r4, #12]
 801a6b4:	bd10      	pop	{r4, pc}

0801a6b6 <__swrite>:
 801a6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ba:	461f      	mov	r7, r3
 801a6bc:	898b      	ldrh	r3, [r1, #12]
 801a6be:	05db      	lsls	r3, r3, #23
 801a6c0:	4605      	mov	r5, r0
 801a6c2:	460c      	mov	r4, r1
 801a6c4:	4616      	mov	r6, r2
 801a6c6:	d505      	bpl.n	801a6d4 <__swrite+0x1e>
 801a6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6cc:	2302      	movs	r3, #2
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	f000 f868 	bl	801a7a4 <_lseek_r>
 801a6d4:	89a3      	ldrh	r3, [r4, #12]
 801a6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a6de:	81a3      	strh	r3, [r4, #12]
 801a6e0:	4632      	mov	r2, r6
 801a6e2:	463b      	mov	r3, r7
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ea:	f000 b817 	b.w	801a71c <_write_r>

0801a6ee <__sseek>:
 801a6ee:	b510      	push	{r4, lr}
 801a6f0:	460c      	mov	r4, r1
 801a6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6f6:	f000 f855 	bl	801a7a4 <_lseek_r>
 801a6fa:	1c43      	adds	r3, r0, #1
 801a6fc:	89a3      	ldrh	r3, [r4, #12]
 801a6fe:	bf15      	itete	ne
 801a700:	6560      	strne	r0, [r4, #84]	; 0x54
 801a702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a70a:	81a3      	strheq	r3, [r4, #12]
 801a70c:	bf18      	it	ne
 801a70e:	81a3      	strhne	r3, [r4, #12]
 801a710:	bd10      	pop	{r4, pc}

0801a712 <__sclose>:
 801a712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a716:	f000 b813 	b.w	801a740 <_close_r>
	...

0801a71c <_write_r>:
 801a71c:	b538      	push	{r3, r4, r5, lr}
 801a71e:	4d07      	ldr	r5, [pc, #28]	; (801a73c <_write_r+0x20>)
 801a720:	4604      	mov	r4, r0
 801a722:	4608      	mov	r0, r1
 801a724:	4611      	mov	r1, r2
 801a726:	2200      	movs	r2, #0
 801a728:	602a      	str	r2, [r5, #0]
 801a72a:	461a      	mov	r2, r3
 801a72c:	f7e9 fb77 	bl	8003e1e <_write>
 801a730:	1c43      	adds	r3, r0, #1
 801a732:	d102      	bne.n	801a73a <_write_r+0x1e>
 801a734:	682b      	ldr	r3, [r5, #0]
 801a736:	b103      	cbz	r3, 801a73a <_write_r+0x1e>
 801a738:	6023      	str	r3, [r4, #0]
 801a73a:	bd38      	pop	{r3, r4, r5, pc}
 801a73c:	2004c9cc 	.word	0x2004c9cc

0801a740 <_close_r>:
 801a740:	b538      	push	{r3, r4, r5, lr}
 801a742:	4d06      	ldr	r5, [pc, #24]	; (801a75c <_close_r+0x1c>)
 801a744:	2300      	movs	r3, #0
 801a746:	4604      	mov	r4, r0
 801a748:	4608      	mov	r0, r1
 801a74a:	602b      	str	r3, [r5, #0]
 801a74c:	f7e9 fb83 	bl	8003e56 <_close>
 801a750:	1c43      	adds	r3, r0, #1
 801a752:	d102      	bne.n	801a75a <_close_r+0x1a>
 801a754:	682b      	ldr	r3, [r5, #0]
 801a756:	b103      	cbz	r3, 801a75a <_close_r+0x1a>
 801a758:	6023      	str	r3, [r4, #0]
 801a75a:	bd38      	pop	{r3, r4, r5, pc}
 801a75c:	2004c9cc 	.word	0x2004c9cc

0801a760 <_fstat_r>:
 801a760:	b538      	push	{r3, r4, r5, lr}
 801a762:	4d07      	ldr	r5, [pc, #28]	; (801a780 <_fstat_r+0x20>)
 801a764:	2300      	movs	r3, #0
 801a766:	4604      	mov	r4, r0
 801a768:	4608      	mov	r0, r1
 801a76a:	4611      	mov	r1, r2
 801a76c:	602b      	str	r3, [r5, #0]
 801a76e:	f7e9 fb7e 	bl	8003e6e <_fstat>
 801a772:	1c43      	adds	r3, r0, #1
 801a774:	d102      	bne.n	801a77c <_fstat_r+0x1c>
 801a776:	682b      	ldr	r3, [r5, #0]
 801a778:	b103      	cbz	r3, 801a77c <_fstat_r+0x1c>
 801a77a:	6023      	str	r3, [r4, #0]
 801a77c:	bd38      	pop	{r3, r4, r5, pc}
 801a77e:	bf00      	nop
 801a780:	2004c9cc 	.word	0x2004c9cc

0801a784 <_isatty_r>:
 801a784:	b538      	push	{r3, r4, r5, lr}
 801a786:	4d06      	ldr	r5, [pc, #24]	; (801a7a0 <_isatty_r+0x1c>)
 801a788:	2300      	movs	r3, #0
 801a78a:	4604      	mov	r4, r0
 801a78c:	4608      	mov	r0, r1
 801a78e:	602b      	str	r3, [r5, #0]
 801a790:	f7e9 fb7d 	bl	8003e8e <_isatty>
 801a794:	1c43      	adds	r3, r0, #1
 801a796:	d102      	bne.n	801a79e <_isatty_r+0x1a>
 801a798:	682b      	ldr	r3, [r5, #0]
 801a79a:	b103      	cbz	r3, 801a79e <_isatty_r+0x1a>
 801a79c:	6023      	str	r3, [r4, #0]
 801a79e:	bd38      	pop	{r3, r4, r5, pc}
 801a7a0:	2004c9cc 	.word	0x2004c9cc

0801a7a4 <_lseek_r>:
 801a7a4:	b538      	push	{r3, r4, r5, lr}
 801a7a6:	4d07      	ldr	r5, [pc, #28]	; (801a7c4 <_lseek_r+0x20>)
 801a7a8:	4604      	mov	r4, r0
 801a7aa:	4608      	mov	r0, r1
 801a7ac:	4611      	mov	r1, r2
 801a7ae:	2200      	movs	r2, #0
 801a7b0:	602a      	str	r2, [r5, #0]
 801a7b2:	461a      	mov	r2, r3
 801a7b4:	f7e9 fb76 	bl	8003ea4 <_lseek>
 801a7b8:	1c43      	adds	r3, r0, #1
 801a7ba:	d102      	bne.n	801a7c2 <_lseek_r+0x1e>
 801a7bc:	682b      	ldr	r3, [r5, #0]
 801a7be:	b103      	cbz	r3, 801a7c2 <_lseek_r+0x1e>
 801a7c0:	6023      	str	r3, [r4, #0]
 801a7c2:	bd38      	pop	{r3, r4, r5, pc}
 801a7c4:	2004c9cc 	.word	0x2004c9cc

0801a7c8 <_read_r>:
 801a7c8:	b538      	push	{r3, r4, r5, lr}
 801a7ca:	4d07      	ldr	r5, [pc, #28]	; (801a7e8 <_read_r+0x20>)
 801a7cc:	4604      	mov	r4, r0
 801a7ce:	4608      	mov	r0, r1
 801a7d0:	4611      	mov	r1, r2
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	602a      	str	r2, [r5, #0]
 801a7d6:	461a      	mov	r2, r3
 801a7d8:	f7e9 fb04 	bl	8003de4 <_read>
 801a7dc:	1c43      	adds	r3, r0, #1
 801a7de:	d102      	bne.n	801a7e6 <_read_r+0x1e>
 801a7e0:	682b      	ldr	r3, [r5, #0]
 801a7e2:	b103      	cbz	r3, 801a7e6 <_read_r+0x1e>
 801a7e4:	6023      	str	r3, [r4, #0]
 801a7e6:	bd38      	pop	{r3, r4, r5, pc}
 801a7e8:	2004c9cc 	.word	0x2004c9cc
 801a7ec:	00000000 	.word	0x00000000

0801a7f0 <log10>:
 801a7f0:	b538      	push	{r3, r4, r5, lr}
 801a7f2:	ed2d 8b02 	vpush	{d8}
 801a7f6:	ec55 4b10 	vmov	r4, r5, d0
 801a7fa:	f000 f869 	bl	801a8d0 <__ieee754_log10>
 801a7fe:	4b1e      	ldr	r3, [pc, #120]	; (801a878 <log10+0x88>)
 801a800:	eeb0 8a40 	vmov.f32	s16, s0
 801a804:	eef0 8a60 	vmov.f32	s17, s1
 801a808:	f993 3000 	ldrsb.w	r3, [r3]
 801a80c:	3301      	adds	r3, #1
 801a80e:	d01a      	beq.n	801a846 <log10+0x56>
 801a810:	4622      	mov	r2, r4
 801a812:	462b      	mov	r3, r5
 801a814:	4620      	mov	r0, r4
 801a816:	4629      	mov	r1, r5
 801a818:	f7e6 fa00 	bl	8000c1c <__aeabi_dcmpun>
 801a81c:	b998      	cbnz	r0, 801a846 <log10+0x56>
 801a81e:	2200      	movs	r2, #0
 801a820:	2300      	movs	r3, #0
 801a822:	4620      	mov	r0, r4
 801a824:	4629      	mov	r1, r5
 801a826:	f7e6 f9db 	bl	8000be0 <__aeabi_dcmple>
 801a82a:	b160      	cbz	r0, 801a846 <log10+0x56>
 801a82c:	2200      	movs	r2, #0
 801a82e:	2300      	movs	r3, #0
 801a830:	4620      	mov	r0, r4
 801a832:	4629      	mov	r1, r5
 801a834:	f7e6 f9c0 	bl	8000bb8 <__aeabi_dcmpeq>
 801a838:	b160      	cbz	r0, 801a854 <log10+0x64>
 801a83a:	f7fe ff5d 	bl	80196f8 <__errno>
 801a83e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801a870 <log10+0x80>
 801a842:	2322      	movs	r3, #34	; 0x22
 801a844:	6003      	str	r3, [r0, #0]
 801a846:	eeb0 0a48 	vmov.f32	s0, s16
 801a84a:	eef0 0a68 	vmov.f32	s1, s17
 801a84e:	ecbd 8b02 	vpop	{d8}
 801a852:	bd38      	pop	{r3, r4, r5, pc}
 801a854:	f7fe ff50 	bl	80196f8 <__errno>
 801a858:	ecbd 8b02 	vpop	{d8}
 801a85c:	2321      	movs	r3, #33	; 0x21
 801a85e:	6003      	str	r3, [r0, #0]
 801a860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a864:	4805      	ldr	r0, [pc, #20]	; (801a87c <log10+0x8c>)
 801a866:	f000 b8c3 	b.w	801a9f0 <nan>
 801a86a:	bf00      	nop
 801a86c:	f3af 8000 	nop.w
 801a870:	00000000 	.word	0x00000000
 801a874:	fff00000 	.word	0xfff00000
 801a878:	200000c4 	.word	0x200000c4
 801a87c:	08030355 	.word	0x08030355

0801a880 <sqrtf>:
 801a880:	b508      	push	{r3, lr}
 801a882:	ed2d 8b02 	vpush	{d8}
 801a886:	eeb0 8a40 	vmov.f32	s16, s0
 801a88a:	f000 f8ab 	bl	801a9e4 <__ieee754_sqrtf>
 801a88e:	4b0d      	ldr	r3, [pc, #52]	; (801a8c4 <sqrtf+0x44>)
 801a890:	f993 3000 	ldrsb.w	r3, [r3]
 801a894:	3301      	adds	r3, #1
 801a896:	d011      	beq.n	801a8bc <sqrtf+0x3c>
 801a898:	eeb4 8a48 	vcmp.f32	s16, s16
 801a89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a0:	d60c      	bvs.n	801a8bc <sqrtf+0x3c>
 801a8a2:	eddf 8a09 	vldr	s17, [pc, #36]	; 801a8c8 <sqrtf+0x48>
 801a8a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ae:	d505      	bpl.n	801a8bc <sqrtf+0x3c>
 801a8b0:	f7fe ff22 	bl	80196f8 <__errno>
 801a8b4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a8b8:	2321      	movs	r3, #33	; 0x21
 801a8ba:	6003      	str	r3, [r0, #0]
 801a8bc:	ecbd 8b02 	vpop	{d8}
 801a8c0:	bd08      	pop	{r3, pc}
 801a8c2:	bf00      	nop
 801a8c4:	200000c4 	.word	0x200000c4
	...

0801a8d0 <__ieee754_log10>:
 801a8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8d4:	ec55 4b10 	vmov	r4, r5, d0
 801a8d8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801a8dc:	462b      	mov	r3, r5
 801a8de:	da2f      	bge.n	801a940 <__ieee754_log10+0x70>
 801a8e0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801a8e4:	4322      	orrs	r2, r4
 801a8e6:	d109      	bne.n	801a8fc <__ieee754_log10+0x2c>
 801a8e8:	493b      	ldr	r1, [pc, #236]	; (801a9d8 <__ieee754_log10+0x108>)
 801a8ea:	2200      	movs	r2, #0
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	2000      	movs	r0, #0
 801a8f0:	f7e6 f824 	bl	800093c <__aeabi_ddiv>
 801a8f4:	ec41 0b10 	vmov	d0, r0, r1
 801a8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a8fc:	2d00      	cmp	r5, #0
 801a8fe:	da09      	bge.n	801a914 <__ieee754_log10+0x44>
 801a900:	ee10 2a10 	vmov	r2, s0
 801a904:	ee10 0a10 	vmov	r0, s0
 801a908:	4629      	mov	r1, r5
 801a90a:	f7e5 fd35 	bl	8000378 <__aeabi_dsub>
 801a90e:	2200      	movs	r2, #0
 801a910:	2300      	movs	r3, #0
 801a912:	e7ed      	b.n	801a8f0 <__ieee754_log10+0x20>
 801a914:	4b31      	ldr	r3, [pc, #196]	; (801a9dc <__ieee754_log10+0x10c>)
 801a916:	2200      	movs	r2, #0
 801a918:	4629      	mov	r1, r5
 801a91a:	ee10 0a10 	vmov	r0, s0
 801a91e:	f7e5 fee3 	bl	80006e8 <__aeabi_dmul>
 801a922:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801a926:	4604      	mov	r4, r0
 801a928:	460d      	mov	r5, r1
 801a92a:	460b      	mov	r3, r1
 801a92c:	492c      	ldr	r1, [pc, #176]	; (801a9e0 <__ieee754_log10+0x110>)
 801a92e:	428b      	cmp	r3, r1
 801a930:	dd08      	ble.n	801a944 <__ieee754_log10+0x74>
 801a932:	4622      	mov	r2, r4
 801a934:	462b      	mov	r3, r5
 801a936:	4620      	mov	r0, r4
 801a938:	4629      	mov	r1, r5
 801a93a:	f7e5 fd1f 	bl	800037c <__adddf3>
 801a93e:	e7d9      	b.n	801a8f4 <__ieee754_log10+0x24>
 801a940:	2200      	movs	r2, #0
 801a942:	e7f3      	b.n	801a92c <__ieee754_log10+0x5c>
 801a944:	1518      	asrs	r0, r3, #20
 801a946:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801a94a:	4410      	add	r0, r2
 801a94c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801a950:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801a954:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801a958:	f7e5 fe5c 	bl	8000614 <__aeabi_i2d>
 801a95c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801a960:	3303      	adds	r3, #3
 801a962:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801a966:	ec45 4b10 	vmov	d0, r4, r5
 801a96a:	4606      	mov	r6, r0
 801a96c:	460f      	mov	r7, r1
 801a96e:	f000 f847 	bl	801aa00 <__ieee754_log>
 801a972:	a313      	add	r3, pc, #76	; (adr r3, 801a9c0 <__ieee754_log10+0xf0>)
 801a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a978:	4630      	mov	r0, r6
 801a97a:	4639      	mov	r1, r7
 801a97c:	ec59 8b10 	vmov	r8, r9, d0
 801a980:	f7e5 feb2 	bl	80006e8 <__aeabi_dmul>
 801a984:	a310      	add	r3, pc, #64	; (adr r3, 801a9c8 <__ieee754_log10+0xf8>)
 801a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a98a:	4604      	mov	r4, r0
 801a98c:	460d      	mov	r5, r1
 801a98e:	4640      	mov	r0, r8
 801a990:	4649      	mov	r1, r9
 801a992:	f7e5 fea9 	bl	80006e8 <__aeabi_dmul>
 801a996:	4602      	mov	r2, r0
 801a998:	460b      	mov	r3, r1
 801a99a:	4620      	mov	r0, r4
 801a99c:	4629      	mov	r1, r5
 801a99e:	f7e5 fced 	bl	800037c <__adddf3>
 801a9a2:	a30b      	add	r3, pc, #44	; (adr r3, 801a9d0 <__ieee754_log10+0x100>)
 801a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a8:	4604      	mov	r4, r0
 801a9aa:	460d      	mov	r5, r1
 801a9ac:	4630      	mov	r0, r6
 801a9ae:	4639      	mov	r1, r7
 801a9b0:	f7e5 fe9a 	bl	80006e8 <__aeabi_dmul>
 801a9b4:	4602      	mov	r2, r0
 801a9b6:	460b      	mov	r3, r1
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	4629      	mov	r1, r5
 801a9bc:	e7bd      	b.n	801a93a <__ieee754_log10+0x6a>
 801a9be:	bf00      	nop
 801a9c0:	11f12b36 	.word	0x11f12b36
 801a9c4:	3d59fef3 	.word	0x3d59fef3
 801a9c8:	1526e50e 	.word	0x1526e50e
 801a9cc:	3fdbcb7b 	.word	0x3fdbcb7b
 801a9d0:	509f6000 	.word	0x509f6000
 801a9d4:	3fd34413 	.word	0x3fd34413
 801a9d8:	c3500000 	.word	0xc3500000
 801a9dc:	43500000 	.word	0x43500000
 801a9e0:	7fefffff 	.word	0x7fefffff

0801a9e4 <__ieee754_sqrtf>:
 801a9e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a9e8:	4770      	bx	lr
 801a9ea:	0000      	movs	r0, r0
 801a9ec:	0000      	movs	r0, r0
	...

0801a9f0 <nan>:
 801a9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a9f8 <nan+0x8>
 801a9f4:	4770      	bx	lr
 801a9f6:	bf00      	nop
 801a9f8:	00000000 	.word	0x00000000
 801a9fc:	7ff80000 	.word	0x7ff80000

0801aa00 <__ieee754_log>:
 801aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa04:	ec51 0b10 	vmov	r0, r1, d0
 801aa08:	ed2d 8b04 	vpush	{d8-d9}
 801aa0c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801aa10:	b083      	sub	sp, #12
 801aa12:	460d      	mov	r5, r1
 801aa14:	da29      	bge.n	801aa6a <__ieee754_log+0x6a>
 801aa16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa1a:	4303      	orrs	r3, r0
 801aa1c:	ee10 2a10 	vmov	r2, s0
 801aa20:	d10c      	bne.n	801aa3c <__ieee754_log+0x3c>
 801aa22:	49cf      	ldr	r1, [pc, #828]	; (801ad60 <__ieee754_log+0x360>)
 801aa24:	2200      	movs	r2, #0
 801aa26:	2300      	movs	r3, #0
 801aa28:	2000      	movs	r0, #0
 801aa2a:	f7e5 ff87 	bl	800093c <__aeabi_ddiv>
 801aa2e:	ec41 0b10 	vmov	d0, r0, r1
 801aa32:	b003      	add	sp, #12
 801aa34:	ecbd 8b04 	vpop	{d8-d9}
 801aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa3c:	2900      	cmp	r1, #0
 801aa3e:	da05      	bge.n	801aa4c <__ieee754_log+0x4c>
 801aa40:	460b      	mov	r3, r1
 801aa42:	f7e5 fc99 	bl	8000378 <__aeabi_dsub>
 801aa46:	2200      	movs	r2, #0
 801aa48:	2300      	movs	r3, #0
 801aa4a:	e7ee      	b.n	801aa2a <__ieee754_log+0x2a>
 801aa4c:	4bc5      	ldr	r3, [pc, #788]	; (801ad64 <__ieee754_log+0x364>)
 801aa4e:	2200      	movs	r2, #0
 801aa50:	f7e5 fe4a 	bl	80006e8 <__aeabi_dmul>
 801aa54:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801aa58:	460d      	mov	r5, r1
 801aa5a:	4ac3      	ldr	r2, [pc, #780]	; (801ad68 <__ieee754_log+0x368>)
 801aa5c:	4295      	cmp	r5, r2
 801aa5e:	dd06      	ble.n	801aa6e <__ieee754_log+0x6e>
 801aa60:	4602      	mov	r2, r0
 801aa62:	460b      	mov	r3, r1
 801aa64:	f7e5 fc8a 	bl	800037c <__adddf3>
 801aa68:	e7e1      	b.n	801aa2e <__ieee754_log+0x2e>
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	e7f5      	b.n	801aa5a <__ieee754_log+0x5a>
 801aa6e:	152c      	asrs	r4, r5, #20
 801aa70:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801aa74:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801aa78:	441c      	add	r4, r3
 801aa7a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801aa7e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801aa82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801aa86:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801aa8a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801aa8e:	ea42 0105 	orr.w	r1, r2, r5
 801aa92:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801aa96:	2200      	movs	r2, #0
 801aa98:	4bb4      	ldr	r3, [pc, #720]	; (801ad6c <__ieee754_log+0x36c>)
 801aa9a:	f7e5 fc6d 	bl	8000378 <__aeabi_dsub>
 801aa9e:	1cab      	adds	r3, r5, #2
 801aaa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aaa4:	2b02      	cmp	r3, #2
 801aaa6:	4682      	mov	sl, r0
 801aaa8:	468b      	mov	fp, r1
 801aaaa:	f04f 0200 	mov.w	r2, #0
 801aaae:	dc53      	bgt.n	801ab58 <__ieee754_log+0x158>
 801aab0:	2300      	movs	r3, #0
 801aab2:	f7e6 f881 	bl	8000bb8 <__aeabi_dcmpeq>
 801aab6:	b1d0      	cbz	r0, 801aaee <__ieee754_log+0xee>
 801aab8:	2c00      	cmp	r4, #0
 801aaba:	f000 8122 	beq.w	801ad02 <__ieee754_log+0x302>
 801aabe:	4620      	mov	r0, r4
 801aac0:	f7e5 fda8 	bl	8000614 <__aeabi_i2d>
 801aac4:	a390      	add	r3, pc, #576	; (adr r3, 801ad08 <__ieee754_log+0x308>)
 801aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaca:	4606      	mov	r6, r0
 801aacc:	460f      	mov	r7, r1
 801aace:	f7e5 fe0b 	bl	80006e8 <__aeabi_dmul>
 801aad2:	a38f      	add	r3, pc, #572	; (adr r3, 801ad10 <__ieee754_log+0x310>)
 801aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad8:	4604      	mov	r4, r0
 801aada:	460d      	mov	r5, r1
 801aadc:	4630      	mov	r0, r6
 801aade:	4639      	mov	r1, r7
 801aae0:	f7e5 fe02 	bl	80006e8 <__aeabi_dmul>
 801aae4:	4602      	mov	r2, r0
 801aae6:	460b      	mov	r3, r1
 801aae8:	4620      	mov	r0, r4
 801aaea:	4629      	mov	r1, r5
 801aaec:	e7ba      	b.n	801aa64 <__ieee754_log+0x64>
 801aaee:	a38a      	add	r3, pc, #552	; (adr r3, 801ad18 <__ieee754_log+0x318>)
 801aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf4:	4650      	mov	r0, sl
 801aaf6:	4659      	mov	r1, fp
 801aaf8:	f7e5 fdf6 	bl	80006e8 <__aeabi_dmul>
 801aafc:	4602      	mov	r2, r0
 801aafe:	460b      	mov	r3, r1
 801ab00:	2000      	movs	r0, #0
 801ab02:	499b      	ldr	r1, [pc, #620]	; (801ad70 <__ieee754_log+0x370>)
 801ab04:	f7e5 fc38 	bl	8000378 <__aeabi_dsub>
 801ab08:	4652      	mov	r2, sl
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	460f      	mov	r7, r1
 801ab0e:	465b      	mov	r3, fp
 801ab10:	4650      	mov	r0, sl
 801ab12:	4659      	mov	r1, fp
 801ab14:	f7e5 fde8 	bl	80006e8 <__aeabi_dmul>
 801ab18:	4602      	mov	r2, r0
 801ab1a:	460b      	mov	r3, r1
 801ab1c:	4630      	mov	r0, r6
 801ab1e:	4639      	mov	r1, r7
 801ab20:	f7e5 fde2 	bl	80006e8 <__aeabi_dmul>
 801ab24:	4606      	mov	r6, r0
 801ab26:	460f      	mov	r7, r1
 801ab28:	b914      	cbnz	r4, 801ab30 <__ieee754_log+0x130>
 801ab2a:	4632      	mov	r2, r6
 801ab2c:	463b      	mov	r3, r7
 801ab2e:	e0a2      	b.n	801ac76 <__ieee754_log+0x276>
 801ab30:	4620      	mov	r0, r4
 801ab32:	f7e5 fd6f 	bl	8000614 <__aeabi_i2d>
 801ab36:	a374      	add	r3, pc, #464	; (adr r3, 801ad08 <__ieee754_log+0x308>)
 801ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3c:	4680      	mov	r8, r0
 801ab3e:	4689      	mov	r9, r1
 801ab40:	f7e5 fdd2 	bl	80006e8 <__aeabi_dmul>
 801ab44:	a372      	add	r3, pc, #456	; (adr r3, 801ad10 <__ieee754_log+0x310>)
 801ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4a:	4604      	mov	r4, r0
 801ab4c:	460d      	mov	r5, r1
 801ab4e:	4640      	mov	r0, r8
 801ab50:	4649      	mov	r1, r9
 801ab52:	f7e5 fdc9 	bl	80006e8 <__aeabi_dmul>
 801ab56:	e0a7      	b.n	801aca8 <__ieee754_log+0x2a8>
 801ab58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ab5c:	f7e5 fc0e 	bl	800037c <__adddf3>
 801ab60:	4602      	mov	r2, r0
 801ab62:	460b      	mov	r3, r1
 801ab64:	4650      	mov	r0, sl
 801ab66:	4659      	mov	r1, fp
 801ab68:	f7e5 fee8 	bl	800093c <__aeabi_ddiv>
 801ab6c:	ec41 0b18 	vmov	d8, r0, r1
 801ab70:	4620      	mov	r0, r4
 801ab72:	f7e5 fd4f 	bl	8000614 <__aeabi_i2d>
 801ab76:	ec53 2b18 	vmov	r2, r3, d8
 801ab7a:	ec41 0b19 	vmov	d9, r0, r1
 801ab7e:	ec51 0b18 	vmov	r0, r1, d8
 801ab82:	f7e5 fdb1 	bl	80006e8 <__aeabi_dmul>
 801ab86:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801ab8a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801ab8e:	9301      	str	r3, [sp, #4]
 801ab90:	4602      	mov	r2, r0
 801ab92:	460b      	mov	r3, r1
 801ab94:	4680      	mov	r8, r0
 801ab96:	4689      	mov	r9, r1
 801ab98:	f7e5 fda6 	bl	80006e8 <__aeabi_dmul>
 801ab9c:	a360      	add	r3, pc, #384	; (adr r3, 801ad20 <__ieee754_log+0x320>)
 801ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba2:	4606      	mov	r6, r0
 801aba4:	460f      	mov	r7, r1
 801aba6:	f7e5 fd9f 	bl	80006e8 <__aeabi_dmul>
 801abaa:	a35f      	add	r3, pc, #380	; (adr r3, 801ad28 <__ieee754_log+0x328>)
 801abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb0:	f7e5 fbe4 	bl	800037c <__adddf3>
 801abb4:	4632      	mov	r2, r6
 801abb6:	463b      	mov	r3, r7
 801abb8:	f7e5 fd96 	bl	80006e8 <__aeabi_dmul>
 801abbc:	a35c      	add	r3, pc, #368	; (adr r3, 801ad30 <__ieee754_log+0x330>)
 801abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abc2:	f7e5 fbdb 	bl	800037c <__adddf3>
 801abc6:	4632      	mov	r2, r6
 801abc8:	463b      	mov	r3, r7
 801abca:	f7e5 fd8d 	bl	80006e8 <__aeabi_dmul>
 801abce:	a35a      	add	r3, pc, #360	; (adr r3, 801ad38 <__ieee754_log+0x338>)
 801abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd4:	f7e5 fbd2 	bl	800037c <__adddf3>
 801abd8:	4642      	mov	r2, r8
 801abda:	464b      	mov	r3, r9
 801abdc:	f7e5 fd84 	bl	80006e8 <__aeabi_dmul>
 801abe0:	a357      	add	r3, pc, #348	; (adr r3, 801ad40 <__ieee754_log+0x340>)
 801abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe6:	4680      	mov	r8, r0
 801abe8:	4689      	mov	r9, r1
 801abea:	4630      	mov	r0, r6
 801abec:	4639      	mov	r1, r7
 801abee:	f7e5 fd7b 	bl	80006e8 <__aeabi_dmul>
 801abf2:	a355      	add	r3, pc, #340	; (adr r3, 801ad48 <__ieee754_log+0x348>)
 801abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abf8:	f7e5 fbc0 	bl	800037c <__adddf3>
 801abfc:	4632      	mov	r2, r6
 801abfe:	463b      	mov	r3, r7
 801ac00:	f7e5 fd72 	bl	80006e8 <__aeabi_dmul>
 801ac04:	a352      	add	r3, pc, #328	; (adr r3, 801ad50 <__ieee754_log+0x350>)
 801ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0a:	f7e5 fbb7 	bl	800037c <__adddf3>
 801ac0e:	4632      	mov	r2, r6
 801ac10:	463b      	mov	r3, r7
 801ac12:	f7e5 fd69 	bl	80006e8 <__aeabi_dmul>
 801ac16:	460b      	mov	r3, r1
 801ac18:	4602      	mov	r2, r0
 801ac1a:	4649      	mov	r1, r9
 801ac1c:	4640      	mov	r0, r8
 801ac1e:	f7e5 fbad 	bl	800037c <__adddf3>
 801ac22:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801ac26:	9b01      	ldr	r3, [sp, #4]
 801ac28:	3551      	adds	r5, #81	; 0x51
 801ac2a:	431d      	orrs	r5, r3
 801ac2c:	2d00      	cmp	r5, #0
 801ac2e:	4680      	mov	r8, r0
 801ac30:	4689      	mov	r9, r1
 801ac32:	dd48      	ble.n	801acc6 <__ieee754_log+0x2c6>
 801ac34:	4b4e      	ldr	r3, [pc, #312]	; (801ad70 <__ieee754_log+0x370>)
 801ac36:	2200      	movs	r2, #0
 801ac38:	4650      	mov	r0, sl
 801ac3a:	4659      	mov	r1, fp
 801ac3c:	f7e5 fd54 	bl	80006e8 <__aeabi_dmul>
 801ac40:	4652      	mov	r2, sl
 801ac42:	465b      	mov	r3, fp
 801ac44:	f7e5 fd50 	bl	80006e8 <__aeabi_dmul>
 801ac48:	4602      	mov	r2, r0
 801ac4a:	460b      	mov	r3, r1
 801ac4c:	4606      	mov	r6, r0
 801ac4e:	460f      	mov	r7, r1
 801ac50:	4640      	mov	r0, r8
 801ac52:	4649      	mov	r1, r9
 801ac54:	f7e5 fb92 	bl	800037c <__adddf3>
 801ac58:	ec53 2b18 	vmov	r2, r3, d8
 801ac5c:	f7e5 fd44 	bl	80006e8 <__aeabi_dmul>
 801ac60:	4680      	mov	r8, r0
 801ac62:	4689      	mov	r9, r1
 801ac64:	b964      	cbnz	r4, 801ac80 <__ieee754_log+0x280>
 801ac66:	4602      	mov	r2, r0
 801ac68:	460b      	mov	r3, r1
 801ac6a:	4630      	mov	r0, r6
 801ac6c:	4639      	mov	r1, r7
 801ac6e:	f7e5 fb83 	bl	8000378 <__aeabi_dsub>
 801ac72:	4602      	mov	r2, r0
 801ac74:	460b      	mov	r3, r1
 801ac76:	4650      	mov	r0, sl
 801ac78:	4659      	mov	r1, fp
 801ac7a:	f7e5 fb7d 	bl	8000378 <__aeabi_dsub>
 801ac7e:	e6d6      	b.n	801aa2e <__ieee754_log+0x2e>
 801ac80:	a321      	add	r3, pc, #132	; (adr r3, 801ad08 <__ieee754_log+0x308>)
 801ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac86:	ec51 0b19 	vmov	r0, r1, d9
 801ac8a:	f7e5 fd2d 	bl	80006e8 <__aeabi_dmul>
 801ac8e:	a320      	add	r3, pc, #128	; (adr r3, 801ad10 <__ieee754_log+0x310>)
 801ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac94:	4604      	mov	r4, r0
 801ac96:	460d      	mov	r5, r1
 801ac98:	ec51 0b19 	vmov	r0, r1, d9
 801ac9c:	f7e5 fd24 	bl	80006e8 <__aeabi_dmul>
 801aca0:	4642      	mov	r2, r8
 801aca2:	464b      	mov	r3, r9
 801aca4:	f7e5 fb6a 	bl	800037c <__adddf3>
 801aca8:	4602      	mov	r2, r0
 801acaa:	460b      	mov	r3, r1
 801acac:	4630      	mov	r0, r6
 801acae:	4639      	mov	r1, r7
 801acb0:	f7e5 fb62 	bl	8000378 <__aeabi_dsub>
 801acb4:	4652      	mov	r2, sl
 801acb6:	465b      	mov	r3, fp
 801acb8:	f7e5 fb5e 	bl	8000378 <__aeabi_dsub>
 801acbc:	4602      	mov	r2, r0
 801acbe:	460b      	mov	r3, r1
 801acc0:	4620      	mov	r0, r4
 801acc2:	4629      	mov	r1, r5
 801acc4:	e7d9      	b.n	801ac7a <__ieee754_log+0x27a>
 801acc6:	4602      	mov	r2, r0
 801acc8:	460b      	mov	r3, r1
 801acca:	4650      	mov	r0, sl
 801accc:	4659      	mov	r1, fp
 801acce:	f7e5 fb53 	bl	8000378 <__aeabi_dsub>
 801acd2:	ec53 2b18 	vmov	r2, r3, d8
 801acd6:	f7e5 fd07 	bl	80006e8 <__aeabi_dmul>
 801acda:	4606      	mov	r6, r0
 801acdc:	460f      	mov	r7, r1
 801acde:	2c00      	cmp	r4, #0
 801ace0:	f43f af23 	beq.w	801ab2a <__ieee754_log+0x12a>
 801ace4:	a308      	add	r3, pc, #32	; (adr r3, 801ad08 <__ieee754_log+0x308>)
 801ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acea:	ec51 0b19 	vmov	r0, r1, d9
 801acee:	f7e5 fcfb 	bl	80006e8 <__aeabi_dmul>
 801acf2:	a307      	add	r3, pc, #28	; (adr r3, 801ad10 <__ieee754_log+0x310>)
 801acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf8:	4604      	mov	r4, r0
 801acfa:	460d      	mov	r5, r1
 801acfc:	ec51 0b19 	vmov	r0, r1, d9
 801ad00:	e727      	b.n	801ab52 <__ieee754_log+0x152>
 801ad02:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801ad58 <__ieee754_log+0x358>
 801ad06:	e694      	b.n	801aa32 <__ieee754_log+0x32>
 801ad08:	fee00000 	.word	0xfee00000
 801ad0c:	3fe62e42 	.word	0x3fe62e42
 801ad10:	35793c76 	.word	0x35793c76
 801ad14:	3dea39ef 	.word	0x3dea39ef
 801ad18:	55555555 	.word	0x55555555
 801ad1c:	3fd55555 	.word	0x3fd55555
 801ad20:	df3e5244 	.word	0xdf3e5244
 801ad24:	3fc2f112 	.word	0x3fc2f112
 801ad28:	96cb03de 	.word	0x96cb03de
 801ad2c:	3fc74664 	.word	0x3fc74664
 801ad30:	94229359 	.word	0x94229359
 801ad34:	3fd24924 	.word	0x3fd24924
 801ad38:	55555593 	.word	0x55555593
 801ad3c:	3fe55555 	.word	0x3fe55555
 801ad40:	d078c69f 	.word	0xd078c69f
 801ad44:	3fc39a09 	.word	0x3fc39a09
 801ad48:	1d8e78af 	.word	0x1d8e78af
 801ad4c:	3fcc71c5 	.word	0x3fcc71c5
 801ad50:	9997fa04 	.word	0x9997fa04
 801ad54:	3fd99999 	.word	0x3fd99999
	...
 801ad60:	c3500000 	.word	0xc3500000
 801ad64:	43500000 	.word	0x43500000
 801ad68:	7fefffff 	.word	0x7fefffff
 801ad6c:	3ff00000 	.word	0x3ff00000
 801ad70:	3fe00000 	.word	0x3fe00000

0801ad74 <_init>:
 801ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad76:	bf00      	nop
 801ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad7a:	bc08      	pop	{r3}
 801ad7c:	469e      	mov	lr, r3
 801ad7e:	4770      	bx	lr

0801ad80 <_fini>:
 801ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad82:	bf00      	nop
 801ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad86:	bc08      	pop	{r3}
 801ad88:	469e      	mov	lr, r3
 801ad8a:	4770      	bx	lr
